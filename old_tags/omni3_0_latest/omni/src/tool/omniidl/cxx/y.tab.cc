
/*  A Bison parser, made from /local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	257
#define	ABSTRACT	258
#define	ANY	259
#define	ATTRIBUTE	260
#define	BOOLEAN	261
#define	CASE	262
#define	CHAR	263
#define	CONST	264
#define	CONTEXT	265
#define	CUSTOM	266
#define	DEFAULT	267
#define	DOUBLE	268
#define	ENUM	269
#define	EXCEPTION	270
#define	FACTORY	271
#define	FALSE_	272
#define	FIXED	273
#define	FLOAT	274
#define	IN	275
#define	INOUT	276
#define	INTERFACE	277
#define	LONG	278
#define	MODULE	279
#define	NATIVE	280
#define	OBJECT	281
#define	OCTET	282
#define	ONEWAY	283
#define	OUT	284
#define	PRIVATE	285
#define	PUBLIC	286
#define	RAISES	287
#define	READONLY	288
#define	SEQUENCE	289
#define	SHORT	290
#define	STRING	291
#define	STRUCT	292
#define	SUPPORTS	293
#define	SWITCH	294
#define	TRUE_	295
#define	TRUNCATABLE	296
#define	TYPEDEF	297
#define	UNION	298
#define	UNSIGNED	299
#define	VALUEBASE	300
#define	VALUETYPE	301
#define	VOID	302
#define	WCHAR	303
#define	WSTRING	304
#define	PRAGMA	305
#define	PRAGMA_PREFIX	306
#define	PRAGMA_ID	307
#define	PRAGMA_VERSION	308
#define	OMNI_PRAGMA	309
#define	END_PRAGMA	310
#define	UNKNOWN_PRAGMA_BODY	311
#define	INTEGER_LITERAL	312
#define	CHARACTER_LITERAL	313
#define	WIDE_CHARACTER_LITERAL	314
#define	FLOATING_PT_LITERAL	315
#define	STRING_LITERAL	316
#define	WIDE_STRING_LITERAL	317
#define	FIXED_PT_LITERAL	318
#define	SCOPE_DELIM	319
#define	LEFT_SHIFT	320
#define	RIGHT_SHIFT	321

#line 80 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"


#include <stdlib.h>
#include <string.h>

#include <idlutil.h>
#include <idlerr.h>
#include <idlrepoId.h>
#include <idlscope.h>
#include <idltype.h>
#include <idlexpr.h>
#include <idlast.h>

#define YYDEBUG 1

// Globals from lexer
extern int         yylineno;
extern char*       currentFile;
extern IDL_Boolean mainFile;

void yyerror(char *s) {
}
extern int yylex();

// Nasty hack for abstract valuetypes
ValueAbs* valueabs_hack = 0;

#ifdef __VMS
/*  Apparently, __ALLOCA is defined for some versions of the C (but not C++)
    compiler on VAX. */
#if defined(__ALPHA) || defined(__DECC) && __DECC_VER >= 60000000
#include <builtins.h>
#define alloca __ALLOCA
#else
#define alloca malloc
#endif
#endif


#line 120 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
typedef union {
  char*                    id_val;
  int                      int_val;
  IDL_ULong                ulong_val;
  IdlIntLiteral            int_literal_val;
#ifndef __VMS
  IdlFloatLiteral          float_literal_val;
#else
  double                   float_literal_val;
#endif
  char                     char_val;
  char*                    string_val;
  IDL_WChar                wchar_val;
  IDL_WChar*               wstring_val;
  IDL_Boolean              boolean_val;
  int                      fixed_val; // ***
  IdlType*                 type_val;
  TypeSpec*                type_spec_val;
  IdlExpr*                 expr_val;
  ScopedName*              scopedname_val;
  Decl*                    decl_val;
  Module*                  module_val;
  Interface*               interface_val;
  InheritSpec*             inheritspec_val;
  Forward*                 forward_val;
  Const*                   const_val;
  Typedef*                 typedef_val;
  Struct*                  struct_val;
  Exception*               exception_val;
  Member*                  member_val;
  Declarator*              declarator_val;
  Union*                   union_val;
  UnionCase*               union_case_val;
  CaseLabel*               case_label_val;
  ValueBase*               value_base_val;
  Value*                   value_val;
  ValueForward*            value_forward_val;
  ValueBox*                value_box_val;
  ValueAbs*                value_abs_val;
  ValueInheritSpec*        valueinheritspec_val;
  ValueInheritSupportSpec* valueinheritsupportspec_val;
  StateMember*             statemember_val;
  Factory*                 factory_val;
  Enumerator*              enumerator_val;
  Enum*                    enum_val;
  ArraySize*               array_size_val;
  Attribute*               attribute_val;
  Operation*               operation_val;
  Parameter*               parameter_val;
  RaisesSpec*              raisesspec_val;
  ContextSpec*             contextspec_val;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		501
#define	YYFLAG		-32768
#define	YYNTBASE	90

#define YYTRANSLATE(x) ((unsigned)(x) <= 321 ? yytranslate[x] : 236)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    83,    78,     2,    73,
    74,    81,    79,    72,    80,    89,    82,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    71,    68,    85,
    75,    86,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    87,     2,    88,    77,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    69,    76,    70,    84,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    14,    17,    20,    23,
    26,    28,    30,    32,    38,    39,    46,    49,    52,    54,
    56,    61,    62,    69,    72,    76,    82,    83,    85,    87,
    88,    91,    94,    97,   100,   103,   106,   108,   110,   111,
   113,   116,   119,   125,   127,   129,   131,   134,   138,   140,
   142,   144,   146,   149,   153,   157,   158,   166,   167,   176,
   178,   183,   187,   192,   195,   199,   204,   207,   210,   213,
   214,   216,   218,   222,   224,   225,   228,   230,   232,   234,
   239,   241,   243,   244,   251,   252,   259,   262,   263,   265,
   267,   271,   275,   281,   283,   285,   287,   289,   291,   293,
   295,   297,   299,   301,   303,   305,   309,   311,   315,   317,
   321,   323,   327,   331,   333,   337,   341,   343,   347,   351,
   355,   358,   360,   362,   364,   366,   368,   370,   374,   376,
   378,   380,   382,   384,   386,   388,   390,   392,   395,   397,
   400,   402,   404,   406,   409,   411,   413,   415,   418,   421,
   423,   425,   427,   429,   431,   433,   435,   437,   439,   441,
   443,   445,   447,   449,   451,   453,   455,   457,   459,   461,
   463,   466,   472,   474,   476,   478,   480,   482,   484,   487,
   489,   491,   493,   495,   497,   499,   501,   504,   506,   508,
   510,   513,   516,   520,   522,   524,   526,   528,   530,   532,
   539,   542,   545,   548,   552,   556,   558,   572,   575,   578,
   580,   582,   584,   586,   588,   590,   593,   597,   601,   603,
   606,   611,   615,   618,   625,   628,   631,   634,   640,   642,
   649,   654,   659,   661,   666,   668,   671,   673,   676,   680,
   685,   686,   688,   691,   697,   704,   707,   710,   711,   714,
   715,   723,   726,   730,   731,   733,   735,   737,   739,   744,
   748,   752,   755,   761,   765,   767,   769,   771,   772,   775,
   780,   783,   789,   790,   793,   798,   801,   807,   809,   811,
   813,   815,   822,   824,   826,   828,   830,   832,   834,   836,
   839,   840,   842,   846,   849,   854,   858,   865,   869,   873,
   877,   879
};

static const short yyrhs[] = {    -1,
    91,     0,    92,     0,    91,    92,     0,   151,    68,     0,
   134,    68,     0,   204,    68,     0,    96,    68,     0,    93,
    68,     0,   110,    68,     0,   227,     0,   230,     0,     1,
     0,    95,   229,    69,    91,    70,     0,     0,    95,     1,
    94,    69,    91,    70,     0,    95,     1,     0,    25,     3,
     0,    97,     0,    99,     0,   100,    69,   102,    70,     0,
     0,   100,     1,    98,    69,   102,    70,     0,   100,     1,
     0,   101,    23,     3,     0,   101,    23,     3,   229,   105,
     0,     0,     4,     0,   103,     0,     0,   103,   104,     0,
   151,    68,     0,   134,    68,     0,   204,    68,     0,   201,
    68,     0,   207,    68,     0,   227,     0,     1,     0,     0,
   106,     0,    71,   107,     0,   108,   229,     0,   107,    72,
   229,   108,   229,     0,     1,     0,   109,     0,     3,     0,
    65,     3,     0,   109,    65,     3,     0,   116,     0,   113,
     0,   112,     0,   111,     0,    47,     3,     0,     4,    47,
     3,     0,    47,     3,   153,     0,     0,     4,    47,     3,
   114,    69,   103,    70,     0,     0,     4,    47,     3,   118,
   115,    69,   103,    70,     0,     1,     0,   117,    69,   123,
    70,     0,    47,     3,   118,     0,    12,    47,     3,   118,
     0,    47,     3,     0,    12,    47,     3,     0,    71,   119,
    39,   107,     0,    71,   119,     0,    39,   107,     0,   120,
   121,     0,     0,    42,     0,   122,     0,   121,    72,   122,
     0,   109,     0,     0,   123,   124,     0,   104,     0,   125,
     0,   127,     0,   126,   153,   158,    68,     0,    32,     0,
    31,     0,     0,   130,    73,   131,    74,   128,    68,     0,
     0,   130,    73,     1,    74,   129,    68,     0,    17,     3,
     0,     0,   132,     0,   133,     0,   132,    72,   133,     0,
    21,   223,     3,     0,    10,   135,     3,    75,   136,     0,
   163,     0,   172,     0,   173,     0,   174,     0,   162,     0,
   196,     0,   197,     0,   225,     0,   109,     0,   175,     0,
   137,     0,   138,     0,   137,    76,   138,     0,   139,     0,
   138,    77,   139,     0,   140,     0,   139,    78,   140,     0,
   141,     0,   140,    67,   141,     0,   140,    66,   141,     0,
   142,     0,   141,    79,   142,     0,   141,    80,   142,     0,
   143,     0,   142,    81,   143,     0,   142,    82,   143,     0,
   142,    83,   143,     0,   144,   145,     0,   145,     0,    80,
     0,    79,     0,    84,     0,   109,     0,   146,     0,    73,
   136,    74,     0,    58,     0,   147,     0,   148,     0,    59,
     0,    60,     0,    64,     0,    61,     0,   149,     0,    62,
     0,   147,    62,     0,    63,     0,   148,    63,     0,    41,
     0,    18,     0,   136,     0,    43,   152,     0,   178,     0,
   182,     0,   191,     0,    26,     3,     0,   153,   158,     0,
   154,     0,   157,     0,   155,     0,   156,     0,   109,     0,
   162,     0,   163,     0,   172,     0,   173,     0,   174,     0,
   175,     0,   176,     0,   177,     0,   226,     0,   195,     0,
   196,     0,   197,     0,   224,     0,   178,     0,   182,     0,
   191,     0,   159,   229,     0,   158,    72,   229,   159,   229,
     0,   160,     0,   161,     0,     3,     0,   198,     0,    20,
     0,    14,     0,    24,    14,     0,   164,     0,   168,     0,
   165,     0,   166,     0,   167,     0,    36,     0,    24,     0,
    24,    24,     0,   169,     0,   170,     0,   171,     0,    45,
    36,     0,    45,    24,     0,    45,    24,    24,     0,     9,
     0,    49,     0,     7,     0,    28,     0,     5,     0,    27,
     0,   179,   229,    69,   229,   180,    70,     0,   179,     1,
     0,    38,     3,     0,   181,   229,     0,   180,   181,   229,
     0,   153,   158,    68,     0,     1,     0,   183,   229,    40,
    73,   229,   184,   229,    74,   229,    69,   229,   185,    70,
     0,   183,     1,     0,    44,     3,     0,   163,     0,   172,
     0,   174,     0,   191,     0,   109,     0,   186,     0,   187,
   229,     0,   186,   187,   229,     0,   188,   190,    68,     0,
   189,     0,   188,   189,     0,     8,   136,    71,   229,     0,
    13,    71,   229,     0,   153,   159,     0,   192,   229,    69,
   229,   193,    70,     0,   192,     1,     0,    15,     3,     0,
   194,   229,     0,   193,    72,   229,   194,   229,     0,     3,
     0,    35,    85,   154,    72,   150,    86,     0,    35,    85,
   154,    86,     0,    37,    85,   150,    86,     0,    37,     0,
    50,    85,   150,    86,     0,    50,     0,     3,   199,     0,
   200,     0,   199,   200,     0,    87,   150,    88,     0,   202,
     6,   223,   203,     0,     0,    34,     0,   160,   229,     0,
   203,    72,   229,   160,   229,     0,   205,   229,    69,   229,
   206,    70,     0,   205,     1,     0,    16,     3,     0,     0,
   206,   181,     0,     0,   209,   229,   213,   208,   229,   217,
   220,     0,   209,     1,     0,   210,   212,     3,     0,     0,
   211,     0,    29,     0,   223,     0,    48,     0,    73,   229,
   214,    74,     0,    73,   229,    74,     0,    73,     1,    74,
     0,   215,   229,     0,   214,    72,   229,   215,   229,     0,
   216,   223,     3,     0,    21,     0,    30,     0,    22,     0,
     0,   218,   229,     0,    33,    73,   219,    74,     0,   109,
   229,     0,   219,    72,   229,   109,   229,     0,     0,   221,
   229,     0,    11,    73,   222,    74,     0,   147,   229,     0,
   222,    72,   229,   147,   229,     0,   155,     0,   196,     0,
   197,     0,   109,     0,    19,    85,   150,    72,   136,    86,
     0,    19,     0,    46,     0,   231,     0,   232,     0,   233,
     0,   234,     0,   227,     0,   228,   227,     0,     0,   228,
     0,    52,   147,    56,     0,    52,     1,     0,    53,   109,
   147,    56,     0,    53,     1,    56,     0,    54,   109,    58,
    89,    58,    56,     0,    54,     1,    56,     0,    51,   235,
    56,     0,    55,   235,    56,     0,    57,     0,   235,    57,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   384,   386,   392,   394,   400,   402,   403,   404,   405,   406,
   407,   408,   409,   415,   420,   423,   427,   435,   439,   441,
   444,   449,   452,   456,   464,   470,   477,   479,   482,   486,
   488,   494,   496,   497,   498,   499,   500,   501,   507,   509,
   512,   516,   520,   528,   535,   539,   543,   546,   556,   558,
   559,   560,   563,   567,   572,   580,   583,   588,   592,   597,
   609,   616,   622,   627,   630,   635,   639,   642,   647,   654,
   656,   659,   663,   673,   677,   679,   685,   687,   688,   691,
   699,   701,   704,   707,   711,   713,   721,   727,   729,   732,
   734,   740,   748,   754,   756,   757,   758,   759,   760,   761,
   762,   763,   766,   769,   773,   775,   778,   780,   783,   785,
   790,   792,   795,   800,   802,   803,   806,   808,   811,   814,
   819,   825,   828,   830,   831,   834,   838,   839,   842,   846,
   849,   852,   855,   858,   861,   864,   869,   871,   880,   882,
   891,   893,   896,   904,   906,   907,   908,   909,   914,   922,
   924,   927,   929,   930,   935,   937,   938,   939,   940,   941,
   942,   943,   944,   947,   949,   950,   951,   954,   956,   957,
   960,   962,   968,   970,   973,   979,   983,   985,   986,   989,
   991,   994,   996,   997,  1000,  1004,  1008,  1012,  1014,  1015,
  1018,  1022,  1026,  1030,  1034,  1038,  1042,  1046,  1050,  1054,
  1059,  1067,  1073,  1075,  1081,  1087,  1094,  1103,  1111,  1117,
  1119,  1120,  1121,  1122,  1128,  1132,  1134,  1140,  1147,  1149,
  1155,  1159,  1164,  1171,  1176,  1183,  1189,  1191,  1197,  1203,
  1207,  1212,  1214,  1219,  1221,  1226,  1232,  1234,  1240,  1244,
  1250,  1252,  1255,  1257,  1263,  1268,  1276,  1282,  1284,  1290,
  1293,  1297,  1306,  1312,  1314,  1317,  1321,  1323,  1326,  1328,
  1329,  1336,  1338,  1344,  1350,  1352,  1353,  1356,  1358,  1361,
  1365,  1369,  1375,  1377,  1380,  1384,  1388,  1394,  1396,  1397,
  1398,  1403,  1420,  1428,  1432,  1434,  1435,  1436,  1439,  1441,
  1444,  1446,  1449,  1453,  1458,  1463,  1468,  1473,  1478,  1484,
  1490,  1492
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"ABSTRACT","ANY","ATTRIBUTE","BOOLEAN","CASE","CHAR","CONST","CONTEXT","CUSTOM",
"DEFAULT","DOUBLE","ENUM","EXCEPTION","FACTORY","FALSE_","FIXED","FLOAT","IN",
"INOUT","INTERFACE","LONG","MODULE","NATIVE","OBJECT","OCTET","ONEWAY","OUT",
"PRIVATE","PUBLIC","RAISES","READONLY","SEQUENCE","SHORT","STRING","STRUCT",
"SUPPORTS","SWITCH","TRUE_","TRUNCATABLE","TYPEDEF","UNION","UNSIGNED","VALUEBASE",
"VALUETYPE","VOID","WCHAR","WSTRING","PRAGMA","PRAGMA_PREFIX","PRAGMA_ID","PRAGMA_VERSION",
"OMNI_PRAGMA","END_PRAGMA","UNKNOWN_PRAGMA_BODY","INTEGER_LITERAL","CHARACTER_LITERAL",
"WIDE_CHARACTER_LITERAL","FLOATING_PT_LITERAL","STRING_LITERAL","WIDE_STRING_LITERAL",
"FIXED_PT_LITERAL","SCOPE_DELIM","LEFT_SHIFT","RIGHT_SHIFT","';'","'{'","'}'",
"':'","','","'('","')'","'='","'|'","'^'","'&'","'+'","'-'","'*'","'/'","'%'",
"'~'","'<'","'>'","'['","']'","'.'","start","definition_plus","definition","module",
"@1","module_header","interface","interface_dcl","@2","forward_dcl","interface_header",
"abstract_opt","interface_body","export_star","export","interface_inheritance_spec_opt",
"interface_inheritance_spec","interface_inheritance_list","interface_name","scoped_name",
"value","value_forward_dcl","value_box_dcl","value_abs_dcl","@3","@4","value_dcl",
"value_header","value_inheritance_spec","value_value_inheritance_spec","truncatable_opt",
"value_inheritance_list","value_name","value_element_star","value_element","state_member",
"member_access","init_dcl","@5","@6","init_dcl_header","init_param_decls_opt",
"init_param_decls","init_param_decl","const_dcl","const_type","const_exp","or_expr",
"xor_expr","and_expr","shift_expr","add_expr","mult_expr","unary_expr","unary_operator",
"primary_expr","literal","string_literal_plus","wide_string_literal_plus","boolean_literal",
"positive_int_const","type_dcl","type_declarator","type_spec","simple_type_spec",
"base_type_spec","template_type_spec","constr_type_spec","declarators","declarator",
"simple_declarator","complex_declarator","floating_pt_type","integer_type","signed_int",
"signed_short_int","signed_long_int","signed_long_long_int","unsigned_int","unsigned_short_int",
"unsigned_long_int","unsigned_long_long_int","char_type","wide_char_type","boolean_type",
"octet_type","any_type","object_type","struct_type","struct_header","member_list",
"member","union_type","union_header","switch_type_spec","switch_body","case_plus",
"case","case_label_plus","case_label","element_spec","enum_type","enum_header",
"enumerator_list","enumerator","sequence_type","string_type","wide_string_type",
"array_declarator","fixed_array_size_plus","fixed_array_size","attr_dcl","readonly_opt",
"simple_declarator_list","except_dcl","except_header","member_star","op_dcl",
"@7","op_header","op_attribute_opt","op_attribute","op_type_spec","parameter_dcls",
"param_dcl_list","param_dcl","param_attribute","raises_expr_opt","raises_expr",
"scoped_name_list","context_expr_opt","context_expr","string_literal_list","param_type_spec",
"fixed_pt_type","fixed_pt_const_type","value_base_type","pragma","pragmas","pragmas_opt",
"pragma_prefix","pragma_id","pragma_version","unknown_pragma","omni_pragma",
"unknown_pragma_body_plus", NULL
};
#endif

static const short yyr1[] = {     0,
    90,    90,    91,    91,    92,    92,    92,    92,    92,    92,
    92,    92,    92,    93,    94,    93,    93,    95,    96,    96,
    97,    98,    97,    97,    99,   100,   101,   101,   102,   103,
   103,   104,   104,   104,   104,   104,   104,   104,   105,   105,
   106,   107,   107,   107,   108,   109,   109,   109,   110,   110,
   110,   110,   111,   111,   112,   114,   113,   115,   113,   113,
   116,   117,   117,   117,   117,   118,   118,   118,   119,   120,
   120,   121,   121,   122,   123,   123,   124,   124,   124,   125,
   126,   126,   128,   127,   129,   127,   130,   131,   131,   132,
   132,   133,   134,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   136,   137,   137,   138,   138,   139,   139,
   140,   140,   140,   141,   141,   141,   142,   142,   142,   142,
   143,   143,   144,   144,   144,   145,   145,   145,   146,   146,
   146,   146,   146,   146,   146,   146,   147,   147,   148,   148,
   149,   149,   150,   151,   151,   151,   151,   151,   152,   153,
   153,   154,   154,   154,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   156,   156,   156,   156,   157,   157,   157,
   158,   158,   159,   159,   160,   161,   162,   162,   162,   163,
   163,   164,   164,   164,   165,   166,   167,   168,   168,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   178,   179,   180,   180,   181,   181,   182,   182,   183,   184,
   184,   184,   184,   184,   185,   186,   186,   187,   188,   188,
   189,   189,   190,   191,   191,   192,   193,   193,   194,   195,
   195,   196,   196,   197,   197,   198,   199,   199,   200,   201,
   202,   202,   203,   203,   204,   204,   205,   206,   206,   208,
   207,   207,   209,   210,   210,   211,   212,   212,   213,   213,
   213,   214,   214,   215,   216,   216,   216,   217,   217,   218,
   219,   219,   220,   220,   221,   222,   222,   223,   223,   223,
   223,   224,   225,   226,   227,   227,   227,   227,   228,   228,
   229,   229,   230,   230,   231,   231,   232,   232,   233,   234,
   235,   235
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     1,     1,     1,     5,     0,     6,     2,     2,     1,     1,
     4,     0,     6,     2,     3,     5,     0,     1,     1,     0,
     2,     2,     2,     2,     2,     2,     1,     1,     0,     1,
     2,     2,     5,     1,     1,     1,     2,     3,     1,     1,
     1,     1,     2,     3,     3,     0,     7,     0,     8,     1,
     4,     3,     4,     2,     3,     4,     2,     2,     2,     0,
     1,     1,     3,     1,     0,     2,     1,     1,     1,     4,
     1,     1,     0,     6,     0,     6,     2,     0,     1,     1,
     3,     3,     5,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     1,     3,     1,     3,
     1,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     2,     1,     1,     1,     1,     1,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     2,
     1,     1,     1,     2,     1,     1,     1,     2,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     1,     1,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
     2,     2,     3,     1,     1,     1,     1,     1,     1,     6,
     2,     2,     2,     3,     3,     1,    13,     2,     2,     1,
     1,     1,     1,     1,     1,     2,     3,     3,     1,     2,
     4,     3,     2,     6,     2,     2,     2,     5,     1,     6,
     4,     4,     1,     4,     1,     2,     1,     2,     3,     4,
     0,     1,     2,     5,     6,     2,     2,     0,     2,     0,
     7,     2,     3,     0,     1,     1,     1,     1,     4,     3,
     3,     2,     5,     3,     1,     1,     1,     0,     2,     4,
     2,     5,     0,     2,     4,     2,     5,     1,     1,     1,
     1,     6,     1,     1,     1,     1,     1,     1,     1,     2,
     0,     1,     3,     2,     4,     3,     6,     3,     3,     3,
     1,     2
};

static const short yydefact[] = {     0,
    13,    28,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     3,     0,
     0,     0,    19,    20,     0,     0,     0,    52,    51,    50,
    49,     0,     0,     0,   145,     0,   146,     0,   147,     0,
     0,     0,    11,    12,   285,   286,   287,   288,     0,    46,
   196,   194,   178,   283,   177,   186,   197,   185,   233,     0,
   195,   235,     0,   102,     0,    98,    94,   180,   182,   183,
   184,   181,   188,   189,   190,    95,    96,    97,   103,    99,
   100,   101,     0,   226,   247,    18,   148,   202,   198,     0,
   199,     0,   284,   154,   144,     0,   150,   152,   153,   151,
   155,   156,   157,   158,   159,   160,   161,   162,   168,   169,
   170,   164,   165,   166,   167,   163,   209,    53,   301,     0,
   294,   137,     0,     0,     0,     0,     0,     0,     4,     9,
    15,   289,   292,     0,     8,    22,    30,     0,    10,    75,
     6,     5,   201,     0,   208,     0,   225,     0,     7,   246,
     0,    54,   179,   187,     0,   192,   191,     0,    47,     0,
     0,    65,     0,     0,   175,   149,   291,   173,   174,   176,
     0,    70,    62,    55,   299,   302,   293,   138,   296,     0,
   298,     0,   300,     0,   290,     0,     0,     0,     0,   291,
     0,   291,     0,   291,   291,     0,    58,   142,   141,   129,
   132,   133,   135,   139,   134,     0,   124,   123,   125,   126,
   143,   104,   105,   107,   109,   111,   114,   117,     0,   122,
   127,   130,   131,   136,     0,   193,     0,    48,     0,    63,
     0,     0,     0,   236,   237,   291,   171,    44,    68,   291,
    45,    71,    67,     0,   295,     0,     0,     0,    30,    21,
    38,   256,   242,    31,     0,     0,     0,     0,     0,     0,
     0,     0,   255,    37,    39,     0,    82,    81,    61,    77,
    76,    78,     0,    79,     0,     0,   291,     0,   248,    30,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   121,   140,   232,   234,    93,     0,     0,   231,
     0,   238,     0,   291,    42,     0,    74,    69,    72,     0,
     0,    14,     0,    33,    32,    35,     0,    34,    36,   252,
     0,   258,   281,   278,   279,   280,     0,   257,     0,    26,
    40,    87,     0,     0,   206,     0,     0,   291,     0,   229,
     0,   291,     0,     0,    30,   128,   106,   108,   110,   113,
   112,   115,   116,   118,   119,   120,     0,     0,   239,   291,
     0,    66,     0,   297,    16,    23,     0,     0,   250,   253,
    41,     0,     0,     0,     0,    89,    90,     0,   200,   291,
   203,   186,   214,   210,   211,   212,   291,   213,   224,   291,
   227,   245,   249,    57,     0,   282,   230,   172,   291,    73,
   175,   291,   240,     0,     0,   291,    80,    85,     0,    83,
     0,   205,   204,     0,     0,    59,    43,   243,   291,   261,
   265,   267,   266,   260,     0,   291,     0,   268,     0,    92,
     0,    91,   291,   291,     0,   291,   259,   262,     0,     0,
   273,   291,    86,    84,     0,   228,   291,     0,   264,     0,
     0,   251,   291,   269,   291,   244,   291,   291,     0,     0,
   274,     0,   263,   271,   291,   270,   291,     0,     0,     0,
     0,   215,   291,     0,   219,     0,   276,   291,   275,     0,
   291,   207,   291,   216,     0,   220,     0,   291,     0,   291,
   222,   217,   223,   218,   272,   291,   221,   277,     0,     0,
     0
};

static const short yydefgoto[] = {   499,
    18,    19,    20,   184,    21,    22,    23,   187,    24,    25,
    26,   188,   189,   254,   330,   331,   239,   240,   210,    27,
    28,    29,    30,   196,   281,    31,    32,   173,   243,   244,
   308,   309,   191,   271,   272,   273,   274,   431,   429,   275,
   375,   376,   377,    33,    65,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
    34,    95,   336,    97,    98,    99,   100,   166,   167,   168,
   169,   101,   102,    68,    69,    70,    71,    72,    73,    74,
    75,   103,   104,   105,   106,   107,   108,    35,    36,   337,
   338,    37,    38,   387,   471,   472,   473,   474,   475,   487,
    39,    40,   341,   342,   112,   113,   114,   170,   234,   235,
   257,   258,   403,    41,    42,   343,   260,   406,   261,   262,
   263,   327,   369,   425,   426,   427,   441,   442,   459,   452,
   453,   468,   328,   115,    82,   116,   132,   133,   134,    44,
    45,    46,    47,    48,   120
};

static const short yypact[] = {  1253,
   -34,    22,  1222,    30,    82,   124,   131,   140,   147,  1082,
   162,   192,   148,    70,    38,    59,   148,  1309,-32768,   141,
    28,   178,-32768,-32768,    36,   207,   184,-32768,-32768,-32768,
-32768,   185,   191,   208,-32768,    75,-32768,   180,-32768,   106,
   211,   153,-32768,-32768,-32768,-32768,-32768,-32768,   280,-32768,
-32768,-32768,-32768,-32768,-32768,    35,-32768,-32768,   202,    16,
-32768,   206,   296,   236,   299,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   303,-32768,-32768,-32768,-32768,-32768,-32768,   228,
-32768,   232,-32768,   236,-32768,   313,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   933,-32768,   181,
-32768,-32768,    86,   264,   109,   266,   -20,   233,-32768,-32768,
   255,-32768,   132,   256,-32768,   258,-32768,   321,-32768,-32768,
-32768,-32768,-32768,   259,-32768,   289,-32768,   262,-32768,-32768,
   263,     9,-32768,-32768,    29,   314,-32768,    29,-32768,   340,
   269,    15,    29,  1130,   267,   279,   132,-32768,-32768,-32768,
    60,   315,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    90,
-32768,   271,-32768,   286,-32768,  1364,   287,   288,   658,   159,
   601,   132,   290,   132,   132,   293,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    29,-32768,-32768,-32768,   236,
-32768,   291,   292,   295,   229,   -37,   -25,-32768,   138,-32768,
-32768,   302,   305,-32768,   284,-32768,   297,-32768,    29,-32768,
   294,   -36,    29,   267,-32768,   132,-32768,-32768,   307,   132,
   236,-32768,   326,    52,-32768,   319,  1364,   482,-32768,-32768,
-32768,-32768,-32768,-32768,   317,   320,   325,   365,   327,   331,
    67,  1178,-32768,-32768,   310,   384,-32768,-32768,-32768,-32768,
-32768,-32768,  1082,-32768,   316,   986,   132,   391,-32768,-32768,
   333,   329,    29,    29,    29,    29,    29,    29,    29,    29,
    29,    29,-32768,-32768,-32768,-32768,-32768,    29,    29,-32768,
   312,-32768,   313,   132,-32768,    60,   236,   334,-32768,   351,
   880,-32768,   338,-32768,-32768,-32768,   212,-32768,-32768,-32768,
   336,-32768,   236,-32768,-32768,-32768,   407,-32768,    60,-32768,
-32768,-32768,   313,    32,-32768,   313,   377,   132,   285,-32768,
   110,   132,   829,   715,-32768,-32768,   292,   295,   229,   -37,
   -37,   -25,   -25,-32768,-32768,-32768,   330,   332,-32768,   132,
    52,   307,    52,-32768,-32768,-32768,   408,    45,-32768,-32768,
   307,    98,   345,   212,   346,   352,-32768,   104,-32768,   132,
-32768,   406,   236,-32768,-32768,-32768,   132,-32768,-32768,   132,
-32768,-32768,-32768,-32768,   772,-32768,-32768,-32768,   132,-32768,
-32768,   132,   359,   358,   117,   132,-32768,-32768,   430,-32768,
   413,-32768,-32768,   361,   391,-32768,-32768,-32768,   132,-32768,
-32768,-32768,-32768,-32768,   116,   132,   212,   403,   369,-32768,
   370,-32768,   132,   132,   408,   132,-32768,-32768,   436,   367,
   432,   132,-32768,-32768,   372,-32768,   132,    43,-32768,    52,
   371,-32768,   132,-32768,   132,-32768,   132,   190,   144,   383,
-32768,   155,-32768,-32768,   132,-32768,   231,   151,    29,   378,
   380,   155,   132,  1034,-32768,    52,-32768,   132,-32768,   381,
   132,-32768,   132,-32768,   313,-32768,   385,   190,   383,   132,
-32768,-32768,-32768,-32768,-32768,   231,-32768,-32768,   454,   456,
-32768
};

static const short yypgoto[] = {-32768,
  -114,    -1,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   209,  -250,   268,-32768,-32768,  -278,    96,    -2,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -17,-32768,-32768,
-32768,    97,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    50,  -171,-32768,  -194,-32768,   179,   183,   193,
    11,    23,   -24,-32768,   244,-32768,   -14,-32768,-32768,  -132,
  -167,-32768,    -8,   300,  -243,-32768,-32768,   -80,  -292,  -323,
-32768,   462,     6,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,     7,   465,    13,   466,-32768,-32768,    -4,-32768,-32768,
  -179,     5,-32768,-32768,-32768,-32768,     4,-32768,     8,-32768,
    -3,-32768,-32768,    62,-32768,     1,     2,-32768,-32768,   246,
-32768,-32768,-32768,  -166,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    37,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -290,-32768,-32768,-32768,     3,-32768,   113,-32768,
-32768,-32768,-32768,-32768,   467
};


#define	YYLAST		1419


static const short yytable[] = {   123,
    64,    96,    43,    80,    81,   109,   111,    94,    67,    76,
   360,   282,   125,   127,   110,    78,   129,   255,   324,   255,
    43,   256,   259,   256,   259,   227,   367,   362,   131,   344,
   231,    50,   373,   -60,   297,   299,   136,   182,   124,   156,
    50,   288,   289,   402,   160,   404,   198,   171,   153,   300,
   371,   157,   374,   171,    50,   290,   291,   292,   154,   126,
   238,    50,    50,   421,   422,  -291,  -291,   320,    49,   199,
   121,   248,   423,   324,  -291,   143,    83,   -56,    13,   172,
    15,    16,    17,   409,    84,   172,   200,   201,   202,   203,
   122,   204,   205,    63,   395,    13,  -291,    15,    16,    17,
   301,   206,    63,   357,   137,   -88,   147,   207,   208,   174,
   180,   447,   209,   109,   111,    94,    63,    13,  -291,    15,
    16,    17,   110,    63,    63,    13,    85,    15,    16,    17,
   324,   122,   311,    86,   197,   185,   439,   421,   422,  -291,
    50,   177,    87,  -291,   230,   245,   423,   178,   144,    88,
   146,   178,   148,   150,   151,   198,    13,   380,    15,    16,
    17,    94,   469,   393,   117,   407,   358,   470,   241,   236,
   122,   412,   255,   160,  -291,   236,   256,   259,   199,   389,
   145,   390,    13,   324,    15,    16,    17,   436,    43,   437,
   424,   264,   493,   264,   118,   200,   201,   202,   203,   122,
   204,   205,    63,    13,   119,    15,    16,    17,   130,    13,
   206,    15,    16,    17,    50,   465,    89,   466,    51,  -291,
    52,  -291,   478,   255,   479,    53,   -25,   256,   259,   138,
    13,    55,    15,    16,    17,    56,   175,   176,    91,    57,
    13,   307,    15,    16,    17,   135,   129,    58,    59,    43,
    43,   139,   372,   140,   160,   378,    60,    93,   141,   323,
    61,    62,   325,   326,   333,   354,   355,   356,   109,   111,
    94,   109,   111,    94,   480,   142,    63,   110,   149,   237,
   110,    13,   152,    15,    16,    17,   155,    50,   183,   176,
   158,    51,   178,    52,   286,   287,   350,   351,   159,     5,
   160,   161,   265,   241,   276,   162,   278,   279,   382,   129,
   352,   353,   163,    43,   323,   165,   164,   325,   326,   179,
    58,   181,   -17,   190,   186,   -24,   241,   192,   193,    60,
   194,   195,   109,   111,    94,   388,   383,   226,   109,   111,
    94,   110,   228,   229,   384,   385,   264,   110,   303,    63,
   236,   386,   305,   233,   247,   249,   242,   250,   241,   246,
   307,   280,   277,   178,   306,   298,   283,   294,   284,   295,
   317,   323,   285,   321,   325,   326,   310,   335,   304,    50,
   329,    89,   296,    51,   314,    52,   332,   315,   334,   339,
    53,     5,   316,   340,   318,    90,    55,   264,   319,   359,
    56,   345,   346,    91,    57,   363,   364,   366,   368,   370,
   401,    92,    58,    59,     9,   396,   361,   397,   408,   410,
    11,    60,    93,   411,   323,    61,    62,   325,   326,   154,
   419,   420,   430,   374,   433,   440,   443,   444,   449,   450,
   455,    63,   451,   460,   122,   467,   379,   458,   481,   482,
   381,   490,   494,   500,   391,   501,   399,   313,   270,   400,
   432,   347,   293,   232,    66,   485,   348,    77,    79,   109,
   111,    94,   398,   488,   496,   483,   434,   349,   110,   302,
   405,   486,     1,   128,   457,     2,     0,     0,     0,     0,
     0,     3,   413,     4,     0,     0,     5,     6,     0,   414,
     0,     0,   415,     0,   -27,     0,     7,     8,     0,     0,
     0,   417,     0,     0,   418,     0,     0,     0,   428,     9,
     0,     0,     0,     0,    10,    11,     0,     0,    12,     0,
     0,   435,    13,    14,    15,    16,    17,     0,   438,     0,
     0,     0,     0,     0,     0,   445,   446,     0,   448,     0,
     0,   312,     0,     0,   454,     0,     0,     0,     0,   456,
     0,     0,     0,     0,     0,   461,     0,   462,     0,   463,
   464,     0,     0,     0,     0,     0,     0,   476,     0,   477,
     0,     0,     0,     0,     0,   484,     0,     0,     0,     0,
   489,     0,     0,   491,     0,   492,     0,     0,     0,     0,
   495,   251,   497,  -254,     0,  -254,  -241,  -254,   498,  -254,
     3,     0,     0,     0,  -254,     5,     6,   266,     0,     0,
  -254,     0,     0,     0,  -254,     0,     8,  -254,  -254,   252,
     0,   267,   268,     0,   253,     0,  -254,  -254,     9,     0,
     0,     0,     0,    10,    11,  -254,  -254,     0,  -254,  -254,
  -254,    13,     0,    15,    16,    17,     0,     0,   251,     0,
  -254,     0,  -254,  -241,  -254,  -254,  -254,     3,     0,     0,
   269,  -254,     5,     6,     0,     0,     0,  -254,     0,     0,
     0,  -254,     0,     8,  -254,  -254,   252,     0,     0,     0,
     0,   253,     0,  -254,  -254,     9,     0,     0,     0,     0,
    10,    11,  -254,  -254,     0,  -254,  -254,  -254,    13,     0,
    15,    16,    17,     0,     0,   251,     0,  -254,     0,  -254,
  -241,  -254,  -254,  -254,     3,     0,     0,   -29,  -254,     5,
     6,     0,     0,     0,  -254,     0,     0,     0,  -254,     0,
     8,  -254,  -254,   252,     0,     0,     0,     0,   253,     0,
  -254,  -254,     9,     0,     0,     0,     0,    10,    11,  -254,
  -254,     0,  -254,  -254,  -254,    13,     0,    15,    16,    17,
     0,     0,   251,     0,  -254,     0,  -254,  -241,  -254,  -254,
  -254,     3,     0,     0,   394,  -254,     5,     6,     0,     0,
     0,  -254,     0,     0,     0,  -254,     0,     8,  -254,  -254,
   252,     0,     0,     0,     0,   253,     0,  -254,  -254,     9,
     0,     0,     0,     0,    10,    11,  -254,  -254,     0,  -254,
  -254,  -254,    13,     0,    15,    16,    17,     0,     0,   335,
     0,    50,     0,    89,     0,    51,  -254,    52,     0,     0,
     0,   416,    53,     5,     0,     0,     0,    90,    55,     0,
     0,     0,    56,     0,     0,    91,    57,     0,     0,     0,
     0,     0,     0,    92,    58,    59,     9,     0,     0,     0,
     0,     0,    11,    60,    93,     0,     0,    61,    62,     0,
     1,     0,     0,     2,     0,     0,     0,     0,     0,     3,
     0,     4,     0,    63,     5,     6,     0,     0,   392,     0,
     0,     0,   -27,     0,     7,     8,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     9,     0,     0,
     0,     0,    10,    11,     0,     0,    12,     0,     0,     0,
    13,    14,    15,    16,    17,    50,     0,    89,     0,    51,
     0,    52,     0,     0,     0,     0,    53,     5,     0,   365,
     0,    90,    55,     0,     0,     0,    56,     0,     0,    91,
    57,     0,     0,     0,     0,     0,     0,    92,    58,    59,
     9,   171,     0,     0,     0,     0,    11,    60,    93,     0,
     0,    61,    62,     0,     0,     0,   335,     0,    50,     0,
    89,     0,    51,     0,    52,     0,     0,    63,     0,    53,
     5,   -64,     0,   172,    90,    55,     0,     0,     0,    56,
     0,     0,    91,    57,     0,     0,     0,     0,     0,     0,
    92,    58,    59,     9,     0,     0,     0,     0,     0,    11,
    60,    93,     0,     0,    61,    62,    50,     0,    89,     0,
    51,   469,    52,     0,     0,     0,   470,    53,     5,     0,
    63,     0,    90,    55,     0,     0,     0,    56,     0,     0,
    91,    57,     0,     0,     0,     0,     0,     0,    92,    58,
    59,     9,     0,     0,     0,     0,     0,    11,    60,    93,
     0,     0,    61,    62,    50,     0,    89,     0,    51,     0,
    52,     0,     0,     0,     0,    53,     5,     0,    63,     0,
    90,    55,     0,     0,     0,    56,     0,     0,    91,    57,
     0,     0,     0,     0,     0,     0,    92,    58,    59,     9,
     0,     0,     0,     0,     0,    11,    60,    93,     0,     0,
    61,    62,    50,     0,    89,     0,    51,     0,    52,     0,
     0,     0,     0,    53,     0,     0,    63,     0,    90,    55,
     0,     0,     0,    56,     0,     0,    91,    57,     0,     0,
     0,     0,     0,     0,    92,    58,    59,     0,     0,     0,
     0,     0,     0,     0,    60,    93,     0,     0,    61,    62,
    50,     0,    89,     0,    51,     0,    52,     0,     0,     0,
     0,    53,     0,     0,    63,     0,     0,    55,     0,     0,
     0,    56,     0,     0,    91,    57,     0,     0,     0,     0,
     0,     0,     0,    58,    59,     0,     0,     0,     0,     0,
     0,     0,    60,    93,    50,   322,    61,    62,    51,     0,
    52,     0,     0,     0,     0,    53,     0,     0,     0,     0,
    54,    55,    63,     0,     0,    56,     0,     0,     0,    57,
     0,     0,    -1,     1,     0,     0,     2,    58,    59,     0,
     0,     0,     3,     0,     4,     0,    60,     5,     6,     0,
    61,    62,     0,     0,     0,   -27,     0,     7,     8,     0,
     0,     0,     0,     0,     0,     0,    63,     0,     0,     0,
     9,     0,     0,     0,     0,    10,    11,     0,     0,    12,
     0,     0,     0,    13,    14,    15,    16,    17,    -2,     1,
     0,     0,     2,     0,     0,     0,     0,     0,     3,     0,
     4,     0,     0,     5,     6,     0,     0,     0,     0,     0,
     0,   -27,     0,     7,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     9,     0,     0,     0,
     0,    10,    11,     0,     0,    12,     0,     0,     0,    13,
    14,    15,    16,    17,     1,     0,     0,     2,     0,     0,
     0,     0,     0,     3,     0,     4,     0,     0,     5,     6,
     0,     0,     0,     0,     0,     0,   -27,     0,     7,     8,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     9,     0,     0,     0,     0,    10,    11,     0,     0,
    12,     0,     0,     0,    13,    14,    15,    16,    17
};

static const short yycheck[] = {    14,
     3,    10,     0,     3,     3,    10,    10,    10,     3,     3,
   303,   206,    15,    16,    10,     3,    18,   189,   262,   191,
    18,   189,   189,   191,   191,   158,   317,   306,     1,   280,
   163,     3,     1,    68,   229,    72,     1,    58,     1,    24,
     3,    79,    80,   367,    65,     1,    18,    39,    14,    86,
   329,    36,    21,    39,     3,    81,    82,    83,    24,     1,
     1,     3,     3,    21,    22,    21,    22,     1,    47,    41,
     1,   186,    30,   317,    30,     1,    47,    69,    51,    71,
    53,    54,    55,   374,     3,    71,    58,    59,    60,    61,
    62,    63,    64,    65,   345,    51,    69,    53,    54,    55,
   233,    73,    65,   298,    69,    74,     1,    79,    80,   118,
   125,   435,    84,   118,   118,   118,    65,    51,    74,    53,
    54,    55,   118,    65,    65,    51,     3,    53,    54,    55,
   374,    62,   247,     3,   152,   133,   427,    21,    22,    73,
     3,    56,     3,    69,   162,    56,    30,    62,    36,     3,
    38,    62,    40,     1,    42,    18,    51,   337,    53,    54,
    55,   164,     8,   343,     3,    68,   299,    13,   171,    72,
    62,    68,   344,    65,    69,    72,   344,   344,    41,    70,
     1,    72,    51,   427,    53,    54,    55,    72,   186,    74,
    74,   189,   485,   191,     3,    58,    59,    60,    61,    62,
    63,    64,    65,    51,    57,    53,    54,    55,    68,    51,
    73,    53,    54,    55,     3,    72,     5,    74,     7,    40,
     9,    69,    72,   395,    74,    14,    68,   395,   395,    23,
    51,    20,    53,    54,    55,    24,    56,    57,    27,    28,
    51,   244,    53,    54,    55,    68,   248,    36,    37,   247,
   248,    68,   333,    69,    65,   336,    45,    46,    68,   262,
    49,    50,   262,   262,   273,   290,   291,   292,   273,   273,
   273,   276,   276,   276,   469,    68,    65,   273,    68,   167,
   276,    51,     3,    53,    54,    55,    85,     3,    56,    57,
    85,     7,    62,     9,    66,    67,   286,   287,     3,    15,
    65,     3,   190,   306,   192,     3,   194,   195,    24,   311,
   288,   289,    85,   311,   317,     3,    85,   317,   317,    56,
    36,    56,    68,     3,    69,    68,   329,    69,    40,    45,
    69,    69,   337,   337,   337,   339,   339,    24,   343,   343,
   343,   337,     3,    75,   339,   339,   344,   343,   236,    65,
    72,   339,   240,    87,    69,    69,    42,    70,   361,    89,
   363,    69,    73,    62,    39,    72,    76,    63,    77,    86,
     6,   374,    78,   261,   374,   374,    58,     1,    72,     3,
    71,     5,    86,     7,    68,     9,     3,    68,    73,   277,
    14,    15,    68,     3,    68,    19,    20,   395,    68,    88,
    24,    69,    74,    27,    28,    72,    56,    70,    73,     3,
     3,    35,    36,    37,    38,    86,   304,    86,    74,    74,
    44,    45,    46,    72,   427,    49,    50,   427,   427,    24,
    72,    74,     3,    21,    74,    33,    68,    68,     3,    73,
    69,    65,    11,    73,    62,   460,    70,   450,    71,    70,
   338,    71,    68,     0,   342,     0,   361,   249,   191,   363,
   411,   283,   219,   164,     3,   474,   284,     3,     3,   474,
   474,   474,   360,   476,   489,   472,   415,   285,   474,   234,
   368,   474,     1,    17,   448,     4,    -1,    -1,    -1,    -1,
    -1,    10,   380,    12,    -1,    -1,    15,    16,    -1,   387,
    -1,    -1,   390,    -1,    23,    -1,    25,    26,    -1,    -1,
    -1,   399,    -1,    -1,   402,    -1,    -1,    -1,   406,    38,
    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,    47,    -1,
    -1,   419,    51,    52,    53,    54,    55,    -1,   426,    -1,
    -1,    -1,    -1,    -1,    -1,   433,   434,    -1,   436,    -1,
    -1,    70,    -1,    -1,   442,    -1,    -1,    -1,    -1,   447,
    -1,    -1,    -1,    -1,    -1,   453,    -1,   455,    -1,   457,
   458,    -1,    -1,    -1,    -1,    -1,    -1,   465,    -1,   467,
    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,
   478,    -1,    -1,   481,    -1,   483,    -1,    -1,    -1,    -1,
   488,     1,   490,     3,    -1,     5,     6,     7,   496,     9,
    10,    -1,    -1,    -1,    14,    15,    16,    17,    -1,    -1,
    20,    -1,    -1,    -1,    24,    -1,    26,    27,    28,    29,
    -1,    31,    32,    -1,    34,    -1,    36,    37,    38,    -1,
    -1,    -1,    -1,    43,    44,    45,    46,    -1,    48,    49,
    50,    51,    -1,    53,    54,    55,    -1,    -1,     1,    -1,
     3,    -1,     5,     6,     7,    65,     9,    10,    -1,    -1,
    70,    14,    15,    16,    -1,    -1,    -1,    20,    -1,    -1,
    -1,    24,    -1,    26,    27,    28,    29,    -1,    -1,    -1,
    -1,    34,    -1,    36,    37,    38,    -1,    -1,    -1,    -1,
    43,    44,    45,    46,    -1,    48,    49,    50,    51,    -1,
    53,    54,    55,    -1,    -1,     1,    -1,     3,    -1,     5,
     6,     7,    65,     9,    10,    -1,    -1,    70,    14,    15,
    16,    -1,    -1,    -1,    20,    -1,    -1,    -1,    24,    -1,
    26,    27,    28,    29,    -1,    -1,    -1,    -1,    34,    -1,
    36,    37,    38,    -1,    -1,    -1,    -1,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    -1,    53,    54,    55,
    -1,    -1,     1,    -1,     3,    -1,     5,     6,     7,    65,
     9,    10,    -1,    -1,    70,    14,    15,    16,    -1,    -1,
    -1,    20,    -1,    -1,    -1,    24,    -1,    26,    27,    28,
    29,    -1,    -1,    -1,    -1,    34,    -1,    36,    37,    38,
    -1,    -1,    -1,    -1,    43,    44,    45,    46,    -1,    48,
    49,    50,    51,    -1,    53,    54,    55,    -1,    -1,     1,
    -1,     3,    -1,     5,    -1,     7,    65,     9,    -1,    -1,
    -1,    70,    14,    15,    -1,    -1,    -1,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,
    -1,    -1,    -1,    35,    36,    37,    38,    -1,    -1,    -1,
    -1,    -1,    44,    45,    46,    -1,    -1,    49,    50,    -1,
     1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    12,    -1,    65,    15,    16,    -1,    -1,    70,    -1,
    -1,    -1,    23,    -1,    25,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,
    -1,    -1,    43,    44,    -1,    -1,    47,    -1,    -1,    -1,
    51,    52,    53,    54,    55,     3,    -1,     5,    -1,     7,
    -1,     9,    -1,    -1,    -1,    -1,    14,    15,    -1,    70,
    -1,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    27,
    28,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,
    38,    39,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,
    -1,    49,    50,    -1,    -1,    -1,     1,    -1,     3,    -1,
     5,    -1,     7,    -1,     9,    -1,    -1,    65,    -1,    14,
    15,    69,    -1,    71,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,
    35,    36,    37,    38,    -1,    -1,    -1,    -1,    -1,    44,
    45,    46,    -1,    -1,    49,    50,     3,    -1,     5,    -1,
     7,     8,     9,    -1,    -1,    -1,    13,    14,    15,    -1,
    65,    -1,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,
    37,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
    -1,    -1,    49,    50,     3,    -1,     5,    -1,     7,    -1,
     9,    -1,    -1,    -1,    -1,    14,    15,    -1,    65,    -1,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    27,    28,
    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,
    -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    -1,
    49,    50,     3,    -1,     5,    -1,     7,    -1,     9,    -1,
    -1,    -1,    -1,    14,    -1,    -1,    65,    -1,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    27,    28,    -1,    -1,
    -1,    -1,    -1,    -1,    35,    36,    37,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,
     3,    -1,     5,    -1,     7,    -1,     9,    -1,    -1,    -1,
    -1,    14,    -1,    -1,    65,    -1,    -1,    20,    -1,    -1,
    -1,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    36,    37,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    46,     3,    48,    49,    50,     7,    -1,
     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,
    19,    20,    65,    -1,    -1,    24,    -1,    -1,    -1,    28,
    -1,    -1,     0,     1,    -1,    -1,     4,    36,    37,    -1,
    -1,    -1,    10,    -1,    12,    -1,    45,    15,    16,    -1,
    49,    50,    -1,    -1,    -1,    23,    -1,    25,    26,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    38,    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,    47,
    -1,    -1,    -1,    51,    52,    53,    54,    55,     0,     1,
    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    12,    -1,    -1,    15,    16,    -1,    -1,    -1,    -1,    -1,
    -1,    23,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
    -1,    43,    44,    -1,    -1,    47,    -1,    -1,    -1,    51,
    52,    53,    54,    55,     1,    -1,    -1,     4,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    15,    16,
    -1,    -1,    -1,    -1,    -1,    -1,    23,    -1,    25,    26,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    38,    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,
    47,    -1,    -1,    -1,    51,    52,    53,    54,    55
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 385 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 2:
#line 386 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = yyvsp[0].decl_val;
      AST::tree()->setDeclarations(yyvsp[0].decl_val);
    ;
    break;}
case 3:
#line 393 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 4:
#line 394 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 5:
#line 401 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 6:
#line 402 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 7:
#line 403 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 8:
#line 404 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 9:
#line 405 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].module_val; ;
    break;}
case 10:
#line 406 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].value_base_val; ;
    break;}
case 11:
#line 407 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 12:
#line 408 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 13:
#line 409 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in definition");
      yyval.decl_val = 0;
    ;
    break;}
case 14:
#line 416 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-4].module_val;
    ;
    break;}
case 15:
#line 420 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition");
    ;
    break;}
case 16:
#line 423 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-5].module_val;
    ;
    break;}
case 17:
#line 427 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition (no body found)");
      yyvsp[-1].module_val->finishConstruction(0);
      yyval.module_val = yyvsp[-1].module_val;
    ;
    break;}
case 18:
#line 436 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.module_val = new Module(currentFile, yylineno, mainFile, yyvsp[0].id_val); ;
    break;}
case 19:
#line 440 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].interface_val; ;
    break;}
case 20:
#line 441 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].forward_val; ;
    break;}
case 21:
#line 445 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-3].interface_val;
    ;
    break;}
case 22:
#line 449 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition");
    ;
    break;}
case 23:
#line 452 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-5].interface_val;
    ;
    break;}
case 24:
#line 456 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition (no body found)");
      yyvsp[-1].interface_val->finishConstruction(0);
      yyval.interface_val = yyvsp[-1].interface_val;
    ;
    break;}
case 25:
#line 465 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.forward_val = new Forward(currentFile, yylineno, mainFile, yyvsp[0].id_val, yyvsp[-2].boolean_val);
    ;
    break;}
case 26:
#line 472 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.interface_val = new Interface(currentFile, yylineno, mainFile, yyvsp[-2].id_val, yyvsp[-4].boolean_val, yyvsp[0].inheritspec_val);
    ;
    break;}
case 27:
#line 478 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 28:
#line 479 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 29:
#line 483 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 30:
#line 487 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 31:
#line 488 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 32:
#line 495 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 33:
#line 496 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 34:
#line 497 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 35:
#line 498 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].attribute_val; ;
    break;}
case 36:
#line 499 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].operation_val; ;
    break;}
case 37:
#line 500 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 38:
#line 501 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in interface body");
      yyval.decl_val = 0;
    ;
    break;}
case 39:
#line 508 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = 0; ;
    break;}
case 40:
#line 509 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 41:
#line 513 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 42:
#line 517 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 43:
#line 520 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].inheritspec_val) {
	yyvsp[-4].inheritspec_val->append(new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.inheritspec_val = yyvsp[-4].inheritspec_val;
      }
      else yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 44:
#line 528 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in inheritance list");
      yyval.inheritspec_val = 0;
    ;
    break;}
case 45:
#line 536 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 46:
#line 540 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 0);
    ;
    break;}
case 47:
#line 543 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 1);
    ;
    break;}
case 48:
#line 546 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].scopedname_val->append(yyvsp[0].id_val);
      yyval.scopedname_val=yyvsp[-2].scopedname_val;
    ;
    break;}
case 49:
#line 557 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_val; ;
    break;}
case 50:
#line 558 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_abs_val; ;
    break;}
case 51:
#line 559 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_box_val; ;
    break;}
case 52:
#line 560 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_forward_val; ;
    break;}
case 53:
#line 564 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val);
    ;
    break;}
case 54:
#line 567 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val);
    ;
    break;}
case 55:
#line 573 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_box_val = new ValueBox(currentFile, yylineno, mainFile,
			yyvsp[-1].id_val, yyvsp[0].type_spec_val->type(), yyvsp[0].type_spec_val->constr());
      delete yyvsp[0].type_spec_val;
    ;
    break;}
case 56:
#line 581 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 57:
#line 583 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 58:
#line 588 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[-1].id_val,
				   yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 59:
#line 592 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 60:
#line 597 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in abstract valuetype");
      if (valueabs_hack) {
	valueabs_hack->finishConstruction(0);
	yyval.value_abs_val = valueabs_hack;
	valueabs_hack = 0;
      }
      else yyval.value_abs_val = 0;
    ;
    break;}
case 61:
#line 610 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].value_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_val = yyvsp[-3].value_val;
    ;
    break;}
case 62:
#line 617 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 63:
#line 622 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 64:
#line 627 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 65:
#line 630 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 66:
#line 636 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[-2].valueinheritspec_val, yyvsp[0].inheritspec_val);
    ;
    break;}
case 67:
#line 639 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[0].valueinheritspec_val, 0);
    ;
    break;}
case 68:
#line 642 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(0, yyvsp[0].inheritspec_val);
    ;
    break;}
case 69:
#line 648 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].boolean_val) yyvsp[0].valueinheritspec_val->setTruncatable();
      yyval.valueinheritspec_val = yyvsp[0].valueinheritspec_val;
    ;
    break;}
case 70:
#line 655 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 71:
#line 656 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 72:
#line 660 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 73:
#line 663 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].valueinheritspec_val) {
	yyvsp[-2].valueinheritspec_val->append(new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.valueinheritspec_val = yyvsp[-2].valueinheritspec_val;
      }
      else yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 74:
#line 674 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 75:
#line 678 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 76:
#line 679 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 77:
#line 686 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 78:
#line 687 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].statemember_val; ;
    break;}
case 79:
#line 688 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].factory_val; ;
    break;}
case 80:
#line 692 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.statemember_val = new StateMember(currentFile, yylineno, mainFile,
			   yyvsp[-3].ulong_val, yyvsp[-2].type_spec_val->type(), yyvsp[-2].type_spec_val->constr(), yyvsp[-1].declarator_val);
      delete yyvsp[-2].type_spec_val;
    ;
    break;}
case 81:
#line 700 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 0; ;
    break;}
case 82:
#line 701 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 1; ;
    break;}
case 83:
#line 705 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].factory_val->closeParens();
    ;
    break;}
case 84:
#line 707 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].factory_val->finishConstruction(yyvsp[-3].parameter_val);
      yyval.factory_val = yyvsp[-5].factory_val;
    ;
    break;}
case 85:
#line 711 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].factory_val->closeParens();
    ;
    break;}
case 86:
#line 713 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in factory parameters");
      yyvsp[-5].factory_val->finishConstruction(0);
      yyval.factory_val = yyvsp[-5].factory_val;
    ;
    break;}
case 87:
#line 722 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.factory_val = new Factory(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 88:
#line 728 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 89:
#line 729 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 90:
#line 733 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 91:
#line 734 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].parameter_val) { yyvsp[-2].parameter_val->append(yyvsp[0].parameter_val); yyval.parameter_val = yyvsp[-2].parameter_val; }
      else yyval.parameter_val = yyvsp[0].parameter_val;
    ;
    break;}
case 92:
#line 741 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, 0, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 93:
#line 749 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.const_val = new Const(currentFile, yylineno, mainFile, yyvsp[-3].type_val, yyvsp[-2].id_val, yyvsp[0].expr_val);
    ;
    break;}
case 94:
#line 755 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 95:
#line 756 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 96:
#line 757 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 97:
#line 758 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 98:
#line 759 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 99:
#line 760 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 100:
#line 761 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 101:
#line 762 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 102:
#line 763 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 103:
#line 766 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 104:
#line 770 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 105:
#line 774 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 106:
#line 775 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new OrExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 107:
#line 779 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 108:
#line 780 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new XorExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 109:
#line 784 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 110:
#line 785 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new AndExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 111:
#line 791 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 112:
#line 792 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new RShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 113:
#line 795 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new LShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 114:
#line 801 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 115:
#line 802 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new AddExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 116:
#line 803 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new SubExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 117:
#line 807 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 118:
#line 808 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new MultExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 119:
#line 811 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new DivExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 120:
#line 814 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new ModExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 121:
#line 820 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].char_val == '-') yyval.expr_val = new MinusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '+') yyval.expr_val = new PlusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '~') yyval.expr_val = new InvertExpr(currentFile, yylineno, yyvsp[0].expr_val);
    ;
    break;}
case 122:
#line 825 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 123:
#line 829 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '-'; ;
    break;}
case 124:
#line 830 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '+'; ;
    break;}
case 125:
#line 831 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '~'; ;
    break;}
case 126:
#line 835 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = IdlExpr::scopedNameToExpr(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 127:
#line 838 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 128:
#line 839 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[-1].expr_val; ;
    break;}
case 129:
#line 843 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new IntegerExpr(currentFile, yylineno, yyvsp[0].int_literal_val);
    ;
    break;}
case 130:
#line 846 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new StringExpr(currentFile, yylineno, yyvsp[0].string_val);
    ;
    break;}
case 131:
#line 849 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WStringExpr(currentFile, yylineno, yyvsp[0].wstring_val);
    ;
    break;}
case 132:
#line 852 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new CharExpr(currentFile, yylineno, yyvsp[0].char_val);
    ;
    break;}
case 133:
#line 855 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WCharExpr(currentFile, yylineno, yyvsp[0].wchar_val);
    ;
    break;}
case 134:
#line 858 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FixedExpr(currentFile, yylineno, yyvsp[0].fixed_val);
    ;
    break;}
case 135:
#line 861 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FloatExpr(currentFile, yylineno, yyvsp[0].float_literal_val);
    ;
    break;}
case 136:
#line 864 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new BooleanExpr(currentFile, yylineno, yyvsp[0].boolean_val);
    ;
    break;}
case 137:
#line 870 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 138:
#line 871 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
case 139:
#line 881 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.wstring_val = yyvsp[0].wstring_val; ;
    break;}
case 140:
#line 882 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.wstring_val = new IDL_WChar [idl_wstrlen(yyvsp[-1].wstring_val) + idl_wstrlen(yyvsp[0].wstring_val) + 1];
      idl_wstrcpy(yyval.wstring_val, yyvsp[-1].wstring_val);
      idl_wstrcat(yyval.wstring_val, yyvsp[0].wstring_val);
      delete [] yyvsp[-1].wstring_val;
      delete [] yyvsp[0].wstring_val;
    ;
    break;}
case 141:
#line 892 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 142:
#line 893 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 143:
#line 897 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.ulong_val = yyvsp[0].expr_val->evalAsULong();
      if (yyval.ulong_val < 1)
	IdlError(currentFile, yylineno, "Size must be at least 1");
    ;
    break;}
case 144:
#line 905 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].typedef_val; ;
    break;}
case 145:
#line 906 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].struct_val; ;
    break;}
case 146:
#line 907 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].union_val; ;
    break;}
case 147:
#line 908 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].enum_val; ;
    break;}
case 148:
#line 909 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new Native(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 149:
#line 915 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.typedef_val = new Typedef(currentFile, yylineno, mainFile,
		       yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
      delete yyvsp[-1].type_spec_val;
    ;
    break;}
case 150:
#line 923 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 151:
#line 924 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 1); ;
    break;}
case 152:
#line 928 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 153:
#line 929 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 154:
#line 930 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 155:
#line 936 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 156:
#line 937 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 157:
#line 938 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 158:
#line 939 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 159:
#line 940 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 160:
#line 941 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 161:
#line 942 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 162:
#line 943 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 163:
#line 944 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 164:
#line 948 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 165:
#line 949 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 166:
#line 950 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 167:
#line 951 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 168:
#line 955 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].struct_val->thisType(); ;
    break;}
case 169:
#line 956 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].union_val->thisType(); ;
    break;}
case 170:
#line 957 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].enum_val->thisType(); ;
    break;}
case 171:
#line 961 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 172:
#line 962 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 173:
#line 969 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 174:
#line 970 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 175:
#line 974 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0);
    ;
    break;}
case 176:
#line 980 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 177:
#line 984 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::floatType; ;
    break;}
case 178:
#line 985 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::doubleType; ;
    break;}
case 179:
#line 986 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longdoubleType; ;
    break;}
case 180:
#line 990 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 181:
#line 991 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 182:
#line 995 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 183:
#line 996 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 184:
#line 997 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 185:
#line 1001 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::shortType; ;
    break;}
case 186:
#line 1005 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longType; ;
    break;}
case 187:
#line 1009 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longlongType; ;
    break;}
case 188:
#line 1013 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 189:
#line 1014 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 190:
#line 1015 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 191:
#line 1019 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ushortType; ;
    break;}
case 192:
#line 1023 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulongType; ;
    break;}
case 193:
#line 1027 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulonglongType; ;
    break;}
case 194:
#line 1031 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::charType; ;
    break;}
case 195:
#line 1035 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::wcharType; ;
    break;}
case 196:
#line 1039 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::booleanType; ;
    break;}
case 197:
#line 1043 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::octetType; ;
    break;}
case 198:
#line 1047 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::anyType; ;
    break;}
case 199:
#line 1051 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = DeclaredType::corbaObjectType; ;
    break;}
case 200:
#line 1055 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].struct_val->finishConstruction(yyvsp[-1].member_val);
      yyval.struct_val = yyvsp[-5].struct_val;
    ;
    break;}
case 201:
#line 1059 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in struct definition");
      yyvsp[-1].struct_val->finishConstruction(0);
      yyval.struct_val = yyvsp[-1].struct_val;
    ;
    break;}
case 202:
#line 1068 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.struct_val = new Struct(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 203:
#line 1074 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = yyvsp[-1].member_val; ;
    break;}
case 204:
#line 1075 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].member_val) { yyvsp[-2].member_val->append(yyvsp[-1].member_val); yyval.member_val = yyvsp[-2].member_val; }
      else yyval.member_val = yyvsp[-1].member_val;
    ;
    break;}
case 205:
#line 1082 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.member_val = new Member(currentFile, yylineno, mainFile,
		      yyvsp[-2].type_spec_val->type(), yyvsp[-2].type_spec_val->constr(), yyvsp[-1].declarator_val);
      delete yyvsp[-2].type_spec_val;
    ;
    break;}
case 206:
#line 1087 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in member declaration");
      yyval.member_val = 0;
    ;
    break;}
case 207:
#line 1097 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{

      yyvsp[-12].union_val->finishConstruction(yyvsp[-7].type_spec_val->type(), yyvsp[-7].type_spec_val->constr(), yyvsp[-1].union_case_val);
      delete yyvsp[-7].type_spec_val;
      yyval.union_val = yyvsp[-12].union_val;
    ;
    break;}
case 208:
#line 1103 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in union declaration");
      yyvsp[-1].union_val->finishConstruction(0, 0, 0);
      yyval.union_val = yyvsp[-1].union_val;
    ;
    break;}
case 209:
#line 1112 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_val = new Union(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 210:
#line 1118 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 211:
#line 1119 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 212:
#line 1120 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 213:
#line 1121 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].enum_val->thisType(), 1); ;
    break;}
case 214:
#line 1122 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_spec_val = new TypeSpec(IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val),
			0);
    ;
    break;}
case 215:
#line 1129 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[0].union_case_val; ;
    break;}
case 216:
#line 1133 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[-1].union_case_val; ;
    break;}
case 217:
#line 1134 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].union_case_val->append(yyvsp[-1].union_case_val);
      yyval.union_case_val = yyvsp[-2].union_case_val;
    ;
    break;}
case 218:
#line 1141 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].union_case_val->finishConstruction(yyvsp[-2].case_label_val);
      yyval.union_case_val = yyvsp[-1].union_case_val;
    ;
    break;}
case 219:
#line 1148 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.case_label_val = yyvsp[0].case_label_val; ;
    break;}
case 220:
#line 1149 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].case_label_val->append(yyvsp[0].case_label_val);
      yyval.case_label_val = yyvsp[-1].case_label_val;
    ;
    break;}
case 221:
#line 1156 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, yyvsp[-2].expr_val);
    ;
    break;}
case 222:
#line 1159 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, 0);
    ;
    break;}
case 223:
#line 1165 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_case_val = new UnionCase(currentFile, yylineno, mainFile,
			 yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
    ;
    break;}
case 224:
#line 1172 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].enum_val->finishConstruction(yyvsp[-1].enumerator_val);
      yyval.enum_val = yyvsp[-5].enum_val;
    ;
    break;}
case 225:
#line 1176 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in enum definition");
      yyvsp[-1].enum_val->finishConstruction(0);
      yyval.enum_val = yyvsp[-1].enum_val;
    ;
    break;}
case 226:
#line 1184 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.enum_val = new Enum(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 227:
#line 1190 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.enumerator_val = yyvsp[-1].enumerator_val; ;
    break;}
case 228:
#line 1191 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].enumerator_val->append(yyvsp[-1].enumerator_val);
      yyval.enumerator_val = yyvsp[-4].enumerator_val;
    ;
    break;}
case 229:
#line 1198 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.enumerator_val = new Enumerator(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 230:
#line 1204 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-3].type_val, yyvsp[-1].ulong_val);
    ;
    break;}
case 231:
#line 1207 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-1].type_val, 0);
    ;
    break;}
case 232:
#line 1213 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new StringType(yyvsp[-1].ulong_val); ;
    break;}
case 233:
#line 1214 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = StringType::unboundedStringType;
    ;
    break;}
case 234:
#line 1220 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new WStringType(yyvsp[-1].ulong_val); ;
    break;}
case 235:
#line 1221 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = WStringType::unboundedWStringType;
    ;
    break;}
case 236:
#line 1227 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[-1].id_val, yyvsp[0].array_size_val);
    ;
    break;}
case 237:
#line 1233 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = yyvsp[0].array_size_val; ;
    break;}
case 238:
#line 1234 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].array_size_val->append(yyvsp[0].array_size_val);
      yyval.array_size_val = yyvsp[-1].array_size_val;
    ;
    break;}
case 239:
#line 1241 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = new ArraySize(yyvsp[-1].ulong_val); ;
    break;}
case 240:
#line 1245 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.attribute_val = new Attribute(currentFile, yylineno, mainFile, yyvsp[-3].boolean_val, yyvsp[-1].type_val, yyvsp[0].declarator_val);
    ;
    break;}
case 241:
#line 1251 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 242:
#line 1252 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 243:
#line 1256 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 244:
#line 1257 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 245:
#line 1264 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].exception_val->finishConstruction(yyvsp[-1].member_val);
      yyval.exception_val = yyvsp[-5].exception_val;
    ;
    break;}
case 246:
#line 1268 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in exception definition");
      yyvsp[-1].exception_val->finishConstruction(0);
      yyval.exception_val = yyvsp[-1].exception_val;
    ;
    break;}
case 247:
#line 1277 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.exception_val = new Exception(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 248:
#line 1283 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = 0; ;
    break;}
case 249:
#line 1284 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].member_val) { yyvsp[-1].member_val->append(yyvsp[0].member_val);	yyval.member_val = yyvsp[-1].member_val; }
      else yyval.member_val = yyvsp[0].member_val;
    ;
    break;}
case 250:
#line 1291 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].operation_val->closeParens();
    ;
    break;}
case 251:
#line 1293 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-6].operation_val->finishConstruction(yyvsp[-4].parameter_val, yyvsp[-1].raisesspec_val, yyvsp[0].contextspec_val);
      yyval.operation_val = yyvsp[-6].operation_val;
    ;
    break;}
case 252:
#line 1297 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation declaration");
      yyvsp[-1].operation_val->closeParens();
      yyvsp[-1].operation_val->finishConstruction(0, 0, 0);
      yyval.operation_val = yyvsp[-1].operation_val;
    ;
    break;}
case 253:
#line 1307 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.operation_val = new Operation(currentFile, yylineno, mainFile, yyvsp[-2].boolean_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 254:
#line 1313 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 255:
#line 1314 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = yyvsp[0].boolean_val; ;
    break;}
case 256:
#line 1318 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 257:
#line 1322 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 258:
#line 1323 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::voidType; ;
    break;}
case 259:
#line 1327 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 260:
#line 1328 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 261:
#line 1329 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation parameters");
      yyval.parameter_val = 0;
    ;
    break;}
case 262:
#line 1337 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 263:
#line 1338 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].parameter_val) { yyvsp[-4].parameter_val->append(yyvsp[-1].parameter_val); yyval.parameter_val = yyvsp[-4].parameter_val; }
      else yyval.parameter_val = yyvsp[-1].parameter_val;
    ;
    break;}
case 264:
#line 1345 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, yyvsp[-2].int_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 265:
#line 1351 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 0; ;
    break;}
case 266:
#line 1352 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 1; ;
    break;}
case 267:
#line 1353 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 2; ;
    break;}
case 268:
#line 1357 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = 0; ;
    break;}
case 269:
#line 1358 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 270:
#line 1362 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 271:
#line 1366 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.raisesspec_val = new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 272:
#line 1369 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].raisesspec_val->append(new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno));
      yyval.raisesspec_val = yyvsp[-4].raisesspec_val;
    ;
    break;}
case 273:
#line 1376 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = 0; ;
    break;}
case 274:
#line 1377 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 275:
#line 1381 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 276:
#line 1385 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.contextspec_val = new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 277:
#line 1388 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].contextspec_val->append(new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno));
      yyval.contextspec_val = yyvsp[-4].contextspec_val;
    ;
    break;}
case 278:
#line 1395 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 279:
#line 1396 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 280:
#line 1397 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 281:
#line 1398 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 282:
#line 1404 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IDL_ULong scale = yyvsp[-1].expr_val->evalAsULong();

      if (yyvsp[-3].ulong_val > 31) {
	IdlError(currentFile, yylineno,
		 "Fixed point values may not have more than 31 digits");
      }
      if (scale > yyvsp[-3].ulong_val) {
	IdlError(currentFile, yylineno,
		 "Fixed point scale factor is greater than "
		 "the number of digits");
      }
      yyval.type_val = new FixedType(yyvsp[-3].ulong_val, scale);
    ;
    break;}
case 283:
#line 1421 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlError(currentFile, yylineno,
	       "Fixed point constants are not supported yet");
      yyval.type_val = 0;
    ;
    break;}
case 284:
#line 1429 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new DeclaredType(IdlType::tk_value, 0, 0); ;
    break;}
case 293:
#line 1450 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      Prefix::setPrefix(idl_strdup(yyvsp[-1].string_val));
    ;
    break;}
case 294:
#line 1453 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma prefix");
    ;
    break;}
case 295:
#line 1459 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-2].scopedname_val);
      if (d) DeclRepoId::setRepoId(d, yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 296:
#line 1463 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma id");
    ;
    break;}
case 297:
#line 1469 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-4].scopedname_val);
      if (d) DeclRepoId::setVersion(d, yyvsp[-3].int_literal_val, yyvsp[-1].int_literal_val, currentFile, yylineno);
    ;
    break;}
case 298:
#line 1473 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma version");
    ;
    break;}
case 299:
#line 1479 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      Pragma::add(yyvsp[-1].string_val, currentFile, yylineno-1);
    ;
    break;}
case 300:
#line 1485 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      Pragma::add(yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 301:
#line 1491 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 302:
#line 1492 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1501 "/local/dpg1/omni/30/src/tool/omniidl/cxx/idl.yy"

