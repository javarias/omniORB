//
//    Copyright (C) 2001 AT&T Laboratories Cambridge Ltd.
//
//    This file is part of the OMNI Testsuite.
//
//    The testsuite is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Library General Public
//    License as published by the Free Software Foundation; either
//    version 2 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Library General Public License for more details.
//
//    You should have received a copy of the GNU Library General Public
//    License along with this library; if not, write to the Free
//    Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
//    02111-1307, USA
//
//
#ifndef __SEQ7_IDL__
#define __SEQ7_IDL__

struct sFixed {
  long s1;
};


typedef sFixed arr_sFixed[4];
typedef sFixed arrarr_sFixed[4][8];

typedef sequence <arr_sFixed> seq_arr_sFixed;
typedef sequence <sequence<arr_sFixed> > seqseq_arr_sFixed;
typedef sequence <sequence<sequence<arr_sFixed> > > seqseqseq_arr_sFixed;

typedef sequence <arr_sFixed,10> seq_arr_sFixed_10;
typedef sequence <sequence<arr_sFixed,10>,10> seq_arr_sFixed_10_10;
typedef sequence <sequence<sequence<arr_sFixed,10>,10>,10> seq_arr_sFixed_10_10_10;

typedef sequence <arrarr_sFixed> seq_arrarr_sFixed;
typedef sequence <sequence<arrarr_sFixed> > seqseq_arrarr_sFixed;
typedef sequence <sequence<sequence<arrarr_sFixed> > > seqseqseq_arrarr_sFixed;

typedef sequence <arrarr_sFixed,10> seq_arrarr_sFixed_10;
typedef sequence <sequence<arrarr_sFixed,10>,10> seq_arrarr_sFixed_10_10;
typedef sequence <sequence<sequence<arrarr_sFixed,10>,10>,10> seq_arrarr_sFixed_10_10_10;


interface Exercise7 {
  seq_arr_sFixed dump_seq_arr_sFixed(in seq_arr_sFixed a1, 
			 inout seq_arr_sFixed a2, 
			 out seq_arr_sFixed a3);
  seqseq_arr_sFixed dump_seqseq_arr_sFixed(in seqseq_arr_sFixed a1, 
			       inout seqseq_arr_sFixed a2, 
			       out seqseq_arr_sFixed a3);
  seqseqseq_arr_sFixed dump_seqseqseq_arr_sFixed(in seqseqseq_arr_sFixed a1, 
				     inout seqseqseq_arr_sFixed a2, 
				     out seqseqseq_arr_sFixed a3);

  seq_arr_sFixed_10 dump_seq_arr_sFixed_10(in seq_arr_sFixed_10 a1, 
			 inout seq_arr_sFixed_10 a2, 
			 out seq_arr_sFixed_10 a3);
  seq_arr_sFixed_10_10 dump_seq_arr_sFixed_10_10(in seq_arr_sFixed_10_10 a1, 
			       inout seq_arr_sFixed_10_10 a2, 
			       out seq_arr_sFixed_10_10 a3);
  seq_arr_sFixed_10_10_10 dump_seq_arr_sFixed_10_10_10(in seq_arr_sFixed_10_10_10 a1, 
				     inout seq_arr_sFixed_10_10_10 a2, 
				     out seq_arr_sFixed_10_10_10 a3);

  seq_arrarr_sFixed dump_seq_arrarr_sFixed(in seq_arrarr_sFixed a1, 
			 inout seq_arrarr_sFixed a2, 
			 out seq_arrarr_sFixed a3);
  seqseq_arrarr_sFixed dump_seqseq_arrarr_sFixed(in seqseq_arrarr_sFixed a1, 
			       inout seqseq_arrarr_sFixed a2, 
			       out seqseq_arrarr_sFixed a3);
  seqseqseq_arrarr_sFixed dump_seqseqseq_arrarr_sFixed(in seqseqseq_arrarr_sFixed a1, 
				     inout seqseqseq_arrarr_sFixed a2, 
				     out seqseqseq_arrarr_sFixed a3);

  seq_arrarr_sFixed_10 dump_seq_arrarr_sFixed_10(in seq_arrarr_sFixed_10 a1, 
			 inout seq_arrarr_sFixed_10 a2, 
			 out seq_arrarr_sFixed_10 a3);
  seq_arrarr_sFixed_10_10 dump_seq_arrarr_sFixed_10_10(in seq_arrarr_sFixed_10_10 a1, 
			       inout seq_arrarr_sFixed_10_10 a2, 
			       out seq_arrarr_sFixed_10_10 a3);
  seq_arrarr_sFixed_10_10_10 dump_seq_arrarr_sFixed_10_10_10(in seq_arrarr_sFixed_10_10_10 a1, 
				     inout seq_arrarr_sFixed_10_10_10 a2, 
				     out seq_arrarr_sFixed_10_10_10 a3);
};

#endif
