#!/usr/local/bin/bash
#
# obuildtree - create an OMNI build tree
#


###########################################################################
#
# Unfortunately the built-in "read" doesn't work on NT so we need this.  It
# also has the beneficial side-effect of expanding environment variables in
# the input string.
#

myread() {
  eval "$1=\"`head -1`\""
}


###########################################################################
#
# Check arguments
#

if [ $# -ne 0 ]; then
  echo "usage: $0"
  exit 1
fi


###########################################################################
#
# Check that we have GNU make
#

if [ "$GNUMAKE" = "" ]; then
  case `make -v 2>/dev/null` in
  GNU*) ;;
  *)
    echo "The 'make' on your path is not GNU make."
    echo Set the GNUMAKE environment variable to specify the GNU make command.
    exit 1
    ;;
  esac
else
  case `$GNUMAKE -v 2>/dev/null` in
  GNU*) ;;
  *)
    echo "The 'make' in the GNUMAKE environment variable is not GNU make."
    echo Set the GNUMAKE environment variable to specify the GNU make command.
    exit 1
    ;;
  esac
fi


###########################################################################
#
# Get the base OMNI tree
#

echo
echo "Enter the base OMNI tree for this build tree"
echo -n "> [$OMNI_TREE] "

myread baseomnitree

if [ "$baseomnitree" = "" ]; then
  baseomnitree="$OMNI_TREE"
  if [ "$baseomnitree" = "" ]; then
    exit 1
  fi
fi


###########################################################################
#
# Get the platform
#

echo
echo "Enter the platform name from:"
(cd $baseomnitree/mk/platforms; ls *.mk */*.mk | sed s/\.mk//g)

if [ -x /usr/local/bin/arch ]; then
  defaultplatform=`/usr/local/bin/arch -binv`;
  if [ ! -e "$baseomnitree/mk/platforms/$defaultplatform.mk" ]; then
    unset defaultplatform
  fi
fi

echo -n "> [$defaultplatform] "

myread platform

if [ "$platform" = "" ]; then
  platform="$defaultplatform"
fi

if [ ! -r "$baseomnitree/mk/platforms/$platform.mk" ]; then
  echo
  echo "No such platform \"$platform\""
  echo
  exit 1
fi


###########################################################################
#
# Get the destination
#

echo
echo "Enter the destination directory"
echo -n "> [$platform] "

myread dest

if [ "$dest" = "" ]; then
  dest="$platform"
fi


if [ -e "$dest" ]; then
  echo "Error: \"$dest\" already exists."
  exit 1
fi


###########################################################################
#
# Get the import trees
#

echo
echo "Enter the import trees in search order (the base OMNI tree"
echo "\"$baseomnitree\" will always be searched after these)"

import=wob
while [ "$import" != "" ]; do
  echo -n "> "
  myread import
  if [ "$firstimport" = "" ]; then
    firstimport="$import"
  fi
  imports="$imports $import"
  revimports="$import $revimports"
done

if [ "$firstimport" = "" ]; then
  firstimport="$baseomnitree"
fi
imports="$imports $baseomnitree"
revimports="$baseomnitree $revimports"


###########################################################################
#
# Get the export tree
#

echo
echo "Does this build tree have an export tree ?"
echo -n "> [y] "

myread isexporttree

if [ "$isexporttree" = "" ]; then
  isexporttree="y"
fi

if [ "$isexporttree" = "y" ]; then
  echo
  echo "Enter the export tree"
  echo -n "> [$firstimport] "

  myread exporttree

  if [ "$exporttree" = "" ]; then
    exporttree="$firstimport"
  fi
fi


###########################################################################
#
# Get the source trees
#

echo
echo "Does this build tree have any source trees ?"
echo -n "> [y] "

myread issourcetree

if [ "$issourcetree" = "" ]; then
  issourcetree="y"
fi

if [ "$issourcetree" = "y" ]; then
  echo
  echo "Enter the source trees"
  echo -n "> [$firstimport/src] "

  myread source
  if [ "$source" = "" ]; then
    source="$firstimport/src"
  fi
  sources="$source"

  while [ "$source" != "" ]; do
    echo -n "> "
    myread source
    sources="$sources $source"
  done
fi


###########################################################################
#
# Create the destination directory and its config directory
#

echo
echo "Creating OMNI build tree \"$dest\" for platform \"$platform\""
echo

set -e

mkdir -p $dest/config


###########################################################################
#
# Generate the header of "config.mk"
#

cat >$dest/config/config.mk <<EOF
#
# AUTOMATICALLY GENERATED by "obuildtree"
#
# Coming into this file, omake should have defined TOP, CURRENT and VPATH.
# VPATH should contain the equivalent of the CURRENT directory for each
# of the source trees.
#

platform = $platform

EXPORT_TREE = $exporttree

IMPORT_TREES = $imports

override VPATH := \$(subst :, ,\$(VPATH))

EOF


###########################################################################
#
# For each "import" tree include the "beforedir.mk" in "config.mk".
# THIS_IMPORT_TREE is set to let it know how to include other files in the
# same directory.  Note that the order is the reverse of the search order
# (because later .mk files can override variable settings in previous ones).
#

for i in $revimports; do

  cat >>$dest/config/config.mk <<EOF
THIS_IMPORT_TREE := $i
ifneq (\$(wildcard \$(THIS_IMPORT_TREE)/mk/beforedir.mk),)
include \$(THIS_IMPORT_TREE)/mk/beforedir.mk
endif

EOF

done


###########################################################################
#
# Include the "dir.mk" in "config.mk" - this is searched for in each of the
# source directories using -I flags given to gnumake by omake.
#

cat >>$dest/config/config.mk <<EOF
include dir.mk

EOF


###########################################################################
#
# For each "import" tree include the "afterdir.mk" in "config.mk"
#

for i in $imports; do

  cat >>$dest/config/config.mk <<EOF
THIS_IMPORT_TREE := $i
ifneq (\$(wildcard \$(THIS_IMPORT_TREE)/mk/afterdir.mk),)
include \$(THIS_IMPORT_TREE)/mk/afterdir.mk
endif

EOF

done


###########################################################################
#
# Generate the "sources" file
#

touch $dest/config/sources
for s in $sources; do

  echo $s >>$dest/config/sources

done
