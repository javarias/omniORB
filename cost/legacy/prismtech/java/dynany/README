About the tests
---------------

This suite of tests written in Java is designed to test DynAny functionality.
The tests are written against the API in chapter 9 (Dynamic Management of Any 
Values) of version 2.4.2 of the CORBA specification.


Setting up for the tests
------------------------

In order to specify which ORB to use when running the tests, a properties file
with the name 'orb.properties' must exist in the 'config' directory.  If an 
'<ORB>.properties' file exists for the required ORB in the 'config' directory 
(where <ORB> is the name of the required ORB) then this file can be copied and 
renamed to the file 'orb.properties'.

For example, to run the DynAny tests using JacORB, copy and rename the file
'jacorb.properties' to 'orb.properties' in the 'config' directory.  Now
JacORB will be used when you build and run the tests.

If an '<ORB>.properties' file does not exist for the required ORB then a new 
one will need to be created.  See the section 'Adding support for an ORB' 
below.

The clean target (invoked by typing 'ant clean') must be invoked between test
runs that use different ORBs.


Additional setup for Orbix2K
----------------------------

If the ORB being tested is Orbix2K then the configuration domain name can be
set by setting the property 'ORBdomain_name' in the file 'ORBSetup.orbix2k'.
This file is located in the directory 'src/com/prismt/common/config'.  If this
property is not set then the default configuration domain name is used
(default-domain).


Building and running the tests
------------------------------

The DynAny test suite consists of a set of JUnit tests and an Ant XML file for
building and running them.  Depending on the Ant target that is invoked, it is 
possible to log all test results in a single file or to log the result of each 
test in a separate file.

Ant targets must be invoked from the root of the test repository where the
Ant XML file is located.  To see which Ant targets are available, type 
'ant -projecthelp'.  Only the main targets (targets with descriptions) can be 
invoked.

Log files generated by the tests are written to the 'output' directory with
the name 'TEST-<classname>' where <classname> is the full class name of the
tests being run.  The name of the class that runs all tests is 'AllTest'.

In order to run the DynAny tests the following must be in the classpath:
  - ORB libraries
  - Java tools included with Sun JDK (tools.jar)
  - JUnit (junit.jar)
  - JUnitPP (an extension of JUnit) (junitpp.jar)
  - Ant (ant.jar)
  - JAXP compliant XML parser (for example, xerces.jar)

Furthermore, because the JUnit Ant task is an optional task, the Ant library 
containing optional tasks (optional.jar) must be in the Ant lib directory.
This library is not part of the core Ant distribution and must be downloaded
separately.

The initial set of tests was developed using JUnit v3.7, JUnitPP v1.4, 
Ant v1.4.1 and the Xerces v1.4.3 XML parser. 

JUnit is freely available at http://www.junit.org/
JUnitPP is freely available at http://junitpp.sourceforge.net/
Ant is freely available at http://jakarta.apache.org/ant/
Xerces is freely available at http://xml.apache.org/


Adding support for an ORB
-------------------------

If an '<ORB>.properties' file does not exist for a required ORB then a new 
'<ORB>.properties' file must be created.  The following properties need to be
set in the file:
  - idl.compiler
      Set this property to the name of the script or executable used to run
      the IDL compiler.
  - idl.flags
      Set this property to contain the flags passed to the IDL compiler.  One
      flag should specify the package 'com.prismt.orb' as the package for the
      generated source code, and the other should specify the directory
      'src/generated' to contain the generated source code.
  - orbsetup.file
      Set this property to point to the file 'ORBSetup.<ORB>' in the directory
      'src/com/prismt/common/config'.  The 'ORBSetup.<ORB>' file must also be
      created and contains two additional properties that must be set to 
      override the ORB classes provided with the Sun JDK:
        - org.omg.CORBA.ORBClass
        - org.omg.CORBA.ORBSingletonClass

The 'jacorb.properties' and 'ORBSetup.jacorb' files can be used as a starting
point for creating these files for another ORB.
