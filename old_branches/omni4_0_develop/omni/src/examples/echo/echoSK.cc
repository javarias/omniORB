// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

#include "echo.hh"
#include <omniORB4/callDescriptor.h>

static const char* _0RL_library_version = omniORB_4_0;

Echo_ptr Echo_Helper::_nil() {
  return Echo::_nil();
}

CORBA::Boolean Echo_Helper::is_nil(Echo_ptr p) {
  return CORBA::is_nil(p);

}

void Echo_Helper::release(Echo_ptr p) {
  CORBA::release(p);
}

void Echo_Helper::duplicate(Echo_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

void Echo_Helper::marshalObjRef(Echo_ptr obj, cdrStream& s) {
  Echo::_marshalObjRef(obj, s);
}

Echo_ptr Echo_Helper::unmarshalObjRef(cdrStream& s) {
  return Echo::_unmarshalObjRef(s);
}

Echo_ptr
Echo::_duplicate(Echo_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

Echo_ptr
Echo::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

Echo_ptr
Echo::_nil()
{
  static _objref_Echo* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_Echo;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* Echo::_PD_repoId = "IDL:Echo:1.0";

_objref_Echo::~_objref_Echo() {}

_objref_Echo::_objref_Echo(omniIOR* ior, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(Echo::_PD_repoId, ior, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_Echo::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, Echo::_PD_repoId) )
    return (Echo_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_01531d3e51c81a80_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_01531d3e51c81a80_00000000(const char* op, 
					   size_t oplen, 
					   const char* a_0,
					   CORBA::Boolean upcall=0):
     omniCallDescriptor(lcfn, op, oplen, 0, 0, 0, upcall),
     arg_0((char*)a_0) {}

  inline ~_0RL_cd_01531d3e51c81a80_00000000() {
    if (is_upcall()) { _CORBA_String_helper::free(arg_0); }
  }

  void marshalArguments(cdrStream&);
  void unmarshalReturnedValues(cdrStream&);
  void unmarshalArguments(cdrStream&);
  void marshalReturnedValues(cdrStream&);
    
  inline char * result() { return pd_result._retn(); }

  static void lcfn(omniCallDescriptor* cd, omniServant* servant);

  char* arg_0;
  CORBA::String_var pd_result;
};

void _0RL_cd_01531d3e51c81a80_00000000::marshalArguments(cdrStream& s)
{
  _CORBA_String_helper::marshal(arg_0,s);
}

void _0RL_cd_01531d3e51c81a80_00000000::unmarshalReturnedValues(cdrStream& s)
{
  pd_result = _CORBA_String_helper::unmarshal(s);
}

void
_0RL_cd_01531d3e51c81a80_00000000::unmarshalArguments(cdrStream& s)
{
  arg_0 = _CORBA_String_helper::unmarshal(s);
}

void
_0RL_cd_01531d3e51c81a80_00000000::marshalReturnedValues(cdrStream& s)
{
  _CORBA_String_helper::marshal(pd_result,s);
}

// Local call call-back function.
void
_0RL_cd_01531d3e51c81a80_00000000::lcfn(omniCallDescriptor* cd,
					omniServant* svnt)
{
  _0RL_cd_01531d3e51c81a80_00000000* tcd = (_0RL_cd_01531d3e51c81a80_00000000*) cd;
  _impl_Echo* impl = (_impl_Echo*) svnt->_ptrToInterface(Echo::_PD_repoId);
  tcd->pd_result = impl->echoString(tcd->arg_0);
}

char* _objref_Echo::echoString(const char* mesg)
{
  _0RL_cd_01531d3e51c81a80_00000000 _call_desc("echoString", 11, mesg);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_Echo::~_pof_Echo() {}

omniObjRef*
_pof_Echo::newObjRef(omniIOR* ior,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_Echo(ior, id, lid);
}

CORBA::Boolean
_pof_Echo::is_a(const char* id) const
{
  if( !strcmp(id, Echo::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_Echo _the_pof_Echo;

_impl_Echo::~_impl_Echo() {}

CORBA::Boolean
_impl_Echo::_dispatch(GIOP_S& giop_s)
{
  const char* op = giop_s.invokeInfo().operation();

  if( !strcmp(op, "echoString") ) {
    // XXX Not done yet.


    return 1;
  }

  return 0;
}

void*
_impl_Echo::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, Echo::_PD_repoId) )
    return (_impl_Echo*) this;
  
  return 0;
}

const char*
_impl_Echo::_mostDerivedRepoId()
{
  return Echo::_PD_repoId;
}

POA_Echo::~POA_Echo() {}

