// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

CORBA::IRObject_ptr CORBA::IRObject_Helper::_nil() {
  return CORBA::IRObject::_nil();
}

CORBA::Boolean CORBA::IRObject_Helper::is_nil(CORBA::IRObject_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::IRObject_Helper::release(CORBA::IRObject_ptr p) {
  CORBA::release(p);
}

void CORBA::IRObject_Helper::duplicate(CORBA::IRObject_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::IRObject_Helper::NP_alignedSize(CORBA::IRObject_ptr obj, size_t offset) {
  return CORBA::IRObject::_alignedSize(obj, offset);
}

void CORBA::IRObject_Helper::marshalObjRef(CORBA::IRObject_ptr obj, NetBufferedStream& s) {
  CORBA::IRObject::_marshalObjRef(obj, s);
}

CORBA::IRObject_ptr CORBA::IRObject_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::IRObject::_unmarshalObjRef(s);
}

void CORBA::IRObject_Helper::marshalObjRef(CORBA::IRObject_ptr obj, MemBufferedStream& s) {
  CORBA::IRObject::_marshalObjRef(obj, s);
}

CORBA::IRObject_ptr CORBA::IRObject_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::IRObject::_unmarshalObjRef(s);
}

CORBA::IRObject_ptr
CORBA::IRObject::_duplicate(CORBA::IRObject_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::IRObject_ptr
CORBA::IRObject::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::IRObject_ptr
CORBA::IRObject::_nil()
{
  static _objref_IRObject* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_IRObject;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::IRObject::_PD_repoId = "IDL:omg.org/CORBA/IRObject:1.0";

CORBA::_objref_IRObject::~_objref_IRObject() {}

CORBA::_objref_IRObject::_objref_IRObject(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(CORBA::IRObject::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_IRObject::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_00000000(omniCallDescriptor* cd, omniServant* svnt)
{
  omniStdCallDesc::void_call* tcd = (omniStdCallDesc::void_call*) cd;
  CORBA::_impl_IRObject* impl = (CORBA::_impl_IRObject*) svnt->_ptrToInterface(CORBA::IRObject::_PD_repoId);
  impl->destroy();
}

void CORBA::_objref_IRObject::destroy()
{
  omniStdCallDesc::void_call _call_desc(_0RL_lcfn_7963219a43724a61_00000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mDefinitionKind
class _0RL_cd_7963219a43724a61_10000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_10000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::DefinitionKind result() { return pd_result; }
  
  CORBA::DefinitionKind pd_result;
  
};

void _0RL_cd_7963219a43724a61_10000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mDefinitionKind
class _0RL_cd_7963219a43724a61_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_20000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::DefinitionKind a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::DefinitionKind arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_20000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_20000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_10000000* tcd = (_0RL_cd_7963219a43724a61_10000000*) cd;
  CORBA::_impl_IRObject* impl = (CORBA::_impl_IRObject*) svnt->_ptrToInterface(CORBA::IRObject::_PD_repoId);
  tcd->pd_result = impl->def_kind();
}

CORBA::DefinitionKind CORBA::_objref_IRObject::def_kind()
{
  _0RL_cd_7963219a43724a61_10000000 _call_desc(_0RL_lcfn_7963219a43724a61_30000000, "_get_def_kind", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

CORBA::_pof_IRObject::~_pof_IRObject() {}

omniObjRef*
CORBA::_pof_IRObject::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_IRObject(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_IRObject::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_IRObject _the_pof_CORBA_mIRObject;

CORBA::_impl_IRObject::~_impl_IRObject() {}

CORBA::Boolean
CORBA::_impl_IRObject::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_def_kind") ) {    
    giop_s.RequestReceived();
    DefinitionKind result = this->def_kind();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    
    giop_s.RequestReceived();
    
    this->destroy();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_IRObject::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;
  
  return 0;
}

const char*
CORBA::_impl_IRObject::_mostDerivedRepoId()
{
  return CORBA::IRObject::_PD_repoId;
}

size_t
CORBA::Contained::Description::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;

  _msgsize = value._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::Contained::Description::operator>>= (NetBufferedStream &_n) const
{
  kind >>= _n;
  value >>= _n;
  
}

void
CORBA::Contained::Description::operator<<= (NetBufferedStream &_n)
{
  kind <<= _n;
  value <<= _n;
  
}

void
CORBA::Contained::Description::operator>>= (MemBufferedStream &_n) const
{
  kind >>= _n;
  value >>= _n;
  
}

void
CORBA::Contained::Description::operator<<= (MemBufferedStream &_n)
{
  kind <<= _n;
  value <<= _n;
  
}

CORBA::Contained_ptr CORBA::Contained_Helper::_nil() {
  return CORBA::Contained::_nil();
}

CORBA::Boolean CORBA::Contained_Helper::is_nil(CORBA::Contained_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::Contained_Helper::release(CORBA::Contained_ptr p) {
  CORBA::release(p);
}

void CORBA::Contained_Helper::duplicate(CORBA::Contained_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::Contained_Helper::NP_alignedSize(CORBA::Contained_ptr obj, size_t offset) {
  return CORBA::Contained::_alignedSize(obj, offset);
}

void CORBA::Contained_Helper::marshalObjRef(CORBA::Contained_ptr obj, NetBufferedStream& s) {
  CORBA::Contained::_marshalObjRef(obj, s);
}

CORBA::Contained_ptr CORBA::Contained_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::Contained::_unmarshalObjRef(s);
}

void CORBA::Contained_Helper::marshalObjRef(CORBA::Contained_ptr obj, MemBufferedStream& s) {
  CORBA::Contained::_marshalObjRef(obj, s);
}

CORBA::Contained_ptr CORBA::Contained_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::Contained::_unmarshalObjRef(s);
}

CORBA::Contained_ptr
CORBA::Contained::_duplicate(CORBA::Contained_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::Contained_ptr
CORBA::Contained::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::Contained_ptr
CORBA::Contained::_nil()
{
  static _objref_Contained* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_Contained;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::Contained::_PD_repoId = "IDL:omg.org/CORBA/Contained:1.0";

CORBA::_objref_Contained::~_objref_Contained() {}

CORBA::_objref_Contained::_objref_Contained(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IRObject(mdri, p, id, lid),
   
   omniObjRef(CORBA::Contained::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_Contained::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mContained_mDescription
class _0RL_cd_7963219a43724a61_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_40000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Contained::Description* result() { return pd_result; }
  
  CORBA::Contained::Description* pd_result;
};

void _0RL_cd_7963219a43724a61_40000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::Contained::Description;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_40000000* tcd = (_0RL_cd_7963219a43724a61_40000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  tcd->pd_result = impl->describe();
}

CORBA::Contained::Description* CORBA::_objref_Contained::describe()
{
  _0RL_cd_7963219a43724a61_40000000 _call_desc(_0RL_lcfn_7963219a43724a61_50000000, "describe", 9, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mContainer_i_cstring_i_cstring
class _0RL_cd_7963219a43724a61_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_60000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Container_ptr a_0, const char* a_1, const char* a_2):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Container_ptr arg_0;
  const char* arg_1;
  const char* arg_2;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_60000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = CORBA::Container_Helper::NP_alignedSize(arg_0, msgsize);
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_60000000::marshalArguments(GIOP_C& giop_client)
{
  CORBA::Container_Helper::marshalObjRef(arg_0,giop_client);
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_60000000* tcd = (_0RL_cd_7963219a43724a61_60000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  impl->move(tcd->arg_0, tcd->arg_1, tcd->arg_2);
}

void CORBA::_objref_Contained::move(Container_ptr new_container, const char* new_name, const char* new_version)
{
  _0RL_cd_7963219a43724a61_60000000 _call_desc(_0RL_lcfn_7963219a43724a61_70000000, "move", 5, 0, new_container, new_name, new_version);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_7963219a43724a61_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_80000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline char* result() { return pd_result; }
  
  char* pd_result;
  
};

void _0RL_cd_7963219a43724a61_80000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_7963219a43724a61_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_90000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const char* arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_90000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_90000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_80000000* tcd = (_0RL_cd_7963219a43724a61_80000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  tcd->pd_result = impl->id();
}

char* CORBA::_objref_Contained::id()
{
  _0RL_cd_7963219a43724a61_80000000 _call_desc(_0RL_lcfn_7963219a43724a61_a0000000, "_get_id", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_90000000* tcd = (_0RL_cd_7963219a43724a61_90000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  impl->id(tcd->arg_0);
}

void CORBA::_objref_Contained::id(const char* arg_0)
{
  _0RL_cd_7963219a43724a61_90000000 _call_desc(_0RL_lcfn_7963219a43724a61_b0000000, "_set_id", 8, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_80000000* tcd = (_0RL_cd_7963219a43724a61_80000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  tcd->pd_result = impl->name();
}

char* CORBA::_objref_Contained::name()
{
  _0RL_cd_7963219a43724a61_80000000 _call_desc(_0RL_lcfn_7963219a43724a61_c0000000, "_get_name", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_90000000* tcd = (_0RL_cd_7963219a43724a61_90000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  impl->name(tcd->arg_0);
}

void CORBA::_objref_Contained::name(const char* arg_0)
{
  _0RL_cd_7963219a43724a61_90000000 _call_desc(_0RL_lcfn_7963219a43724a61_d0000000, "_set_name", 10, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_80000000* tcd = (_0RL_cd_7963219a43724a61_80000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  tcd->pd_result = impl->version();
}

char* CORBA::_objref_Contained::version()
{
  _0RL_cd_7963219a43724a61_80000000 _call_desc(_0RL_lcfn_7963219a43724a61_e0000000, "_get_version", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_90000000* tcd = (_0RL_cd_7963219a43724a61_90000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  impl->version(tcd->arg_0);
}

void CORBA::_objref_Contained::version(const char* arg_0)
{
  _0RL_cd_7963219a43724a61_90000000 _call_desc(_0RL_lcfn_7963219a43724a61_f0000000, "_set_version", 13, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mContainer
class _0RL_cd_7963219a43724a61_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_01000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Container_ptr result() { return pd_result; }
  
  CORBA::Container_ptr pd_result;
  
};

void _0RL_cd_7963219a43724a61_01000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::Container_Helper::unmarshalObjRef(giop_client);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mContainer
class _0RL_cd_7963219a43724a61_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_11000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Container_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Container_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_11000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = CORBA::Container_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_11000000::marshalArguments(GIOP_C& giop_client)
{
  CORBA::Container_Helper::marshalObjRef(arg_0,giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_01000000* tcd = (_0RL_cd_7963219a43724a61_01000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  tcd->pd_result = impl->defined_in();
}

CORBA::Container_ptr CORBA::_objref_Contained::defined_in()
{
  _0RL_cd_7963219a43724a61_01000000 _call_desc(_0RL_lcfn_7963219a43724a61_21000000, "_get_defined_in", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_80000000* tcd = (_0RL_cd_7963219a43724a61_80000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  tcd->pd_result = impl->absolute_name();
}

char* CORBA::_objref_Contained::absolute_name()
{
  _0RL_cd_7963219a43724a61_80000000 _call_desc(_0RL_lcfn_7963219a43724a61_31000000, "_get_absolute_name", 19, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mRepository
class _0RL_cd_7963219a43724a61_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_41000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Repository_ptr result() { return pd_result; }
  
  CORBA::Repository_ptr pd_result;
  
};

void _0RL_cd_7963219a43724a61_41000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::Repository_Helper::unmarshalObjRef(giop_client);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mRepository
class _0RL_cd_7963219a43724a61_51000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_51000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Repository_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Repository_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_51000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = CORBA::Repository_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_51000000::marshalArguments(GIOP_C& giop_client)
{
  CORBA::Repository_Helper::marshalObjRef(arg_0,giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_41000000* tcd = (_0RL_cd_7963219a43724a61_41000000*) cd;
  CORBA::_impl_Contained* impl = (CORBA::_impl_Contained*) svnt->_ptrToInterface(CORBA::Contained::_PD_repoId);
  tcd->pd_result = impl->containing_repository();
}

CORBA::Repository_ptr CORBA::_objref_Contained::containing_repository()
{
  _0RL_cd_7963219a43724a61_41000000 _call_desc(_0RL_lcfn_7963219a43724a61_61000000, "_get_containing_repository", 27, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

CORBA::_pof_Contained::~_pof_Contained() {}

omniObjRef*
CORBA::_pof_Contained::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_Contained(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_Contained::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_Contained _the_pof_CORBA_mContained;

CORBA::_impl_Contained::~_impl_Contained() {}

CORBA::Boolean
CORBA::_impl_Contained::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_id") ) {    
    giop_s.RequestReceived();
    CORBA::String_var result = this->id();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_id") ) {
    CORBA::String_var value;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= giop_s;
      value = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    this->id(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_name") ) {    
    giop_s.RequestReceived();
    CORBA::String_var result = this->name();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_name") ) {
    CORBA::String_var value;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= giop_s;
      value = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    this->name(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_version") ) {    
    giop_s.RequestReceived();
    CORBA::String_var result = this->version();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_version") ) {
    CORBA::String_var value;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= giop_s;
      value = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    this->version(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_defined_in") ) {    
    giop_s.RequestReceived();
    Container_var result = this->defined_in();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = Container_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      Container_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_absolute_name") ) {    
    giop_s.RequestReceived();
    CORBA::String_var result = this->absolute_name();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_containing_repository") ) {    
    giop_s.RequestReceived();
    Repository_var result = this->containing_repository();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = Repository_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      Repository_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "describe") ) {
    
    giop_s.RequestReceived();
    Contained::Description_var result;
    
    result = this->describe();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "move") ) {
    
    Container_var arg_new_container;
    
    arg_new_container = Container_Helper::unmarshalObjRef(giop_s);
    CORBA::String_var arg_new_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_new_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_new_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_new_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->move(arg_new_container.in(), arg_new_name.in(), arg_new_version.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IRObject::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_Contained::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (_impl_Contained*) this;
  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_Contained::_mostDerivedRepoId()
{
  return CORBA::Contained::_PD_repoId;
}

size_t
CORBA::Initializer::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = members._NP_alignedSize(_msgsize);

  _msgsize = name._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::Initializer::operator>>= (NetBufferedStream &_n) const
{
  members >>= _n;
  name >>= _n;
  
}

void
CORBA::Initializer::operator<<= (NetBufferedStream &_n)
{
  members <<= _n;
  name <<= _n;
  
}

void
CORBA::Initializer::operator>>= (MemBufferedStream &_n) const
{
  members >>= _n;
  name >>= _n;
  
}

void
CORBA::Initializer::operator<<= (MemBufferedStream &_n)
{
  members <<= _n;
  name <<= _n;
  
}

size_t
CORBA::Container::Description::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = contained_object._NP_alignedSize(_msgsize);

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;

  _msgsize = value._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::Container::Description::operator>>= (NetBufferedStream &_n) const
{
  contained_object >>= _n;
  kind >>= _n;
  value >>= _n;
  
}

void
CORBA::Container::Description::operator<<= (NetBufferedStream &_n)
{
  contained_object <<= _n;
  kind <<= _n;
  value <<= _n;
  
}

void
CORBA::Container::Description::operator>>= (MemBufferedStream &_n) const
{
  contained_object >>= _n;
  kind >>= _n;
  value >>= _n;
  
}

void
CORBA::Container::Description::operator<<= (MemBufferedStream &_n)
{
  contained_object <<= _n;
  kind <<= _n;
  value <<= _n;
  
}

CORBA::Container_ptr CORBA::Container_Helper::_nil() {
  return CORBA::Container::_nil();
}

CORBA::Boolean CORBA::Container_Helper::is_nil(CORBA::Container_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::Container_Helper::release(CORBA::Container_ptr p) {
  CORBA::release(p);
}

void CORBA::Container_Helper::duplicate(CORBA::Container_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::Container_Helper::NP_alignedSize(CORBA::Container_ptr obj, size_t offset) {
  return CORBA::Container::_alignedSize(obj, offset);
}

void CORBA::Container_Helper::marshalObjRef(CORBA::Container_ptr obj, NetBufferedStream& s) {
  CORBA::Container::_marshalObjRef(obj, s);
}

CORBA::Container_ptr CORBA::Container_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::Container::_unmarshalObjRef(s);
}

void CORBA::Container_Helper::marshalObjRef(CORBA::Container_ptr obj, MemBufferedStream& s) {
  CORBA::Container::_marshalObjRef(obj, s);
}

CORBA::Container_ptr CORBA::Container_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::Container::_unmarshalObjRef(s);
}

CORBA::Container_ptr
CORBA::Container::_duplicate(CORBA::Container_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::Container_ptr
CORBA::Container::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::Container_ptr
CORBA::Container::_nil()
{
  static _objref_Container* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_Container;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::Container::_PD_repoId = "IDL:omg.org/CORBA/Container:1.0";

CORBA::_objref_Container::~_objref_Container() {}

CORBA::_objref_Container::_objref_Container(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IRObject(mdri, p, id, lid),
   
   omniObjRef(CORBA::Container::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_Container::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mContained_i_cstring
class _0RL_cd_7963219a43724a61_71000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_71000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Contained_ptr result() { return pd_result; }
  const char* arg_0;
  CORBA::Contained_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_71000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_71000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_7963219a43724a61_71000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::Contained_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_81000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_71000000* tcd = (_0RL_cd_7963219a43724a61_71000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->lookup(tcd->arg_0);
}

CORBA::Contained_ptr CORBA::_objref_Container::lookup(const char* search_name)
{
  _0RL_cd_7963219a43724a61_71000000 _call_desc(_0RL_lcfn_7963219a43724a61_81000000, "lookup", 7, 0, search_name);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mContainedSeq_i_cCORBA_mDefinitionKind_i_cboolean
class _0RL_cd_7963219a43724a61_91000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_91000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::DefinitionKind a_0, CORBA::Boolean a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ContainedSeq* result() { return pd_result; }
  CORBA::DefinitionKind arg_0;
  CORBA::Boolean arg_1;
  CORBA::ContainedSeq* pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_91000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize += 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_91000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  arg_1 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_91000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::ContainedSeq;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_91000000* tcd = (_0RL_cd_7963219a43724a61_91000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->contents(tcd->arg_0, tcd->arg_1);
}

CORBA::ContainedSeq* CORBA::_objref_Container::contents(DefinitionKind limit_type, CORBA::Boolean exclude_inherited)
{
  _0RL_cd_7963219a43724a61_91000000 _call_desc(_0RL_lcfn_7963219a43724a61_a1000000, "contents", 9, 0, limit_type, exclude_inherited);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mContainedSeq_i_cstring_i_clong_i_cCORBA_mDefinitionKind_i_cboolean
class _0RL_cd_7963219a43724a61_b1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_b1000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, CORBA::Long a_1, CORBA::DefinitionKind a_2, CORBA::Boolean a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ContainedSeq* result() { return pd_result; }
  const char* arg_0;
  CORBA::Long arg_1;
  CORBA::DefinitionKind arg_2;
  CORBA::Boolean arg_3;
  CORBA::ContainedSeq* pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_b1000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize += 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_b1000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_1 >>= giop_client;
  arg_2 >>= giop_client;
  arg_3 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_b1000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::ContainedSeq;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b1000000* tcd = (_0RL_cd_7963219a43724a61_b1000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->lookup_name(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::ContainedSeq* CORBA::_objref_Container::lookup_name(const char* search_name, CORBA::Long levels_to_search, DefinitionKind limit_type, CORBA::Boolean exclude_inherited)
{
  _0RL_cd_7963219a43724a61_b1000000 _call_desc(_0RL_lcfn_7963219a43724a61_c1000000, "lookup_name", 12, 0, search_name, levels_to_search, limit_type, exclude_inherited);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mContainer_mDescriptionSeq_i_cCORBA_mDefinitionKind_i_cboolean_i_clong
class _0RL_cd_7963219a43724a61_d1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_d1000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::DefinitionKind a_0, CORBA::Boolean a_1, CORBA::Long a_2):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Container::DescriptionSeq* result() { return pd_result; }
  CORBA::DefinitionKind arg_0;
  CORBA::Boolean arg_1;
  CORBA::Long arg_2;
  CORBA::Container::DescriptionSeq* pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_d1000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize += 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_d1000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  arg_1 >>= giop_client;
  arg_2 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_d1000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::Container::DescriptionSeq;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_d1000000* tcd = (_0RL_cd_7963219a43724a61_d1000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->describe_contents(tcd->arg_0, tcd->arg_1, tcd->arg_2);
}

CORBA::Container::DescriptionSeq* CORBA::_objref_Container::describe_contents(DefinitionKind limit_type, CORBA::Boolean exclude_inherited, CORBA::Long max_returned_objs)
{
  _0RL_cd_7963219a43724a61_d1000000 _call_desc(_0RL_lcfn_7963219a43724a61_e1000000, "describe_contents", 18, 0, limit_type, exclude_inherited, max_returned_objs);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mModuleDef_i_cstring_i_cstring_i_cstring
class _0RL_cd_7963219a43724a61_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_f1000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ModuleDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::ModuleDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_f1000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_f1000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_7963219a43724a61_f1000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ModuleDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_f1000000* tcd = (_0RL_cd_7963219a43724a61_f1000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_module(tcd->arg_0, tcd->arg_1, tcd->arg_2);
}

CORBA::ModuleDef_ptr CORBA::_objref_Container::create_module(const char* id, const char* name, const char* version)
{
  _0RL_cd_7963219a43724a61_f1000000 _call_desc(_0RL_lcfn_7963219a43724a61_02000000, "create_module", 14, 0, id, name, version);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mConstantDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mIDLType_i_cany
class _0RL_cd_7963219a43724a61_12000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_12000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::IDLType_ptr a_3, const CORBA::Any& a_4):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3),
     arg_4(a_4) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ConstantDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::IDLType_ptr arg_3;
  const CORBA::Any& arg_4;
  CORBA::ConstantDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_12000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_3, msgsize);
  
  msgsize = arg_4._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_12000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::IDLType_Helper::marshalObjRef(arg_3,giop_client);
  arg_4 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_12000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ConstantDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_12000000* tcd = (_0RL_cd_7963219a43724a61_12000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_constant(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
}

CORBA::ConstantDef_ptr CORBA::_objref_Container::create_constant(const char* id, const char* name, const char* version, IDLType_ptr type, const CORBA::Any& value)
{
  _0RL_cd_7963219a43724a61_12000000 _call_desc(_0RL_lcfn_7963219a43724a61_22000000, "create_constant", 16, 0, id, name, version, type, value);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mStructDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mStructMemberSeq
class _0RL_cd_7963219a43724a61_32000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_32000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, const CORBA::StructMemberSeq& a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::StructDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  const CORBA::StructMemberSeq& arg_3;
  CORBA::StructDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_32000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = arg_3._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_32000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_3 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_32000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::StructDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_32000000* tcd = (_0RL_cd_7963219a43724a61_32000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_struct(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::StructDef_ptr CORBA::_objref_Container::create_struct(const char* id, const char* name, const char* version, const StructMemberSeq& members)
{
  _0RL_cd_7963219a43724a61_32000000 _call_desc(_0RL_lcfn_7963219a43724a61_42000000, "create_struct", 14, 0, id, name, version, members);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mUnionDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mIDLType_i_cCORBA_mUnionMemberSeq
class _0RL_cd_7963219a43724a61_52000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_52000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::IDLType_ptr a_3, const CORBA::UnionMemberSeq& a_4):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3),
     arg_4(a_4) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::UnionDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::IDLType_ptr arg_3;
  const CORBA::UnionMemberSeq& arg_4;
  CORBA::UnionDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_52000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_3, msgsize);
  
  msgsize = arg_4._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_52000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::IDLType_Helper::marshalObjRef(arg_3,giop_client);
  arg_4 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_52000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::UnionDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_62000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_52000000* tcd = (_0RL_cd_7963219a43724a61_52000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_union(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
}

CORBA::UnionDef_ptr CORBA::_objref_Container::create_union(const char* id, const char* name, const char* version, IDLType_ptr discriminator_type, const UnionMemberSeq& members)
{
  _0RL_cd_7963219a43724a61_52000000 _call_desc(_0RL_lcfn_7963219a43724a61_62000000, "create_union", 13, 0, id, name, version, discriminator_type, members);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mEnumDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mEnumMemberSeq
class _0RL_cd_7963219a43724a61_72000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_72000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, const CORBA::EnumMemberSeq& a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::EnumDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  const CORBA::EnumMemberSeq& arg_3;
  CORBA::EnumDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_72000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = arg_3._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_72000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_3 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_72000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::EnumDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_72000000* tcd = (_0RL_cd_7963219a43724a61_72000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_enum(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::EnumDef_ptr CORBA::_objref_Container::create_enum(const char* id, const char* name, const char* version, const EnumMemberSeq& members)
{
  _0RL_cd_7963219a43724a61_72000000 _call_desc(_0RL_lcfn_7963219a43724a61_82000000, "create_enum", 12, 0, id, name, version, members);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mAliasDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mIDLType
class _0RL_cd_7963219a43724a61_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_92000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::IDLType_ptr a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::AliasDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::IDLType_ptr arg_3;
  CORBA::AliasDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_92000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_3, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_92000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::IDLType_Helper::marshalObjRef(arg_3,giop_client);
  
}

void _0RL_cd_7963219a43724a61_92000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::AliasDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_92000000* tcd = (_0RL_cd_7963219a43724a61_92000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_alias(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::AliasDef_ptr CORBA::_objref_Container::create_alias(const char* id, const char* name, const char* version, IDLType_ptr original_type)
{
  _0RL_cd_7963219a43724a61_92000000 _call_desc(_0RL_lcfn_7963219a43724a61_a2000000, "create_alias", 13, 0, id, name, version, original_type);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mInterfaceDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mInterfaceDefSeq
class _0RL_cd_7963219a43724a61_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_b2000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, const CORBA::InterfaceDefSeq& a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::InterfaceDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  const CORBA::InterfaceDefSeq& arg_3;
  CORBA::InterfaceDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_b2000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = arg_3._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_b2000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_3 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_b2000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::InterfaceDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b2000000* tcd = (_0RL_cd_7963219a43724a61_b2000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_interface(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::InterfaceDef_ptr CORBA::_objref_Container::create_interface(const char* id, const char* name, const char* version, const InterfaceDefSeq& base_interfaces)
{
  _0RL_cd_7963219a43724a61_b2000000 _call_desc(_0RL_lcfn_7963219a43724a61_c2000000, "create_interface", 17, 0, id, name, version, base_interfaces);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mValueDef_i_cstring_i_cstring_i_cstring_i_cboolean_i_cboolean_i_cCORBA_mValueDef_i_cboolean_i_cCORBA_mValueDefSeq_i_cCORBA_mInterfaceDefSeq_i_cCORBA_mInitializerSeq
class _0RL_cd_7963219a43724a61_d2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_d2000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::Boolean a_3, CORBA::Boolean a_4, CORBA::ValueDef_ptr a_5, CORBA::Boolean a_6, const CORBA::ValueDefSeq& a_7, const CORBA::InterfaceDefSeq& a_8, const CORBA::InitializerSeq& a_9):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3),
     arg_4(a_4),
     arg_5(a_5),
     arg_6(a_6),
     arg_7(a_7),
     arg_8(a_8),
     arg_9(a_9) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ValueDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::Boolean arg_3;
  CORBA::Boolean arg_4;
  CORBA::ValueDef_ptr arg_5;
  CORBA::Boolean arg_6;
  const CORBA::ValueDefSeq& arg_7;
  const CORBA::InterfaceDefSeq& arg_8;
  const CORBA::InitializerSeq& arg_9;
  CORBA::ValueDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_d2000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize += 1;
  
  msgsize += 1;
  
  msgsize = CORBA::ValueDef_Helper::NP_alignedSize(arg_5, msgsize);
  
  msgsize += 1;
  
  msgsize = arg_7._NP_alignedSize(msgsize);
  
  msgsize = arg_8._NP_alignedSize(msgsize);
  
  msgsize = arg_9._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_d2000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_3 >>= giop_client;
  arg_4 >>= giop_client;
  CORBA::ValueDef_Helper::marshalObjRef(arg_5,giop_client);
  arg_6 >>= giop_client;
  arg_7 >>= giop_client;
  arg_8 >>= giop_client;
  arg_9 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_d2000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ValueDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_d2000000* tcd = (_0RL_cd_7963219a43724a61_d2000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_value(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6, tcd->arg_7, tcd->arg_8, tcd->arg_9);
}

CORBA::ValueDef_ptr CORBA::_objref_Container::create_value(const char* id, const char* name, const char* version, CORBA::Boolean is_custom, CORBA::Boolean is_abstract, ValueDef_ptr base_value, CORBA::Boolean is_truncatable, const ValueDefSeq& abstract_base_values, const InterfaceDefSeq& supported_interfaces, const InitializerSeq& initializers)
{
  _0RL_cd_7963219a43724a61_d2000000 _call_desc(_0RL_lcfn_7963219a43724a61_e2000000, "create_value", 13, 0, id, name, version, is_custom, is_abstract, base_value, is_truncatable, abstract_base_values, supported_interfaces, initializers);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mValueBoxDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mIDLType
class _0RL_cd_7963219a43724a61_f2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_f2000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::IDLType_ptr a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ValueBoxDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::IDLType_ptr arg_3;
  CORBA::ValueBoxDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_f2000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_3, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_f2000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::IDLType_Helper::marshalObjRef(arg_3,giop_client);
  
}

void _0RL_cd_7963219a43724a61_f2000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ValueBoxDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_03000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_f2000000* tcd = (_0RL_cd_7963219a43724a61_f2000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_value_box(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::ValueBoxDef_ptr CORBA::_objref_Container::create_value_box(const char* id, const char* name, const char* version, IDLType_ptr original_type_def)
{
  _0RL_cd_7963219a43724a61_f2000000 _call_desc(_0RL_lcfn_7963219a43724a61_03000000, "create_value_box", 17, 0, id, name, version, original_type_def);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mExceptionDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mStructMemberSeq
class _0RL_cd_7963219a43724a61_13000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_13000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, const CORBA::StructMemberSeq& a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ExceptionDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  const CORBA::StructMemberSeq& arg_3;
  CORBA::ExceptionDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_13000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = arg_3._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_13000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_3 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_13000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ExceptionDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_23000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_13000000* tcd = (_0RL_cd_7963219a43724a61_13000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_exception(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::ExceptionDef_ptr CORBA::_objref_Container::create_exception(const char* id, const char* name, const char* version, const StructMemberSeq& members)
{
  _0RL_cd_7963219a43724a61_13000000 _call_desc(_0RL_lcfn_7963219a43724a61_23000000, "create_exception", 17, 0, id, name, version, members);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mNativeDef_i_cstring_i_cstring_i_cstring
class _0RL_cd_7963219a43724a61_33000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_33000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::NativeDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::NativeDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_33000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_33000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_7963219a43724a61_33000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::NativeDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_43000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_33000000* tcd = (_0RL_cd_7963219a43724a61_33000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_native(tcd->arg_0, tcd->arg_1, tcd->arg_2);
}

CORBA::NativeDef_ptr CORBA::_objref_Container::create_native(const char* id, const char* name, const char* version)
{
  _0RL_cd_7963219a43724a61_33000000 _call_desc(_0RL_lcfn_7963219a43724a61_43000000, "create_native", 14, 0, id, name, version);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mAbstractInterfaceDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mAbstractInterfaceDefSeq
class _0RL_cd_7963219a43724a61_53000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_53000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, const CORBA::AbstractInterfaceDefSeq& a_3):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::AbstractInterfaceDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  const CORBA::AbstractInterfaceDefSeq& arg_3;
  CORBA::AbstractInterfaceDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_53000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = arg_3._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_53000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_3 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_53000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::AbstractInterfaceDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_53000000* tcd = (_0RL_cd_7963219a43724a61_53000000*) cd;
  CORBA::_impl_Container* impl = (CORBA::_impl_Container*) svnt->_ptrToInterface(CORBA::Container::_PD_repoId);
  tcd->pd_result = impl->create_abstract_interface(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
}

CORBA::AbstractInterfaceDef_ptr CORBA::_objref_Container::create_abstract_interface(const char* id, const char* name, const char* version, const AbstractInterfaceDefSeq& base_interfaces)
{
  _0RL_cd_7963219a43724a61_53000000 _call_desc(_0RL_lcfn_7963219a43724a61_63000000, "create_abstract_interface", 26, 0, id, name, version, base_interfaces);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

CORBA::_pof_Container::~_pof_Container() {}

omniObjRef*
CORBA::_pof_Container::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_Container(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_Container::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_Container _the_pof_CORBA_mContainer;

CORBA::_impl_Container::~_impl_Container() {}

CORBA::Boolean
CORBA::_impl_Container::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "lookup") ) {
    
    CORBA::String_var arg_search_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_search_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    Contained_var result;
    
    result = this->lookup(arg_search_name.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = Contained_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      Contained_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "contents") ) {
    
    DefinitionKind arg_limit_type;
    
    arg_limit_type <<= giop_s;
    CORBA::Boolean arg_exclude_inherited;
    
    arg_exclude_inherited <<= giop_s;
    
    giop_s.RequestReceived();
    ContainedSeq_var result;
    
    result = this->contents(arg_limit_type, arg_exclude_inherited);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "lookup_name") ) {
    
    CORBA::String_var arg_search_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_search_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Long arg_levels_to_search;
    
    arg_levels_to_search <<= giop_s;
    DefinitionKind arg_limit_type;
    
    arg_limit_type <<= giop_s;
    CORBA::Boolean arg_exclude_inherited;
    
    arg_exclude_inherited <<= giop_s;
    
    giop_s.RequestReceived();
    ContainedSeq_var result;
    
    result = this->lookup_name(arg_search_name.in(), arg_levels_to_search, arg_limit_type, arg_exclude_inherited);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "describe_contents") ) {
    
    DefinitionKind arg_limit_type;
    
    arg_limit_type <<= giop_s;
    CORBA::Boolean arg_exclude_inherited;
    
    arg_exclude_inherited <<= giop_s;
    CORBA::Long arg_max_returned_objs;
    
    arg_max_returned_objs <<= giop_s;
    
    giop_s.RequestReceived();
    Container::DescriptionSeq_var result;
    
    result = this->describe_contents(arg_limit_type, arg_exclude_inherited, arg_max_returned_objs);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_module") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    ModuleDef_var result;
    
    result = this->create_module(arg_id.in(), arg_name.in(), arg_version.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ModuleDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ModuleDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_constant") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_type;
    
    arg_type = IDLType_Helper::unmarshalObjRef(giop_s);
    CORBA::Any arg_value;
    
    arg_value <<= giop_s;
    
    giop_s.RequestReceived();
    ConstantDef_var result;
    
    result = this->create_constant(arg_id.in(), arg_name.in(), arg_version.in(), arg_type.in(), arg_value);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ConstantDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ConstantDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_struct") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    StructMemberSeq arg_members;
    
    arg_members <<= giop_s;
    
    giop_s.RequestReceived();
    StructDef_var result;
    
    result = this->create_struct(arg_id.in(), arg_name.in(), arg_version.in(), arg_members);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = StructDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      StructDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_union") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_discriminator_type;
    
    arg_discriminator_type = IDLType_Helper::unmarshalObjRef(giop_s);
    UnionMemberSeq arg_members;
    
    arg_members <<= giop_s;
    
    giop_s.RequestReceived();
    UnionDef_var result;
    
    result = this->create_union(arg_id.in(), arg_name.in(), arg_version.in(), arg_discriminator_type.in(), arg_members);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = UnionDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      UnionDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_enum") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    EnumMemberSeq arg_members;
    
    arg_members <<= giop_s;
    
    giop_s.RequestReceived();
    EnumDef_var result;
    
    result = this->create_enum(arg_id.in(), arg_name.in(), arg_version.in(), arg_members);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = EnumDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      EnumDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_alias") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_original_type;
    
    arg_original_type = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    AliasDef_var result;
    
    result = this->create_alias(arg_id.in(), arg_name.in(), arg_version.in(), arg_original_type.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = AliasDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      AliasDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_interface") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    InterfaceDefSeq arg_base_interfaces;
    
    arg_base_interfaces <<= giop_s;
    
    giop_s.RequestReceived();
    InterfaceDef_var result;
    
    result = this->create_interface(arg_id.in(), arg_name.in(), arg_version.in(), arg_base_interfaces);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = InterfaceDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      InterfaceDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_value") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Boolean arg_is_custom;
    
    arg_is_custom <<= giop_s;
    CORBA::Boolean arg_is_abstract;
    
    arg_is_abstract <<= giop_s;
    ValueDef_var arg_base_value;
    
    arg_base_value = ValueDef_Helper::unmarshalObjRef(giop_s);
    CORBA::Boolean arg_is_truncatable;
    
    arg_is_truncatable <<= giop_s;
    ValueDefSeq arg_abstract_base_values;
    
    arg_abstract_base_values <<= giop_s;
    InterfaceDefSeq arg_supported_interfaces;
    
    arg_supported_interfaces <<= giop_s;
    InitializerSeq arg_initializers;
    
    arg_initializers <<= giop_s;
    
    giop_s.RequestReceived();
    ValueDef_var result;
    
    result = this->create_value(arg_id.in(), arg_name.in(), arg_version.in(), arg_is_custom, arg_is_abstract, arg_base_value.in(), arg_is_truncatable, arg_abstract_base_values, arg_supported_interfaces, arg_initializers);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ValueDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ValueDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_value_box") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_original_type_def;
    
    arg_original_type_def = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    ValueBoxDef_var result;
    
    result = this->create_value_box(arg_id.in(), arg_name.in(), arg_version.in(), arg_original_type_def.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ValueBoxDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ValueBoxDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_exception") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    StructMemberSeq arg_members;
    
    arg_members <<= giop_s;
    
    giop_s.RequestReceived();
    ExceptionDef_var result;
    
    result = this->create_exception(arg_id.in(), arg_name.in(), arg_version.in(), arg_members);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ExceptionDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ExceptionDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_native") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    NativeDef_var result;
    
    result = this->create_native(arg_id.in(), arg_name.in(), arg_version.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = NativeDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      NativeDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_abstract_interface") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    AbstractInterfaceDefSeq arg_base_interfaces;
    
    arg_base_interfaces <<= giop_s;
    
    giop_s.RequestReceived();
    AbstractInterfaceDef_var result;
    
    result = this->create_abstract_interface(arg_id.in(), arg_name.in(), arg_version.in(), arg_base_interfaces);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = AbstractInterfaceDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      AbstractInterfaceDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IRObject::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_Container::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (_impl_Container*) this;
  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_Container::_mostDerivedRepoId()
{
  return CORBA::Container::_PD_repoId;
}

CORBA::IDLType_ptr CORBA::IDLType_Helper::_nil() {
  return CORBA::IDLType::_nil();
}

CORBA::Boolean CORBA::IDLType_Helper::is_nil(CORBA::IDLType_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::IDLType_Helper::release(CORBA::IDLType_ptr p) {
  CORBA::release(p);
}

void CORBA::IDLType_Helper::duplicate(CORBA::IDLType_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::IDLType_Helper::NP_alignedSize(CORBA::IDLType_ptr obj, size_t offset) {
  return CORBA::IDLType::_alignedSize(obj, offset);
}

void CORBA::IDLType_Helper::marshalObjRef(CORBA::IDLType_ptr obj, NetBufferedStream& s) {
  CORBA::IDLType::_marshalObjRef(obj, s);
}

CORBA::IDLType_ptr CORBA::IDLType_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::IDLType::_unmarshalObjRef(s);
}

void CORBA::IDLType_Helper::marshalObjRef(CORBA::IDLType_ptr obj, MemBufferedStream& s) {
  CORBA::IDLType::_marshalObjRef(obj, s);
}

CORBA::IDLType_ptr CORBA::IDLType_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::IDLType::_unmarshalObjRef(s);
}

CORBA::IDLType_ptr
CORBA::IDLType::_duplicate(CORBA::IDLType_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::IDLType_ptr
CORBA::IDLType::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::IDLType_ptr
CORBA::IDLType::_nil()
{
  static _objref_IDLType* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_IDLType;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::IDLType::_PD_repoId = "IDL:omg.org/CORBA/IDLType:1.0";

CORBA::_objref_IDLType::~_objref_IDLType() {}

CORBA::_objref_IDLType::_objref_IDLType(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IRObject(mdri, p, id, lid),
   
   omniObjRef(CORBA::IDLType::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_IDLType::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTypeCode
class _0RL_cd_7963219a43724a61_73000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_73000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::TypeCode_ptr result() { return pd_result; }
  
  CORBA::TypeCode_ptr pd_result;
  
};

void _0RL_cd_7963219a43724a61_73000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::TypeCode::unmarshalTypeCode(giop_client);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTypeCode
class _0RL_cd_7963219a43724a61_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_83000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::TypeCode_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::TypeCode_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_83000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0->_NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_83000000::marshalArguments(GIOP_C& giop_client)
{
  CORBA::TypeCode::marshalTypeCode(arg_0, giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_IDLType* impl = (CORBA::_impl_IDLType*) svnt->_ptrToInterface(CORBA::IDLType::_PD_repoId);
  tcd->pd_result = impl->type();
}

CORBA::TypeCode_ptr CORBA::_objref_IDLType::type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_93000000, "_get_type", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

CORBA::_pof_IDLType::~_pof_IDLType() {}

omniObjRef*
CORBA::_pof_IDLType::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_IDLType(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_IDLType::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_IDLType _the_pof_CORBA_mIDLType;

CORBA::_impl_IDLType::~_impl_IDLType() {}

CORBA::Boolean
CORBA::_impl_IDLType::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IRObject::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_IDLType::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;
  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_IDLType::_mostDerivedRepoId()
{
  return CORBA::IDLType::_PD_repoId;
}

CORBA::Repository_ptr CORBA::Repository_Helper::_nil() {
  return CORBA::Repository::_nil();
}

CORBA::Boolean CORBA::Repository_Helper::is_nil(CORBA::Repository_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::Repository_Helper::release(CORBA::Repository_ptr p) {
  CORBA::release(p);
}

void CORBA::Repository_Helper::duplicate(CORBA::Repository_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::Repository_Helper::NP_alignedSize(CORBA::Repository_ptr obj, size_t offset) {
  return CORBA::Repository::_alignedSize(obj, offset);
}

void CORBA::Repository_Helper::marshalObjRef(CORBA::Repository_ptr obj, NetBufferedStream& s) {
  CORBA::Repository::_marshalObjRef(obj, s);
}

CORBA::Repository_ptr CORBA::Repository_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::Repository::_unmarshalObjRef(s);
}

void CORBA::Repository_Helper::marshalObjRef(CORBA::Repository_ptr obj, MemBufferedStream& s) {
  CORBA::Repository::_marshalObjRef(obj, s);
}

CORBA::Repository_ptr CORBA::Repository_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::Repository::_unmarshalObjRef(s);
}

CORBA::Repository_ptr
CORBA::Repository::_duplicate(CORBA::Repository_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::Repository_ptr
CORBA::Repository::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::Repository_ptr
CORBA::Repository::_nil()
{
  static _objref_Repository* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_Repository;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::Repository::_PD_repoId = "IDL:omg.org/CORBA/Repository:1.0";

CORBA::_objref_Repository::~_objref_Repository() {}

CORBA::_objref_Repository::_objref_Repository(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Container(mdri, p, id, lid),
   
   omniObjRef(CORBA::Repository::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_Repository::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::Repository::_PD_repoId) )
    return (CORBA::Repository_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_71000000* tcd = (_0RL_cd_7963219a43724a61_71000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->lookup_id(tcd->arg_0);
}

CORBA::Contained_ptr CORBA::_objref_Repository::lookup_id(const char* search_id)
{
  _0RL_cd_7963219a43724a61_71000000 _call_desc(_0RL_lcfn_7963219a43724a61_a3000000, "lookup_id", 10, 0, search_id);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTypeCode_i_cTypeCode
class _0RL_cd_7963219a43724a61_b3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_b3000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::TypeCode_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::TypeCode_ptr result() { return pd_result; }
  CORBA::TypeCode_ptr arg_0;
  CORBA::TypeCode_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_b3000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0->_NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_b3000000::marshalArguments(GIOP_C& giop_client)
{
  CORBA::TypeCode::marshalTypeCode(arg_0, giop_client);
  
}

void _0RL_cd_7963219a43724a61_b3000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::TypeCode::unmarshalTypeCode(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b3000000* tcd = (_0RL_cd_7963219a43724a61_b3000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->get_canonical_typecode(tcd->arg_0);
}

CORBA::TypeCode_ptr CORBA::_objref_Repository::get_canonical_typecode(CORBA::TypeCode_ptr tc)
{
  _0RL_cd_7963219a43724a61_b3000000 _call_desc(_0RL_lcfn_7963219a43724a61_c3000000, "get_canonical_typecode", 23, 0, tc);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mPrimitiveDef_i_cCORBA_mPrimitiveKind
class _0RL_cd_7963219a43724a61_d3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_d3000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::PrimitiveKind a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::PrimitiveDef_ptr result() { return pd_result; }
  CORBA::PrimitiveKind arg_0;
  CORBA::PrimitiveDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_d3000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_d3000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_d3000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::PrimitiveDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_d3000000* tcd = (_0RL_cd_7963219a43724a61_d3000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->get_primitive(tcd->arg_0);
}

CORBA::PrimitiveDef_ptr CORBA::_objref_Repository::get_primitive(PrimitiveKind kind)
{
  _0RL_cd_7963219a43724a61_d3000000 _call_desc(_0RL_lcfn_7963219a43724a61_e3000000, "get_primitive", 14, 0, kind);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mStringDef_i_cunsigned_plong
class _0RL_cd_7963219a43724a61_f3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_f3000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::ULong a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::StringDef_ptr result() { return pd_result; }
  CORBA::ULong arg_0;
  CORBA::StringDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_f3000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_f3000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_f3000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::StringDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_04000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_f3000000* tcd = (_0RL_cd_7963219a43724a61_f3000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->create_string(tcd->arg_0);
}

CORBA::StringDef_ptr CORBA::_objref_Repository::create_string(CORBA::ULong bound)
{
  _0RL_cd_7963219a43724a61_f3000000 _call_desc(_0RL_lcfn_7963219a43724a61_04000000, "create_string", 14, 0, bound);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mWstringDef_i_cunsigned_plong
class _0RL_cd_7963219a43724a61_14000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_14000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::ULong a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::WstringDef_ptr result() { return pd_result; }
  CORBA::ULong arg_0;
  CORBA::WstringDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_14000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_14000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_14000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::WstringDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_24000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_14000000* tcd = (_0RL_cd_7963219a43724a61_14000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->create_wstring(tcd->arg_0);
}

CORBA::WstringDef_ptr CORBA::_objref_Repository::create_wstring(CORBA::ULong bound)
{
  _0RL_cd_7963219a43724a61_14000000 _call_desc(_0RL_lcfn_7963219a43724a61_24000000, "create_wstring", 15, 0, bound);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mSequenceDef_i_cunsigned_plong_i_cCORBA_mIDLType
class _0RL_cd_7963219a43724a61_34000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_34000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::ULong a_0, CORBA::IDLType_ptr a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::SequenceDef_ptr result() { return pd_result; }
  CORBA::ULong arg_0;
  CORBA::IDLType_ptr arg_1;
  CORBA::SequenceDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_34000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_1, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_34000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  CORBA::IDLType_Helper::marshalObjRef(arg_1,giop_client);
  
}

void _0RL_cd_7963219a43724a61_34000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::SequenceDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_44000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_34000000* tcd = (_0RL_cd_7963219a43724a61_34000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->create_sequence(tcd->arg_0, tcd->arg_1);
}

CORBA::SequenceDef_ptr CORBA::_objref_Repository::create_sequence(CORBA::ULong bound, IDLType_ptr element_type)
{
  _0RL_cd_7963219a43724a61_34000000 _call_desc(_0RL_lcfn_7963219a43724a61_44000000, "create_sequence", 16, 0, bound, element_type);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mArrayDef_i_cunsigned_plong_i_cCORBA_mIDLType
class _0RL_cd_7963219a43724a61_54000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_54000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::ULong a_0, CORBA::IDLType_ptr a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ArrayDef_ptr result() { return pd_result; }
  CORBA::ULong arg_0;
  CORBA::IDLType_ptr arg_1;
  CORBA::ArrayDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_54000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_1, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_54000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  CORBA::IDLType_Helper::marshalObjRef(arg_1,giop_client);
  
}

void _0RL_cd_7963219a43724a61_54000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ArrayDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_64000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_54000000* tcd = (_0RL_cd_7963219a43724a61_54000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->create_array(tcd->arg_0, tcd->arg_1);
}

CORBA::ArrayDef_ptr CORBA::_objref_Repository::create_array(CORBA::ULong length, IDLType_ptr element_type)
{
  _0RL_cd_7963219a43724a61_54000000 _call_desc(_0RL_lcfn_7963219a43724a61_64000000, "create_array", 13, 0, length, element_type);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mFixedDef_i_cunsigned_pshort_i_cshort
class _0RL_cd_7963219a43724a61_74000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_74000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::UShort a_0, CORBA::Short a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::FixedDef_ptr result() { return pd_result; }
  CORBA::UShort arg_0;
  CORBA::Short arg_1;
  CORBA::FixedDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_74000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_74000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  arg_1 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_74000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::FixedDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_84000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_74000000* tcd = (_0RL_cd_7963219a43724a61_74000000*) cd;
  CORBA::_impl_Repository* impl = (CORBA::_impl_Repository*) svnt->_ptrToInterface(CORBA::Repository::_PD_repoId);
  tcd->pd_result = impl->create_fixed(tcd->arg_0, tcd->arg_1);
}

CORBA::FixedDef_ptr CORBA::_objref_Repository::create_fixed(CORBA::UShort digits, CORBA::Short scale)
{
  _0RL_cd_7963219a43724a61_74000000 _call_desc(_0RL_lcfn_7963219a43724a61_84000000, "create_fixed", 13, 0, digits, scale);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

CORBA::_pof_Repository::~_pof_Repository() {}

omniObjRef*
CORBA::_pof_Repository::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_Repository(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_Repository::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::Repository::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_Repository _the_pof_CORBA_mRepository;

CORBA::_impl_Repository::~_impl_Repository() {}

CORBA::Boolean
CORBA::_impl_Repository::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "lookup_id") ) {
    
    CORBA::String_var arg_search_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_search_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    Contained_var result;
    
    result = this->lookup_id(arg_search_id.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = Contained_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      Contained_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "get_canonical_typecode") ) {
    
    CORBA::TypeCode_var arg_tc;
    
    arg_tc = CORBA::TypeCode::unmarshalTypeCode(giop_s);
    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result;
    
    result = this->get_canonical_typecode(arg_tc.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "get_primitive") ) {
    
    PrimitiveKind arg_kind;
    
    arg_kind <<= giop_s;
    
    giop_s.RequestReceived();
    PrimitiveDef_var result;
    
    result = this->get_primitive(arg_kind);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = PrimitiveDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      PrimitiveDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_string") ) {
    
    CORBA::ULong arg_bound;
    
    arg_bound <<= giop_s;
    
    giop_s.RequestReceived();
    StringDef_var result;
    
    result = this->create_string(arg_bound);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = StringDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      StringDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_wstring") ) {
    
    CORBA::ULong arg_bound;
    
    arg_bound <<= giop_s;
    
    giop_s.RequestReceived();
    WstringDef_var result;
    
    result = this->create_wstring(arg_bound);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = WstringDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      WstringDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_sequence") ) {
    
    CORBA::ULong arg_bound;
    
    arg_bound <<= giop_s;
    IDLType_var arg_element_type;
    
    arg_element_type = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    SequenceDef_var result;
    
    result = this->create_sequence(arg_bound, arg_element_type.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = SequenceDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      SequenceDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_array") ) {
    
    CORBA::ULong arg_length;
    
    arg_length <<= giop_s;
    IDLType_var arg_element_type;
    
    arg_element_type = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    ArrayDef_var result;
    
    result = this->create_array(arg_length, arg_element_type.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ArrayDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ArrayDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_fixed") ) {
    
    CORBA::UShort arg_digits;
    
    arg_digits <<= giop_s;
    CORBA::Short arg_scale;
    
    arg_scale <<= giop_s;
    
    giop_s.RequestReceived();
    FixedDef_var result;
    
    result = this->create_fixed(arg_digits, arg_scale);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = FixedDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      FixedDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Container::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_Repository::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::Repository::_PD_repoId) )
    return (_impl_Repository*) this;
  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_Repository::_mostDerivedRepoId()
{
  return CORBA::Repository::_PD_repoId;
}

CORBA::ModuleDef_ptr CORBA::ModuleDef_Helper::_nil() {
  return CORBA::ModuleDef::_nil();
}

CORBA::Boolean CORBA::ModuleDef_Helper::is_nil(CORBA::ModuleDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::ModuleDef_Helper::release(CORBA::ModuleDef_ptr p) {
  CORBA::release(p);
}

void CORBA::ModuleDef_Helper::duplicate(CORBA::ModuleDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::ModuleDef_Helper::NP_alignedSize(CORBA::ModuleDef_ptr obj, size_t offset) {
  return CORBA::ModuleDef::_alignedSize(obj, offset);
}

void CORBA::ModuleDef_Helper::marshalObjRef(CORBA::ModuleDef_ptr obj, NetBufferedStream& s) {
  CORBA::ModuleDef::_marshalObjRef(obj, s);
}

CORBA::ModuleDef_ptr CORBA::ModuleDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::ModuleDef::_unmarshalObjRef(s);
}

void CORBA::ModuleDef_Helper::marshalObjRef(CORBA::ModuleDef_ptr obj, MemBufferedStream& s) {
  CORBA::ModuleDef::_marshalObjRef(obj, s);
}

CORBA::ModuleDef_ptr CORBA::ModuleDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::ModuleDef::_unmarshalObjRef(s);
}

CORBA::ModuleDef_ptr
CORBA::ModuleDef::_duplicate(CORBA::ModuleDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::ModuleDef_ptr
CORBA::ModuleDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::ModuleDef_ptr
CORBA::ModuleDef::_nil()
{
  static _objref_ModuleDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_ModuleDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::ModuleDef::_PD_repoId = "IDL:omg.org/CORBA/ModuleDef:1.0";

CORBA::_objref_ModuleDef::~_objref_ModuleDef() {}

CORBA::_objref_ModuleDef::_objref_ModuleDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Container(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   
   omniObjRef(CORBA::ModuleDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_ModuleDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::ModuleDef::_PD_repoId) )
    return (CORBA::ModuleDef_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

CORBA::_pof_ModuleDef::~_pof_ModuleDef() {}

omniObjRef*
CORBA::_pof_ModuleDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_ModuleDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_ModuleDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::ModuleDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_ModuleDef _the_pof_CORBA_mModuleDef;

CORBA::_impl_ModuleDef::~_impl_ModuleDef() {}

CORBA::Boolean
CORBA::_impl_ModuleDef::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_Container::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_ModuleDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::ModuleDef::_PD_repoId) )
    return (_impl_ModuleDef*) this;
  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_ModuleDef::_mostDerivedRepoId()
{
  return CORBA::ModuleDef::_PD_repoId;
}

size_t
CORBA::ModuleDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::ModuleDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  
}

void
CORBA::ModuleDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  
}

void
CORBA::ModuleDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  
}

void
CORBA::ModuleDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  
}

CORBA::ConstantDef_ptr CORBA::ConstantDef_Helper::_nil() {
  return CORBA::ConstantDef::_nil();
}

CORBA::Boolean CORBA::ConstantDef_Helper::is_nil(CORBA::ConstantDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::ConstantDef_Helper::release(CORBA::ConstantDef_ptr p) {
  CORBA::release(p);
}

void CORBA::ConstantDef_Helper::duplicate(CORBA::ConstantDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::ConstantDef_Helper::NP_alignedSize(CORBA::ConstantDef_ptr obj, size_t offset) {
  return CORBA::ConstantDef::_alignedSize(obj, offset);
}

void CORBA::ConstantDef_Helper::marshalObjRef(CORBA::ConstantDef_ptr obj, NetBufferedStream& s) {
  CORBA::ConstantDef::_marshalObjRef(obj, s);
}

CORBA::ConstantDef_ptr CORBA::ConstantDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::ConstantDef::_unmarshalObjRef(s);
}

void CORBA::ConstantDef_Helper::marshalObjRef(CORBA::ConstantDef_ptr obj, MemBufferedStream& s) {
  CORBA::ConstantDef::_marshalObjRef(obj, s);
}

CORBA::ConstantDef_ptr CORBA::ConstantDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::ConstantDef::_unmarshalObjRef(s);
}

CORBA::ConstantDef_ptr
CORBA::ConstantDef::_duplicate(CORBA::ConstantDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::ConstantDef_ptr
CORBA::ConstantDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::ConstantDef_ptr
CORBA::ConstantDef::_nil()
{
  static _objref_ConstantDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_ConstantDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::ConstantDef::_PD_repoId = "IDL:omg.org/CORBA/ConstantDef:1.0";

CORBA::_objref_ConstantDef::~_objref_ConstantDef() {}

CORBA::_objref_ConstantDef::_objref_ConstantDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   
   omniObjRef(CORBA::ConstantDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_ConstantDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::ConstantDef::_PD_repoId) )
    return (CORBA::ConstantDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_ConstantDef* impl = (CORBA::_impl_ConstantDef*) svnt->_ptrToInterface(CORBA::ConstantDef::_PD_repoId);
  tcd->pd_result = impl->type();
}

CORBA::TypeCode_ptr CORBA::_objref_ConstantDef::type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_94000000, "_get_type", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mIDLType
class _0RL_cd_7963219a43724a61_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_a4000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::IDLType_ptr result() { return pd_result; }
  
  CORBA::IDLType_ptr pd_result;
  
};

void _0RL_cd_7963219a43724a61_a4000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::IDLType_Helper::unmarshalObjRef(giop_client);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mIDLType
class _0RL_cd_7963219a43724a61_b4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_b4000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::IDLType_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::IDLType_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_b4000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_b4000000::marshalArguments(GIOP_C& giop_client)
{
  CORBA::IDLType_Helper::marshalObjRef(arg_0,giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_ConstantDef* impl = (CORBA::_impl_ConstantDef*) svnt->_ptrToInterface(CORBA::ConstantDef::_PD_repoId);
  tcd->pd_result = impl->type_def();
}

CORBA::IDLType_ptr CORBA::_objref_ConstantDef::type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_c4000000, "_get_type_def", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_d4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_ConstantDef* impl = (CORBA::_impl_ConstantDef*) svnt->_ptrToInterface(CORBA::ConstantDef::_PD_repoId);
  impl->type_def(tcd->arg_0);
}

void CORBA::_objref_ConstantDef::type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_d4000000, "_set_type_def", 14, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cany
class _0RL_cd_7963219a43724a61_e4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_e4000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Any* result() { return pd_result; }
  
  CORBA::Any* pd_result;
  
};

void _0RL_cd_7963219a43724a61_e4000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::Any;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cany
class _0RL_cd_7963219a43724a61_f4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_f4000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::Any& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::Any& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_f4000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_f4000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_05000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_e4000000* tcd = (_0RL_cd_7963219a43724a61_e4000000*) cd;
  CORBA::_impl_ConstantDef* impl = (CORBA::_impl_ConstantDef*) svnt->_ptrToInterface(CORBA::ConstantDef::_PD_repoId);
  tcd->pd_result = impl->value();
}

CORBA::Any* CORBA::_objref_ConstantDef::value()
{
  _0RL_cd_7963219a43724a61_e4000000 _call_desc(_0RL_lcfn_7963219a43724a61_05000000, "_get_value", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_15000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_f4000000* tcd = (_0RL_cd_7963219a43724a61_f4000000*) cd;
  CORBA::_impl_ConstantDef* impl = (CORBA::_impl_ConstantDef*) svnt->_ptrToInterface(CORBA::ConstantDef::_PD_repoId);
  impl->value(tcd->arg_0);
}

void CORBA::_objref_ConstantDef::value(const CORBA::Any& arg_0)
{
  _0RL_cd_7963219a43724a61_f4000000 _call_desc(_0RL_lcfn_7963219a43724a61_15000000, "_set_value", 11, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_ConstantDef::~_pof_ConstantDef() {}

omniObjRef*
CORBA::_pof_ConstantDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_ConstantDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_ConstantDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::ConstantDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_ConstantDef _the_pof_CORBA_mConstantDef;

CORBA::_impl_ConstantDef::~_impl_ConstantDef() {}

CORBA::Boolean
CORBA::_impl_ConstantDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_value") ) {    
    giop_s.RequestReceived();
    CORBA::Any_var result = this->value();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_value") ) {
    CORBA::Any value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->value(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_ConstantDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::ConstantDef::_PD_repoId) )
    return (_impl_ConstantDef*) this;
  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_ConstantDef::_mostDerivedRepoId()
{
  return CORBA::ConstantDef::_PD_repoId;
}

size_t
CORBA::ConstantDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  _msgsize = value._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::ConstantDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  value >>= _n;
  
}

void
CORBA::ConstantDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  value <<= _n;
  
}

void
CORBA::ConstantDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  value >>= _n;
  
}

void
CORBA::ConstantDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  value <<= _n;
  
}

CORBA::TypedefDef_ptr CORBA::TypedefDef_Helper::_nil() {
  return CORBA::TypedefDef::_nil();
}

CORBA::Boolean CORBA::TypedefDef_Helper::is_nil(CORBA::TypedefDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::TypedefDef_Helper::release(CORBA::TypedefDef_ptr p) {
  CORBA::release(p);
}

void CORBA::TypedefDef_Helper::duplicate(CORBA::TypedefDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::TypedefDef_Helper::NP_alignedSize(CORBA::TypedefDef_ptr obj, size_t offset) {
  return CORBA::TypedefDef::_alignedSize(obj, offset);
}

void CORBA::TypedefDef_Helper::marshalObjRef(CORBA::TypedefDef_ptr obj, NetBufferedStream& s) {
  CORBA::TypedefDef::_marshalObjRef(obj, s);
}

CORBA::TypedefDef_ptr CORBA::TypedefDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::TypedefDef::_unmarshalObjRef(s);
}

void CORBA::TypedefDef_Helper::marshalObjRef(CORBA::TypedefDef_ptr obj, MemBufferedStream& s) {
  CORBA::TypedefDef::_marshalObjRef(obj, s);
}

CORBA::TypedefDef_ptr CORBA::TypedefDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::TypedefDef::_unmarshalObjRef(s);
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_duplicate(CORBA::TypedefDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_nil()
{
  static _objref_TypedefDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TypedefDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::TypedefDef::_PD_repoId = "IDL:omg.org/CORBA/TypedefDef:1.0";

CORBA::_objref_TypedefDef::~_objref_TypedefDef() {}

CORBA::_objref_TypedefDef::_objref_TypedefDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::TypedefDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_TypedefDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (CORBA::TypedefDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

CORBA::_pof_TypedefDef::~_pof_TypedefDef() {}

omniObjRef*
CORBA::_pof_TypedefDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_TypedefDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_TypedefDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_TypedefDef _the_pof_CORBA_mTypedefDef;

CORBA::_impl_TypedefDef::~_impl_TypedefDef() {}

CORBA::Boolean
CORBA::_impl_TypedefDef::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_TypedefDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (_impl_TypedefDef*) this;
  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_TypedefDef::_mostDerivedRepoId()
{
  return CORBA::TypedefDef::_PD_repoId;
}

size_t
CORBA::TypeDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::TypeDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  
}

void
CORBA::TypeDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  
}

void
CORBA::TypeDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  
}

void
CORBA::TypeDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  
}

CORBA::StructDef_ptr CORBA::StructDef_Helper::_nil() {
  return CORBA::StructDef::_nil();
}

CORBA::Boolean CORBA::StructDef_Helper::is_nil(CORBA::StructDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::StructDef_Helper::release(CORBA::StructDef_ptr p) {
  CORBA::release(p);
}

void CORBA::StructDef_Helper::duplicate(CORBA::StructDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::StructDef_Helper::NP_alignedSize(CORBA::StructDef_ptr obj, size_t offset) {
  return CORBA::StructDef::_alignedSize(obj, offset);
}

void CORBA::StructDef_Helper::marshalObjRef(CORBA::StructDef_ptr obj, NetBufferedStream& s) {
  CORBA::StructDef::_marshalObjRef(obj, s);
}

CORBA::StructDef_ptr CORBA::StructDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::StructDef::_unmarshalObjRef(s);
}

void CORBA::StructDef_Helper::marshalObjRef(CORBA::StructDef_ptr obj, MemBufferedStream& s) {
  CORBA::StructDef::_marshalObjRef(obj, s);
}

CORBA::StructDef_ptr CORBA::StructDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::StructDef::_unmarshalObjRef(s);
}

CORBA::StructDef_ptr
CORBA::StructDef::_duplicate(CORBA::StructDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::StructDef_ptr
CORBA::StructDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::StructDef_ptr
CORBA::StructDef::_nil()
{
  static _objref_StructDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_StructDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::StructDef::_PD_repoId = "IDL:omg.org/CORBA/StructDef:1.0";

CORBA::_objref_StructDef::~_objref_StructDef() {}

CORBA::_objref_StructDef::_objref_StructDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_TypedefDef(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_Container(mdri, p, id, lid),
   
   omniObjRef(CORBA::StructDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_StructDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::StructDef::_PD_repoId) )
    return (CORBA::StructDef_ptr) this;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (CORBA::TypedefDef_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mStructMemberSeq
class _0RL_cd_7963219a43724a61_25000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_25000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::StructMemberSeq* result() { return pd_result; }
  
  CORBA::StructMemberSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_25000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::StructMemberSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mStructMemberSeq
class _0RL_cd_7963219a43724a61_35000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_35000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::StructMemberSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::StructMemberSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_35000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_35000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_45000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_25000000* tcd = (_0RL_cd_7963219a43724a61_25000000*) cd;
  CORBA::_impl_StructDef* impl = (CORBA::_impl_StructDef*) svnt->_ptrToInterface(CORBA::StructDef::_PD_repoId);
  tcd->pd_result = impl->members();
}

CORBA::StructMemberSeq* CORBA::_objref_StructDef::members()
{
  _0RL_cd_7963219a43724a61_25000000 _call_desc(_0RL_lcfn_7963219a43724a61_45000000, "_get_members", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_55000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_35000000* tcd = (_0RL_cd_7963219a43724a61_35000000*) cd;
  CORBA::_impl_StructDef* impl = (CORBA::_impl_StructDef*) svnt->_ptrToInterface(CORBA::StructDef::_PD_repoId);
  impl->members(tcd->arg_0);
}

void CORBA::_objref_StructDef::members(const StructMemberSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_35000000 _call_desc(_0RL_lcfn_7963219a43724a61_55000000, "_set_members", 13, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_StructDef::~_pof_StructDef() {}

omniObjRef*
CORBA::_pof_StructDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_StructDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_StructDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::StructDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_StructDef _the_pof_CORBA_mStructDef;

CORBA::_impl_StructDef::~_impl_StructDef() {}

CORBA::Boolean
CORBA::_impl_StructDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_members") ) {    
    giop_s.RequestReceived();
    StructMemberSeq_var result = this->members();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_members") ) {
    StructMemberSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->members(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TypedefDef::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_Container::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_StructDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::StructDef::_PD_repoId) )
    return (_impl_StructDef*) this;
  if( !strcmp(id, TypedefDef::_PD_repoId) )
    return (_impl_TypedefDef*) this;

  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_StructDef::_mostDerivedRepoId()
{
  return CORBA::StructDef::_PD_repoId;
}

CORBA::UnionDef_ptr CORBA::UnionDef_Helper::_nil() {
  return CORBA::UnionDef::_nil();
}

CORBA::Boolean CORBA::UnionDef_Helper::is_nil(CORBA::UnionDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::UnionDef_Helper::release(CORBA::UnionDef_ptr p) {
  CORBA::release(p);
}

void CORBA::UnionDef_Helper::duplicate(CORBA::UnionDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::UnionDef_Helper::NP_alignedSize(CORBA::UnionDef_ptr obj, size_t offset) {
  return CORBA::UnionDef::_alignedSize(obj, offset);
}

void CORBA::UnionDef_Helper::marshalObjRef(CORBA::UnionDef_ptr obj, NetBufferedStream& s) {
  CORBA::UnionDef::_marshalObjRef(obj, s);
}

CORBA::UnionDef_ptr CORBA::UnionDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::UnionDef::_unmarshalObjRef(s);
}

void CORBA::UnionDef_Helper::marshalObjRef(CORBA::UnionDef_ptr obj, MemBufferedStream& s) {
  CORBA::UnionDef::_marshalObjRef(obj, s);
}

CORBA::UnionDef_ptr CORBA::UnionDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::UnionDef::_unmarshalObjRef(s);
}

CORBA::UnionDef_ptr
CORBA::UnionDef::_duplicate(CORBA::UnionDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::UnionDef_ptr
CORBA::UnionDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::UnionDef_ptr
CORBA::UnionDef::_nil()
{
  static _objref_UnionDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_UnionDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::UnionDef::_PD_repoId = "IDL:omg.org/CORBA/UnionDef:1.0";

CORBA::_objref_UnionDef::~_objref_UnionDef() {}

CORBA::_objref_UnionDef::_objref_UnionDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_TypedefDef(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_Container(mdri, p, id, lid),
   
   omniObjRef(CORBA::UnionDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_UnionDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::UnionDef::_PD_repoId) )
    return (CORBA::UnionDef_ptr) this;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (CORBA::TypedefDef_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_65000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_UnionDef* impl = (CORBA::_impl_UnionDef*) svnt->_ptrToInterface(CORBA::UnionDef::_PD_repoId);
  tcd->pd_result = impl->discriminator_type();
}

CORBA::TypeCode_ptr CORBA::_objref_UnionDef::discriminator_type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_65000000, "_get_discriminator_type", 24, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_75000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_UnionDef* impl = (CORBA::_impl_UnionDef*) svnt->_ptrToInterface(CORBA::UnionDef::_PD_repoId);
  tcd->pd_result = impl->discriminator_type_def();
}

CORBA::IDLType_ptr CORBA::_objref_UnionDef::discriminator_type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_75000000, "_get_discriminator_type_def", 28, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_85000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_UnionDef* impl = (CORBA::_impl_UnionDef*) svnt->_ptrToInterface(CORBA::UnionDef::_PD_repoId);
  impl->discriminator_type_def(tcd->arg_0);
}

void CORBA::_objref_UnionDef::discriminator_type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_85000000, "_set_discriminator_type_def", 28, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mUnionMemberSeq
class _0RL_cd_7963219a43724a61_95000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_95000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::UnionMemberSeq* result() { return pd_result; }
  
  CORBA::UnionMemberSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_95000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::UnionMemberSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mUnionMemberSeq
class _0RL_cd_7963219a43724a61_a5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_a5000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::UnionMemberSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::UnionMemberSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_a5000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_a5000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_b5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_95000000* tcd = (_0RL_cd_7963219a43724a61_95000000*) cd;
  CORBA::_impl_UnionDef* impl = (CORBA::_impl_UnionDef*) svnt->_ptrToInterface(CORBA::UnionDef::_PD_repoId);
  tcd->pd_result = impl->members();
}

CORBA::UnionMemberSeq* CORBA::_objref_UnionDef::members()
{
  _0RL_cd_7963219a43724a61_95000000 _call_desc(_0RL_lcfn_7963219a43724a61_b5000000, "_get_members", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a5000000* tcd = (_0RL_cd_7963219a43724a61_a5000000*) cd;
  CORBA::_impl_UnionDef* impl = (CORBA::_impl_UnionDef*) svnt->_ptrToInterface(CORBA::UnionDef::_PD_repoId);
  impl->members(tcd->arg_0);
}

void CORBA::_objref_UnionDef::members(const UnionMemberSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_a5000000 _call_desc(_0RL_lcfn_7963219a43724a61_c5000000, "_set_members", 13, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_UnionDef::~_pof_UnionDef() {}

omniObjRef*
CORBA::_pof_UnionDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_UnionDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_UnionDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::UnionDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_UnionDef _the_pof_CORBA_mUnionDef;

CORBA::_impl_UnionDef::~_impl_UnionDef() {}

CORBA::Boolean
CORBA::_impl_UnionDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_discriminator_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->discriminator_type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_discriminator_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->discriminator_type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_discriminator_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->discriminator_type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_members") ) {    
    giop_s.RequestReceived();
    UnionMemberSeq_var result = this->members();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_members") ) {
    UnionMemberSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->members(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TypedefDef::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_Container::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_UnionDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::UnionDef::_PD_repoId) )
    return (_impl_UnionDef*) this;
  if( !strcmp(id, TypedefDef::_PD_repoId) )
    return (_impl_TypedefDef*) this;

  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_UnionDef::_mostDerivedRepoId()
{
  return CORBA::UnionDef::_PD_repoId;
}

CORBA::EnumDef_ptr CORBA::EnumDef_Helper::_nil() {
  return CORBA::EnumDef::_nil();
}

CORBA::Boolean CORBA::EnumDef_Helper::is_nil(CORBA::EnumDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::EnumDef_Helper::release(CORBA::EnumDef_ptr p) {
  CORBA::release(p);
}

void CORBA::EnumDef_Helper::duplicate(CORBA::EnumDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::EnumDef_Helper::NP_alignedSize(CORBA::EnumDef_ptr obj, size_t offset) {
  return CORBA::EnumDef::_alignedSize(obj, offset);
}

void CORBA::EnumDef_Helper::marshalObjRef(CORBA::EnumDef_ptr obj, NetBufferedStream& s) {
  CORBA::EnumDef::_marshalObjRef(obj, s);
}

CORBA::EnumDef_ptr CORBA::EnumDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::EnumDef::_unmarshalObjRef(s);
}

void CORBA::EnumDef_Helper::marshalObjRef(CORBA::EnumDef_ptr obj, MemBufferedStream& s) {
  CORBA::EnumDef::_marshalObjRef(obj, s);
}

CORBA::EnumDef_ptr CORBA::EnumDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::EnumDef::_unmarshalObjRef(s);
}

CORBA::EnumDef_ptr
CORBA::EnumDef::_duplicate(CORBA::EnumDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::EnumDef_ptr
CORBA::EnumDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::EnumDef_ptr
CORBA::EnumDef::_nil()
{
  static _objref_EnumDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_EnumDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::EnumDef::_PD_repoId = "IDL:omg.org/CORBA/EnumDef:1.0";

CORBA::_objref_EnumDef::~_objref_EnumDef() {}

CORBA::_objref_EnumDef::_objref_EnumDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_TypedefDef(mdri, p, id, lid),
   
   omniObjRef(CORBA::EnumDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_EnumDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::EnumDef::_PD_repoId) )
    return (CORBA::EnumDef_ptr) this;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (CORBA::TypedefDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mEnumMemberSeq
class _0RL_cd_7963219a43724a61_d5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_d5000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::EnumMemberSeq* result() { return pd_result; }
  
  CORBA::EnumMemberSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_d5000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::EnumMemberSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mEnumMemberSeq
class _0RL_cd_7963219a43724a61_e5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_e5000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::EnumMemberSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::EnumMemberSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_e5000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_e5000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_f5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_d5000000* tcd = (_0RL_cd_7963219a43724a61_d5000000*) cd;
  CORBA::_impl_EnumDef* impl = (CORBA::_impl_EnumDef*) svnt->_ptrToInterface(CORBA::EnumDef::_PD_repoId);
  tcd->pd_result = impl->members();
}

CORBA::EnumMemberSeq* CORBA::_objref_EnumDef::members()
{
  _0RL_cd_7963219a43724a61_d5000000 _call_desc(_0RL_lcfn_7963219a43724a61_f5000000, "_get_members", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_06000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_e5000000* tcd = (_0RL_cd_7963219a43724a61_e5000000*) cd;
  CORBA::_impl_EnumDef* impl = (CORBA::_impl_EnumDef*) svnt->_ptrToInterface(CORBA::EnumDef::_PD_repoId);
  impl->members(tcd->arg_0);
}

void CORBA::_objref_EnumDef::members(const EnumMemberSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_e5000000 _call_desc(_0RL_lcfn_7963219a43724a61_06000000, "_set_members", 13, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_EnumDef::~_pof_EnumDef() {}

omniObjRef*
CORBA::_pof_EnumDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_EnumDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_EnumDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::EnumDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_EnumDef _the_pof_CORBA_mEnumDef;

CORBA::_impl_EnumDef::~_impl_EnumDef() {}

CORBA::Boolean
CORBA::_impl_EnumDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_members") ) {    
    giop_s.RequestReceived();
    EnumMemberSeq_var result = this->members();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_members") ) {
    EnumMemberSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->members(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TypedefDef::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_EnumDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::EnumDef::_PD_repoId) )
    return (_impl_EnumDef*) this;
  if( !strcmp(id, TypedefDef::_PD_repoId) )
    return (_impl_TypedefDef*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_EnumDef::_mostDerivedRepoId()
{
  return CORBA::EnumDef::_PD_repoId;
}

CORBA::AliasDef_ptr CORBA::AliasDef_Helper::_nil() {
  return CORBA::AliasDef::_nil();
}

CORBA::Boolean CORBA::AliasDef_Helper::is_nil(CORBA::AliasDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::AliasDef_Helper::release(CORBA::AliasDef_ptr p) {
  CORBA::release(p);
}

void CORBA::AliasDef_Helper::duplicate(CORBA::AliasDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::AliasDef_Helper::NP_alignedSize(CORBA::AliasDef_ptr obj, size_t offset) {
  return CORBA::AliasDef::_alignedSize(obj, offset);
}

void CORBA::AliasDef_Helper::marshalObjRef(CORBA::AliasDef_ptr obj, NetBufferedStream& s) {
  CORBA::AliasDef::_marshalObjRef(obj, s);
}

CORBA::AliasDef_ptr CORBA::AliasDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::AliasDef::_unmarshalObjRef(s);
}

void CORBA::AliasDef_Helper::marshalObjRef(CORBA::AliasDef_ptr obj, MemBufferedStream& s) {
  CORBA::AliasDef::_marshalObjRef(obj, s);
}

CORBA::AliasDef_ptr CORBA::AliasDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::AliasDef::_unmarshalObjRef(s);
}

CORBA::AliasDef_ptr
CORBA::AliasDef::_duplicate(CORBA::AliasDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::AliasDef_ptr
CORBA::AliasDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::AliasDef_ptr
CORBA::AliasDef::_nil()
{
  static _objref_AliasDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_AliasDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::AliasDef::_PD_repoId = "IDL:omg.org/CORBA/AliasDef:1.0";

CORBA::_objref_AliasDef::~_objref_AliasDef() {}

CORBA::_objref_AliasDef::_objref_AliasDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_TypedefDef(mdri, p, id, lid),
   
   omniObjRef(CORBA::AliasDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_AliasDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::AliasDef::_PD_repoId) )
    return (CORBA::AliasDef_ptr) this;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (CORBA::TypedefDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_16000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_AliasDef* impl = (CORBA::_impl_AliasDef*) svnt->_ptrToInterface(CORBA::AliasDef::_PD_repoId);
  tcd->pd_result = impl->original_type_def();
}

CORBA::IDLType_ptr CORBA::_objref_AliasDef::original_type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_16000000, "_get_original_type_def", 23, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_26000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_AliasDef* impl = (CORBA::_impl_AliasDef*) svnt->_ptrToInterface(CORBA::AliasDef::_PD_repoId);
  impl->original_type_def(tcd->arg_0);
}

void CORBA::_objref_AliasDef::original_type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_26000000, "_set_original_type_def", 23, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_AliasDef::~_pof_AliasDef() {}

omniObjRef*
CORBA::_pof_AliasDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_AliasDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_AliasDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::AliasDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_AliasDef _the_pof_CORBA_mAliasDef;

CORBA::_impl_AliasDef::~_impl_AliasDef() {}

CORBA::Boolean
CORBA::_impl_AliasDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_original_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->original_type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_original_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->original_type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TypedefDef::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_AliasDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::AliasDef::_PD_repoId) )
    return (_impl_AliasDef*) this;
  if( !strcmp(id, TypedefDef::_PD_repoId) )
    return (_impl_TypedefDef*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_AliasDef::_mostDerivedRepoId()
{
  return CORBA::AliasDef::_PD_repoId;
}

CORBA::NativeDef_ptr CORBA::NativeDef_Helper::_nil() {
  return CORBA::NativeDef::_nil();
}

CORBA::Boolean CORBA::NativeDef_Helper::is_nil(CORBA::NativeDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::NativeDef_Helper::release(CORBA::NativeDef_ptr p) {
  CORBA::release(p);
}

void CORBA::NativeDef_Helper::duplicate(CORBA::NativeDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::NativeDef_Helper::NP_alignedSize(CORBA::NativeDef_ptr obj, size_t offset) {
  return CORBA::NativeDef::_alignedSize(obj, offset);
}

void CORBA::NativeDef_Helper::marshalObjRef(CORBA::NativeDef_ptr obj, NetBufferedStream& s) {
  CORBA::NativeDef::_marshalObjRef(obj, s);
}

CORBA::NativeDef_ptr CORBA::NativeDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::NativeDef::_unmarshalObjRef(s);
}

void CORBA::NativeDef_Helper::marshalObjRef(CORBA::NativeDef_ptr obj, MemBufferedStream& s) {
  CORBA::NativeDef::_marshalObjRef(obj, s);
}

CORBA::NativeDef_ptr CORBA::NativeDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::NativeDef::_unmarshalObjRef(s);
}

CORBA::NativeDef_ptr
CORBA::NativeDef::_duplicate(CORBA::NativeDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::NativeDef_ptr
CORBA::NativeDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::NativeDef_ptr
CORBA::NativeDef::_nil()
{
  static _objref_NativeDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_NativeDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::NativeDef::_PD_repoId = "IDL:omg.org/CORBA/NativeDef:1.0";

CORBA::_objref_NativeDef::~_objref_NativeDef() {}

CORBA::_objref_NativeDef::_objref_NativeDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_TypedefDef(mdri, p, id, lid),
   
   omniObjRef(CORBA::NativeDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_NativeDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::NativeDef::_PD_repoId) )
    return (CORBA::NativeDef_ptr) this;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (CORBA::TypedefDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

CORBA::_pof_NativeDef::~_pof_NativeDef() {}

omniObjRef*
CORBA::_pof_NativeDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_NativeDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_NativeDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::NativeDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_NativeDef _the_pof_CORBA_mNativeDef;

CORBA::_impl_NativeDef::~_impl_NativeDef() {}

CORBA::Boolean
CORBA::_impl_NativeDef::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TypedefDef::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_NativeDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::NativeDef::_PD_repoId) )
    return (_impl_NativeDef*) this;
  if( !strcmp(id, TypedefDef::_PD_repoId) )
    return (_impl_TypedefDef*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_NativeDef::_mostDerivedRepoId()
{
  return CORBA::NativeDef::_PD_repoId;
}

CORBA::PrimitiveDef_ptr CORBA::PrimitiveDef_Helper::_nil() {
  return CORBA::PrimitiveDef::_nil();
}

CORBA::Boolean CORBA::PrimitiveDef_Helper::is_nil(CORBA::PrimitiveDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::PrimitiveDef_Helper::release(CORBA::PrimitiveDef_ptr p) {
  CORBA::release(p);
}

void CORBA::PrimitiveDef_Helper::duplicate(CORBA::PrimitiveDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::PrimitiveDef_Helper::NP_alignedSize(CORBA::PrimitiveDef_ptr obj, size_t offset) {
  return CORBA::PrimitiveDef::_alignedSize(obj, offset);
}

void CORBA::PrimitiveDef_Helper::marshalObjRef(CORBA::PrimitiveDef_ptr obj, NetBufferedStream& s) {
  CORBA::PrimitiveDef::_marshalObjRef(obj, s);
}

CORBA::PrimitiveDef_ptr CORBA::PrimitiveDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::PrimitiveDef::_unmarshalObjRef(s);
}

void CORBA::PrimitiveDef_Helper::marshalObjRef(CORBA::PrimitiveDef_ptr obj, MemBufferedStream& s) {
  CORBA::PrimitiveDef::_marshalObjRef(obj, s);
}

CORBA::PrimitiveDef_ptr CORBA::PrimitiveDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::PrimitiveDef::_unmarshalObjRef(s);
}

CORBA::PrimitiveDef_ptr
CORBA::PrimitiveDef::_duplicate(CORBA::PrimitiveDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::PrimitiveDef_ptr
CORBA::PrimitiveDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::PrimitiveDef_ptr
CORBA::PrimitiveDef::_nil()
{
  static _objref_PrimitiveDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_PrimitiveDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::PrimitiveDef::_PD_repoId = "IDL:omg.org/CORBA/PrimitiveDef:1.0";

CORBA::_objref_PrimitiveDef::~_objref_PrimitiveDef() {}

CORBA::_objref_PrimitiveDef::_objref_PrimitiveDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::PrimitiveDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_PrimitiveDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::PrimitiveDef::_PD_repoId) )
    return (CORBA::PrimitiveDef_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mPrimitiveKind
class _0RL_cd_7963219a43724a61_36000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_36000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::PrimitiveKind result() { return pd_result; }
  
  CORBA::PrimitiveKind pd_result;
  
};

void _0RL_cd_7963219a43724a61_36000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mPrimitiveKind
class _0RL_cd_7963219a43724a61_46000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_46000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::PrimitiveKind a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::PrimitiveKind arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_46000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_46000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_56000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_36000000* tcd = (_0RL_cd_7963219a43724a61_36000000*) cd;
  CORBA::_impl_PrimitiveDef* impl = (CORBA::_impl_PrimitiveDef*) svnt->_ptrToInterface(CORBA::PrimitiveDef::_PD_repoId);
  tcd->pd_result = impl->kind();
}

CORBA::PrimitiveKind CORBA::_objref_PrimitiveDef::kind()
{
  _0RL_cd_7963219a43724a61_36000000 _call_desc(_0RL_lcfn_7963219a43724a61_56000000, "_get_kind", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

CORBA::_pof_PrimitiveDef::~_pof_PrimitiveDef() {}

omniObjRef*
CORBA::_pof_PrimitiveDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_PrimitiveDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_PrimitiveDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::PrimitiveDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_PrimitiveDef _the_pof_CORBA_mPrimitiveDef;

CORBA::_impl_PrimitiveDef::~_impl_PrimitiveDef() {}

CORBA::Boolean
CORBA::_impl_PrimitiveDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_kind") ) {    
    giop_s.RequestReceived();
    PrimitiveKind result = this->kind();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_PrimitiveDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::PrimitiveDef::_PD_repoId) )
    return (_impl_PrimitiveDef*) this;
  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_PrimitiveDef::_mostDerivedRepoId()
{
  return CORBA::PrimitiveDef::_PD_repoId;
}

CORBA::StringDef_ptr CORBA::StringDef_Helper::_nil() {
  return CORBA::StringDef::_nil();
}

CORBA::Boolean CORBA::StringDef_Helper::is_nil(CORBA::StringDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::StringDef_Helper::release(CORBA::StringDef_ptr p) {
  CORBA::release(p);
}

void CORBA::StringDef_Helper::duplicate(CORBA::StringDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::StringDef_Helper::NP_alignedSize(CORBA::StringDef_ptr obj, size_t offset) {
  return CORBA::StringDef::_alignedSize(obj, offset);
}

void CORBA::StringDef_Helper::marshalObjRef(CORBA::StringDef_ptr obj, NetBufferedStream& s) {
  CORBA::StringDef::_marshalObjRef(obj, s);
}

CORBA::StringDef_ptr CORBA::StringDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::StringDef::_unmarshalObjRef(s);
}

void CORBA::StringDef_Helper::marshalObjRef(CORBA::StringDef_ptr obj, MemBufferedStream& s) {
  CORBA::StringDef::_marshalObjRef(obj, s);
}

CORBA::StringDef_ptr CORBA::StringDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::StringDef::_unmarshalObjRef(s);
}

CORBA::StringDef_ptr
CORBA::StringDef::_duplicate(CORBA::StringDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::StringDef_ptr
CORBA::StringDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::StringDef_ptr
CORBA::StringDef::_nil()
{
  static _objref_StringDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_StringDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::StringDef::_PD_repoId = "IDL:omg.org/CORBA/StringDef:1.0";

CORBA::_objref_StringDef::~_objref_StringDef() {}

CORBA::_objref_StringDef::_objref_StringDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::StringDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_StringDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::StringDef::_PD_repoId) )
    return (CORBA::StringDef_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cunsigned_plong
class _0RL_cd_7963219a43724a61_66000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_66000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ULong result() { return pd_result; }
  
  CORBA::ULong pd_result;
  
};

void _0RL_cd_7963219a43724a61_66000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong
class _0RL_cd_7963219a43724a61_76000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_76000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::ULong a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::ULong arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_76000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_76000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_86000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_66000000* tcd = (_0RL_cd_7963219a43724a61_66000000*) cd;
  CORBA::_impl_StringDef* impl = (CORBA::_impl_StringDef*) svnt->_ptrToInterface(CORBA::StringDef::_PD_repoId);
  tcd->pd_result = impl->bound();
}

CORBA::ULong CORBA::_objref_StringDef::bound()
{
  _0RL_cd_7963219a43724a61_66000000 _call_desc(_0RL_lcfn_7963219a43724a61_86000000, "_get_bound", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_96000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_76000000* tcd = (_0RL_cd_7963219a43724a61_76000000*) cd;
  CORBA::_impl_StringDef* impl = (CORBA::_impl_StringDef*) svnt->_ptrToInterface(CORBA::StringDef::_PD_repoId);
  impl->bound(tcd->arg_0);
}

void CORBA::_objref_StringDef::bound(CORBA::ULong arg_0)
{
  _0RL_cd_7963219a43724a61_76000000 _call_desc(_0RL_lcfn_7963219a43724a61_96000000, "_set_bound", 11, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_StringDef::~_pof_StringDef() {}

omniObjRef*
CORBA::_pof_StringDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_StringDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_StringDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::StringDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_StringDef _the_pof_CORBA_mStringDef;

CORBA::_impl_StringDef::~_impl_StringDef() {}

CORBA::Boolean
CORBA::_impl_StringDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_bound") ) {    
    giop_s.RequestReceived();
    CORBA::ULong result = this->bound();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_bound") ) {
    CORBA::ULong value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->bound(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_StringDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::StringDef::_PD_repoId) )
    return (_impl_StringDef*) this;
  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_StringDef::_mostDerivedRepoId()
{
  return CORBA::StringDef::_PD_repoId;
}

CORBA::WstringDef_ptr CORBA::WstringDef_Helper::_nil() {
  return CORBA::WstringDef::_nil();
}

CORBA::Boolean CORBA::WstringDef_Helper::is_nil(CORBA::WstringDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::WstringDef_Helper::release(CORBA::WstringDef_ptr p) {
  CORBA::release(p);
}

void CORBA::WstringDef_Helper::duplicate(CORBA::WstringDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::WstringDef_Helper::NP_alignedSize(CORBA::WstringDef_ptr obj, size_t offset) {
  return CORBA::WstringDef::_alignedSize(obj, offset);
}

void CORBA::WstringDef_Helper::marshalObjRef(CORBA::WstringDef_ptr obj, NetBufferedStream& s) {
  CORBA::WstringDef::_marshalObjRef(obj, s);
}

CORBA::WstringDef_ptr CORBA::WstringDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::WstringDef::_unmarshalObjRef(s);
}

void CORBA::WstringDef_Helper::marshalObjRef(CORBA::WstringDef_ptr obj, MemBufferedStream& s) {
  CORBA::WstringDef::_marshalObjRef(obj, s);
}

CORBA::WstringDef_ptr CORBA::WstringDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::WstringDef::_unmarshalObjRef(s);
}

CORBA::WstringDef_ptr
CORBA::WstringDef::_duplicate(CORBA::WstringDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::WstringDef_ptr
CORBA::WstringDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::WstringDef_ptr
CORBA::WstringDef::_nil()
{
  static _objref_WstringDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_WstringDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::WstringDef::_PD_repoId = "IDL:omg.org/CORBA/WstringDef:1.0";

CORBA::_objref_WstringDef::~_objref_WstringDef() {}

CORBA::_objref_WstringDef::_objref_WstringDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::WstringDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_WstringDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::WstringDef::_PD_repoId) )
    return (CORBA::WstringDef_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_66000000* tcd = (_0RL_cd_7963219a43724a61_66000000*) cd;
  CORBA::_impl_WstringDef* impl = (CORBA::_impl_WstringDef*) svnt->_ptrToInterface(CORBA::WstringDef::_PD_repoId);
  tcd->pd_result = impl->bound();
}

CORBA::ULong CORBA::_objref_WstringDef::bound()
{
  _0RL_cd_7963219a43724a61_66000000 _call_desc(_0RL_lcfn_7963219a43724a61_a6000000, "_get_bound", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_b6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_76000000* tcd = (_0RL_cd_7963219a43724a61_76000000*) cd;
  CORBA::_impl_WstringDef* impl = (CORBA::_impl_WstringDef*) svnt->_ptrToInterface(CORBA::WstringDef::_PD_repoId);
  impl->bound(tcd->arg_0);
}

void CORBA::_objref_WstringDef::bound(CORBA::ULong arg_0)
{
  _0RL_cd_7963219a43724a61_76000000 _call_desc(_0RL_lcfn_7963219a43724a61_b6000000, "_set_bound", 11, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_WstringDef::~_pof_WstringDef() {}

omniObjRef*
CORBA::_pof_WstringDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_WstringDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_WstringDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::WstringDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_WstringDef _the_pof_CORBA_mWstringDef;

CORBA::_impl_WstringDef::~_impl_WstringDef() {}

CORBA::Boolean
CORBA::_impl_WstringDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_bound") ) {    
    giop_s.RequestReceived();
    CORBA::ULong result = this->bound();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_bound") ) {
    CORBA::ULong value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->bound(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_WstringDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::WstringDef::_PD_repoId) )
    return (_impl_WstringDef*) this;
  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_WstringDef::_mostDerivedRepoId()
{
  return CORBA::WstringDef::_PD_repoId;
}

CORBA::FixedDef_ptr CORBA::FixedDef_Helper::_nil() {
  return CORBA::FixedDef::_nil();
}

CORBA::Boolean CORBA::FixedDef_Helper::is_nil(CORBA::FixedDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::FixedDef_Helper::release(CORBA::FixedDef_ptr p) {
  CORBA::release(p);
}

void CORBA::FixedDef_Helper::duplicate(CORBA::FixedDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::FixedDef_Helper::NP_alignedSize(CORBA::FixedDef_ptr obj, size_t offset) {
  return CORBA::FixedDef::_alignedSize(obj, offset);
}

void CORBA::FixedDef_Helper::marshalObjRef(CORBA::FixedDef_ptr obj, NetBufferedStream& s) {
  CORBA::FixedDef::_marshalObjRef(obj, s);
}

CORBA::FixedDef_ptr CORBA::FixedDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::FixedDef::_unmarshalObjRef(s);
}

void CORBA::FixedDef_Helper::marshalObjRef(CORBA::FixedDef_ptr obj, MemBufferedStream& s) {
  CORBA::FixedDef::_marshalObjRef(obj, s);
}

CORBA::FixedDef_ptr CORBA::FixedDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::FixedDef::_unmarshalObjRef(s);
}

CORBA::FixedDef_ptr
CORBA::FixedDef::_duplicate(CORBA::FixedDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::FixedDef_ptr
CORBA::FixedDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::FixedDef_ptr
CORBA::FixedDef::_nil()
{
  static _objref_FixedDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_FixedDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::FixedDef::_PD_repoId = "IDL:omg.org/CORBA/FixedDef:1.0";

CORBA::_objref_FixedDef::~_objref_FixedDef() {}

CORBA::_objref_FixedDef::_objref_FixedDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::FixedDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_FixedDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::FixedDef::_PD_repoId) )
    return (CORBA::FixedDef_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cunsigned_pshort
class _0RL_cd_7963219a43724a61_c6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_c6000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::UShort result() { return pd_result; }
  
  CORBA::UShort pd_result;
  
};

void _0RL_cd_7963219a43724a61_c6000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_pshort
class _0RL_cd_7963219a43724a61_d6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_d6000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::UShort a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::UShort arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_d6000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_d6000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_c6000000* tcd = (_0RL_cd_7963219a43724a61_c6000000*) cd;
  CORBA::_impl_FixedDef* impl = (CORBA::_impl_FixedDef*) svnt->_ptrToInterface(CORBA::FixedDef::_PD_repoId);
  tcd->pd_result = impl->digits();
}

CORBA::UShort CORBA::_objref_FixedDef::digits()
{
  _0RL_cd_7963219a43724a61_c6000000 _call_desc(_0RL_lcfn_7963219a43724a61_e6000000, "_get_digits", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_f6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_d6000000* tcd = (_0RL_cd_7963219a43724a61_d6000000*) cd;
  CORBA::_impl_FixedDef* impl = (CORBA::_impl_FixedDef*) svnt->_ptrToInterface(CORBA::FixedDef::_PD_repoId);
  impl->digits(tcd->arg_0);
}

void CORBA::_objref_FixedDef::digits(CORBA::UShort arg_0)
{
  _0RL_cd_7963219a43724a61_d6000000 _call_desc(_0RL_lcfn_7963219a43724a61_f6000000, "_set_digits", 12, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cshort
class _0RL_cd_7963219a43724a61_07000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_07000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Short result() { return pd_result; }
  
  CORBA::Short pd_result;
  
};

void _0RL_cd_7963219a43724a61_07000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cshort
class _0RL_cd_7963219a43724a61_17000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_17000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Short a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Short arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_17000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_17000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_27000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_07000000* tcd = (_0RL_cd_7963219a43724a61_07000000*) cd;
  CORBA::_impl_FixedDef* impl = (CORBA::_impl_FixedDef*) svnt->_ptrToInterface(CORBA::FixedDef::_PD_repoId);
  tcd->pd_result = impl->scale();
}

CORBA::Short CORBA::_objref_FixedDef::scale()
{
  _0RL_cd_7963219a43724a61_07000000 _call_desc(_0RL_lcfn_7963219a43724a61_27000000, "_get_scale", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_37000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_17000000* tcd = (_0RL_cd_7963219a43724a61_17000000*) cd;
  CORBA::_impl_FixedDef* impl = (CORBA::_impl_FixedDef*) svnt->_ptrToInterface(CORBA::FixedDef::_PD_repoId);
  impl->scale(tcd->arg_0);
}

void CORBA::_objref_FixedDef::scale(CORBA::Short arg_0)
{
  _0RL_cd_7963219a43724a61_17000000 _call_desc(_0RL_lcfn_7963219a43724a61_37000000, "_set_scale", 11, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_FixedDef::~_pof_FixedDef() {}

omniObjRef*
CORBA::_pof_FixedDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_FixedDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_FixedDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::FixedDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_FixedDef _the_pof_CORBA_mFixedDef;

CORBA::_impl_FixedDef::~_impl_FixedDef() {}

CORBA::Boolean
CORBA::_impl_FixedDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_digits") ) {    
    giop_s.RequestReceived();
    CORBA::UShort result = this->digits();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_digits") ) {
    CORBA::UShort value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->digits(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_scale") ) {    
    giop_s.RequestReceived();
    CORBA::Short result = this->scale();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_scale") ) {
    CORBA::Short value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->scale(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_FixedDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::FixedDef::_PD_repoId) )
    return (_impl_FixedDef*) this;
  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_FixedDef::_mostDerivedRepoId()
{
  return CORBA::FixedDef::_PD_repoId;
}

CORBA::SequenceDef_ptr CORBA::SequenceDef_Helper::_nil() {
  return CORBA::SequenceDef::_nil();
}

CORBA::Boolean CORBA::SequenceDef_Helper::is_nil(CORBA::SequenceDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::SequenceDef_Helper::release(CORBA::SequenceDef_ptr p) {
  CORBA::release(p);
}

void CORBA::SequenceDef_Helper::duplicate(CORBA::SequenceDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::SequenceDef_Helper::NP_alignedSize(CORBA::SequenceDef_ptr obj, size_t offset) {
  return CORBA::SequenceDef::_alignedSize(obj, offset);
}

void CORBA::SequenceDef_Helper::marshalObjRef(CORBA::SequenceDef_ptr obj, NetBufferedStream& s) {
  CORBA::SequenceDef::_marshalObjRef(obj, s);
}

CORBA::SequenceDef_ptr CORBA::SequenceDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::SequenceDef::_unmarshalObjRef(s);
}

void CORBA::SequenceDef_Helper::marshalObjRef(CORBA::SequenceDef_ptr obj, MemBufferedStream& s) {
  CORBA::SequenceDef::_marshalObjRef(obj, s);
}

CORBA::SequenceDef_ptr CORBA::SequenceDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::SequenceDef::_unmarshalObjRef(s);
}

CORBA::SequenceDef_ptr
CORBA::SequenceDef::_duplicate(CORBA::SequenceDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::SequenceDef_ptr
CORBA::SequenceDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::SequenceDef_ptr
CORBA::SequenceDef::_nil()
{
  static _objref_SequenceDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_SequenceDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::SequenceDef::_PD_repoId = "IDL:omg.org/CORBA/SequenceDef:1.0";

CORBA::_objref_SequenceDef::~_objref_SequenceDef() {}

CORBA::_objref_SequenceDef::_objref_SequenceDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::SequenceDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_SequenceDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::SequenceDef::_PD_repoId) )
    return (CORBA::SequenceDef_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_47000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_66000000* tcd = (_0RL_cd_7963219a43724a61_66000000*) cd;
  CORBA::_impl_SequenceDef* impl = (CORBA::_impl_SequenceDef*) svnt->_ptrToInterface(CORBA::SequenceDef::_PD_repoId);
  tcd->pd_result = impl->bound();
}

CORBA::ULong CORBA::_objref_SequenceDef::bound()
{
  _0RL_cd_7963219a43724a61_66000000 _call_desc(_0RL_lcfn_7963219a43724a61_47000000, "_get_bound", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_57000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_76000000* tcd = (_0RL_cd_7963219a43724a61_76000000*) cd;
  CORBA::_impl_SequenceDef* impl = (CORBA::_impl_SequenceDef*) svnt->_ptrToInterface(CORBA::SequenceDef::_PD_repoId);
  impl->bound(tcd->arg_0);
}

void CORBA::_objref_SequenceDef::bound(CORBA::ULong arg_0)
{
  _0RL_cd_7963219a43724a61_76000000 _call_desc(_0RL_lcfn_7963219a43724a61_57000000, "_set_bound", 11, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_67000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_SequenceDef* impl = (CORBA::_impl_SequenceDef*) svnt->_ptrToInterface(CORBA::SequenceDef::_PD_repoId);
  tcd->pd_result = impl->element_type();
}

CORBA::TypeCode_ptr CORBA::_objref_SequenceDef::element_type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_67000000, "_get_element_type", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_77000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_SequenceDef* impl = (CORBA::_impl_SequenceDef*) svnt->_ptrToInterface(CORBA::SequenceDef::_PD_repoId);
  tcd->pd_result = impl->element_type_def();
}

CORBA::IDLType_ptr CORBA::_objref_SequenceDef::element_type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_77000000, "_get_element_type_def", 22, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_87000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_SequenceDef* impl = (CORBA::_impl_SequenceDef*) svnt->_ptrToInterface(CORBA::SequenceDef::_PD_repoId);
  impl->element_type_def(tcd->arg_0);
}

void CORBA::_objref_SequenceDef::element_type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_87000000, "_set_element_type_def", 22, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_SequenceDef::~_pof_SequenceDef() {}

omniObjRef*
CORBA::_pof_SequenceDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_SequenceDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_SequenceDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::SequenceDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_SequenceDef _the_pof_CORBA_mSequenceDef;

CORBA::_impl_SequenceDef::~_impl_SequenceDef() {}

CORBA::Boolean
CORBA::_impl_SequenceDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_bound") ) {    
    giop_s.RequestReceived();
    CORBA::ULong result = this->bound();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_bound") ) {
    CORBA::ULong value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->bound(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_element_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->element_type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_element_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->element_type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_element_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->element_type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_SequenceDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::SequenceDef::_PD_repoId) )
    return (_impl_SequenceDef*) this;
  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_SequenceDef::_mostDerivedRepoId()
{
  return CORBA::SequenceDef::_PD_repoId;
}

CORBA::ArrayDef_ptr CORBA::ArrayDef_Helper::_nil() {
  return CORBA::ArrayDef::_nil();
}

CORBA::Boolean CORBA::ArrayDef_Helper::is_nil(CORBA::ArrayDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::ArrayDef_Helper::release(CORBA::ArrayDef_ptr p) {
  CORBA::release(p);
}

void CORBA::ArrayDef_Helper::duplicate(CORBA::ArrayDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::ArrayDef_Helper::NP_alignedSize(CORBA::ArrayDef_ptr obj, size_t offset) {
  return CORBA::ArrayDef::_alignedSize(obj, offset);
}

void CORBA::ArrayDef_Helper::marshalObjRef(CORBA::ArrayDef_ptr obj, NetBufferedStream& s) {
  CORBA::ArrayDef::_marshalObjRef(obj, s);
}

CORBA::ArrayDef_ptr CORBA::ArrayDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::ArrayDef::_unmarshalObjRef(s);
}

void CORBA::ArrayDef_Helper::marshalObjRef(CORBA::ArrayDef_ptr obj, MemBufferedStream& s) {
  CORBA::ArrayDef::_marshalObjRef(obj, s);
}

CORBA::ArrayDef_ptr CORBA::ArrayDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::ArrayDef::_unmarshalObjRef(s);
}

CORBA::ArrayDef_ptr
CORBA::ArrayDef::_duplicate(CORBA::ArrayDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::ArrayDef_ptr
CORBA::ArrayDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::ArrayDef_ptr
CORBA::ArrayDef::_nil()
{
  static _objref_ArrayDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_ArrayDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::ArrayDef::_PD_repoId = "IDL:omg.org/CORBA/ArrayDef:1.0";

CORBA::_objref_ArrayDef::~_objref_ArrayDef() {}

CORBA::_objref_ArrayDef::_objref_ArrayDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::ArrayDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_ArrayDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::ArrayDef::_PD_repoId) )
    return (CORBA::ArrayDef_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_97000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_66000000* tcd = (_0RL_cd_7963219a43724a61_66000000*) cd;
  CORBA::_impl_ArrayDef* impl = (CORBA::_impl_ArrayDef*) svnt->_ptrToInterface(CORBA::ArrayDef::_PD_repoId);
  tcd->pd_result = impl->length();
}

CORBA::ULong CORBA::_objref_ArrayDef::length()
{
  _0RL_cd_7963219a43724a61_66000000 _call_desc(_0RL_lcfn_7963219a43724a61_97000000, "_get_length", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_76000000* tcd = (_0RL_cd_7963219a43724a61_76000000*) cd;
  CORBA::_impl_ArrayDef* impl = (CORBA::_impl_ArrayDef*) svnt->_ptrToInterface(CORBA::ArrayDef::_PD_repoId);
  impl->length(tcd->arg_0);
}

void CORBA::_objref_ArrayDef::length(CORBA::ULong arg_0)
{
  _0RL_cd_7963219a43724a61_76000000 _call_desc(_0RL_lcfn_7963219a43724a61_a7000000, "_set_length", 12, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_b7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_ArrayDef* impl = (CORBA::_impl_ArrayDef*) svnt->_ptrToInterface(CORBA::ArrayDef::_PD_repoId);
  tcd->pd_result = impl->element_type();
}

CORBA::TypeCode_ptr CORBA::_objref_ArrayDef::element_type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_b7000000, "_get_element_type", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_ArrayDef* impl = (CORBA::_impl_ArrayDef*) svnt->_ptrToInterface(CORBA::ArrayDef::_PD_repoId);
  tcd->pd_result = impl->element_type_def();
}

CORBA::IDLType_ptr CORBA::_objref_ArrayDef::element_type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_c7000000, "_get_element_type_def", 22, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_d7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_ArrayDef* impl = (CORBA::_impl_ArrayDef*) svnt->_ptrToInterface(CORBA::ArrayDef::_PD_repoId);
  impl->element_type_def(tcd->arg_0);
}

void CORBA::_objref_ArrayDef::element_type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_d7000000, "_set_element_type_def", 22, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_ArrayDef::~_pof_ArrayDef() {}

omniObjRef*
CORBA::_pof_ArrayDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_ArrayDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_ArrayDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::ArrayDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_ArrayDef _the_pof_CORBA_mArrayDef;

CORBA::_impl_ArrayDef::~_impl_ArrayDef() {}

CORBA::Boolean
CORBA::_impl_ArrayDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_length") ) {    
    giop_s.RequestReceived();
    CORBA::ULong result = this->length();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_length") ) {
    CORBA::ULong value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->length(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_element_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->element_type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_element_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->element_type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_element_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->element_type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_ArrayDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::ArrayDef::_PD_repoId) )
    return (_impl_ArrayDef*) this;
  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_ArrayDef::_mostDerivedRepoId()
{
  return CORBA::ArrayDef::_PD_repoId;
}

CORBA::ExceptionDef_ptr CORBA::ExceptionDef_Helper::_nil() {
  return CORBA::ExceptionDef::_nil();
}

CORBA::Boolean CORBA::ExceptionDef_Helper::is_nil(CORBA::ExceptionDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::ExceptionDef_Helper::release(CORBA::ExceptionDef_ptr p) {
  CORBA::release(p);
}

void CORBA::ExceptionDef_Helper::duplicate(CORBA::ExceptionDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::ExceptionDef_Helper::NP_alignedSize(CORBA::ExceptionDef_ptr obj, size_t offset) {
  return CORBA::ExceptionDef::_alignedSize(obj, offset);
}

void CORBA::ExceptionDef_Helper::marshalObjRef(CORBA::ExceptionDef_ptr obj, NetBufferedStream& s) {
  CORBA::ExceptionDef::_marshalObjRef(obj, s);
}

CORBA::ExceptionDef_ptr CORBA::ExceptionDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::ExceptionDef::_unmarshalObjRef(s);
}

void CORBA::ExceptionDef_Helper::marshalObjRef(CORBA::ExceptionDef_ptr obj, MemBufferedStream& s) {
  CORBA::ExceptionDef::_marshalObjRef(obj, s);
}

CORBA::ExceptionDef_ptr CORBA::ExceptionDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::ExceptionDef::_unmarshalObjRef(s);
}

CORBA::ExceptionDef_ptr
CORBA::ExceptionDef::_duplicate(CORBA::ExceptionDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::ExceptionDef_ptr
CORBA::ExceptionDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::ExceptionDef_ptr
CORBA::ExceptionDef::_nil()
{
  static _objref_ExceptionDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_ExceptionDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::ExceptionDef::_PD_repoId = "IDL:omg.org/CORBA/ExceptionDef:1.0";

CORBA::_objref_ExceptionDef::~_objref_ExceptionDef() {}

CORBA::_objref_ExceptionDef::_objref_ExceptionDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_Container(mdri, p, id, lid),
   
   omniObjRef(CORBA::ExceptionDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_ExceptionDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::ExceptionDef::_PD_repoId) )
    return (CORBA::ExceptionDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_ExceptionDef* impl = (CORBA::_impl_ExceptionDef*) svnt->_ptrToInterface(CORBA::ExceptionDef::_PD_repoId);
  tcd->pd_result = impl->type();
}

CORBA::TypeCode_ptr CORBA::_objref_ExceptionDef::type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_e7000000, "_get_type", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_f7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_25000000* tcd = (_0RL_cd_7963219a43724a61_25000000*) cd;
  CORBA::_impl_ExceptionDef* impl = (CORBA::_impl_ExceptionDef*) svnt->_ptrToInterface(CORBA::ExceptionDef::_PD_repoId);
  tcd->pd_result = impl->members();
}

CORBA::StructMemberSeq* CORBA::_objref_ExceptionDef::members()
{
  _0RL_cd_7963219a43724a61_25000000 _call_desc(_0RL_lcfn_7963219a43724a61_f7000000, "_get_members", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_08000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_35000000* tcd = (_0RL_cd_7963219a43724a61_35000000*) cd;
  CORBA::_impl_ExceptionDef* impl = (CORBA::_impl_ExceptionDef*) svnt->_ptrToInterface(CORBA::ExceptionDef::_PD_repoId);
  impl->members(tcd->arg_0);
}

void CORBA::_objref_ExceptionDef::members(const StructMemberSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_35000000 _call_desc(_0RL_lcfn_7963219a43724a61_08000000, "_set_members", 13, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_ExceptionDef::~_pof_ExceptionDef() {}

omniObjRef*
CORBA::_pof_ExceptionDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_ExceptionDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_ExceptionDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::ExceptionDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_ExceptionDef _the_pof_CORBA_mExceptionDef;

CORBA::_impl_ExceptionDef::~_impl_ExceptionDef() {}

CORBA::Boolean
CORBA::_impl_ExceptionDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_members") ) {    
    giop_s.RequestReceived();
    StructMemberSeq_var result = this->members();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_members") ) {
    StructMemberSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->members(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_Container::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_ExceptionDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::ExceptionDef::_PD_repoId) )
    return (_impl_ExceptionDef*) this;
  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_ExceptionDef::_mostDerivedRepoId()
{
  return CORBA::ExceptionDef::_PD_repoId;
}

size_t
CORBA::ExceptionDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::ExceptionDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  
}

void
CORBA::ExceptionDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  
}

void
CORBA::ExceptionDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  
}

void
CORBA::ExceptionDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  
}

CORBA::AttributeDef_ptr CORBA::AttributeDef_Helper::_nil() {
  return CORBA::AttributeDef::_nil();
}

CORBA::Boolean CORBA::AttributeDef_Helper::is_nil(CORBA::AttributeDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::AttributeDef_Helper::release(CORBA::AttributeDef_ptr p) {
  CORBA::release(p);
}

void CORBA::AttributeDef_Helper::duplicate(CORBA::AttributeDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::AttributeDef_Helper::NP_alignedSize(CORBA::AttributeDef_ptr obj, size_t offset) {
  return CORBA::AttributeDef::_alignedSize(obj, offset);
}

void CORBA::AttributeDef_Helper::marshalObjRef(CORBA::AttributeDef_ptr obj, NetBufferedStream& s) {
  CORBA::AttributeDef::_marshalObjRef(obj, s);
}

CORBA::AttributeDef_ptr CORBA::AttributeDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::AttributeDef::_unmarshalObjRef(s);
}

void CORBA::AttributeDef_Helper::marshalObjRef(CORBA::AttributeDef_ptr obj, MemBufferedStream& s) {
  CORBA::AttributeDef::_marshalObjRef(obj, s);
}

CORBA::AttributeDef_ptr CORBA::AttributeDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::AttributeDef::_unmarshalObjRef(s);
}

CORBA::AttributeDef_ptr
CORBA::AttributeDef::_duplicate(CORBA::AttributeDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::AttributeDef_ptr
CORBA::AttributeDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::AttributeDef_ptr
CORBA::AttributeDef::_nil()
{
  static _objref_AttributeDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_AttributeDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::AttributeDef::_PD_repoId = "IDL:omg.org/CORBA/AttributeDef:1.0";

CORBA::_objref_AttributeDef::~_objref_AttributeDef() {}

CORBA::_objref_AttributeDef::_objref_AttributeDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   
   omniObjRef(CORBA::AttributeDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_AttributeDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::AttributeDef::_PD_repoId) )
    return (CORBA::AttributeDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_18000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_AttributeDef* impl = (CORBA::_impl_AttributeDef*) svnt->_ptrToInterface(CORBA::AttributeDef::_PD_repoId);
  tcd->pd_result = impl->type();
}

CORBA::TypeCode_ptr CORBA::_objref_AttributeDef::type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_18000000, "_get_type", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_28000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_AttributeDef* impl = (CORBA::_impl_AttributeDef*) svnt->_ptrToInterface(CORBA::AttributeDef::_PD_repoId);
  tcd->pd_result = impl->type_def();
}

CORBA::IDLType_ptr CORBA::_objref_AttributeDef::type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_28000000, "_get_type_def", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_38000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_AttributeDef* impl = (CORBA::_impl_AttributeDef*) svnt->_ptrToInterface(CORBA::AttributeDef::_PD_repoId);
  impl->type_def(tcd->arg_0);
}

void CORBA::_objref_AttributeDef::type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_38000000, "_set_type_def", 14, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mAttributeMode
class _0RL_cd_7963219a43724a61_48000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_48000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::AttributeMode result() { return pd_result; }
  
  CORBA::AttributeMode pd_result;
  
};

void _0RL_cd_7963219a43724a61_48000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mAttributeMode
class _0RL_cd_7963219a43724a61_58000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_58000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::AttributeMode a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::AttributeMode arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_58000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_58000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_68000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_48000000* tcd = (_0RL_cd_7963219a43724a61_48000000*) cd;
  CORBA::_impl_AttributeDef* impl = (CORBA::_impl_AttributeDef*) svnt->_ptrToInterface(CORBA::AttributeDef::_PD_repoId);
  tcd->pd_result = impl->mode();
}

CORBA::AttributeMode CORBA::_objref_AttributeDef::mode()
{
  _0RL_cd_7963219a43724a61_48000000 _call_desc(_0RL_lcfn_7963219a43724a61_68000000, "_get_mode", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_78000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_58000000* tcd = (_0RL_cd_7963219a43724a61_58000000*) cd;
  CORBA::_impl_AttributeDef* impl = (CORBA::_impl_AttributeDef*) svnt->_ptrToInterface(CORBA::AttributeDef::_PD_repoId);
  impl->mode(tcd->arg_0);
}

void CORBA::_objref_AttributeDef::mode(AttributeMode arg_0)
{
  _0RL_cd_7963219a43724a61_58000000 _call_desc(_0RL_lcfn_7963219a43724a61_78000000, "_set_mode", 10, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_AttributeDef::~_pof_AttributeDef() {}

omniObjRef*
CORBA::_pof_AttributeDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_AttributeDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_AttributeDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::AttributeDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_AttributeDef _the_pof_CORBA_mAttributeDef;

CORBA::_impl_AttributeDef::~_impl_AttributeDef() {}

CORBA::Boolean
CORBA::_impl_AttributeDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_mode") ) {    
    giop_s.RequestReceived();
    AttributeMode result = this->mode();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_mode") ) {
    AttributeMode value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->mode(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_AttributeDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::AttributeDef::_PD_repoId) )
    return (_impl_AttributeDef*) this;
  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_AttributeDef::_mostDerivedRepoId()
{
  return CORBA::AttributeDef::_PD_repoId;
}

size_t
CORBA::AttributeDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;

  return _msgsize;
}

void
CORBA::AttributeDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  mode >>= _n;
  
}

void
CORBA::AttributeDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  mode <<= _n;
  
}

void
CORBA::AttributeDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  mode >>= _n;
  
}

void
CORBA::AttributeDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  mode <<= _n;
  
}

size_t
CORBA::ParameterDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  _msgsize = type_def._NP_alignedSize(_msgsize);

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;

  return _msgsize;
}

void
CORBA::ParameterDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  type >>= _n;
  type_def >>= _n;
  mode >>= _n;
  
}

void
CORBA::ParameterDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  type <<= _n;
  type_def <<= _n;
  mode <<= _n;
  
}

void
CORBA::ParameterDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  type >>= _n;
  type_def >>= _n;
  mode >>= _n;
  
}

void
CORBA::ParameterDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  type <<= _n;
  type_def <<= _n;
  mode <<= _n;
  
}

CORBA::OperationDef_ptr CORBA::OperationDef_Helper::_nil() {
  return CORBA::OperationDef::_nil();
}

CORBA::Boolean CORBA::OperationDef_Helper::is_nil(CORBA::OperationDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::OperationDef_Helper::release(CORBA::OperationDef_ptr p) {
  CORBA::release(p);
}

void CORBA::OperationDef_Helper::duplicate(CORBA::OperationDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::OperationDef_Helper::NP_alignedSize(CORBA::OperationDef_ptr obj, size_t offset) {
  return CORBA::OperationDef::_alignedSize(obj, offset);
}

void CORBA::OperationDef_Helper::marshalObjRef(CORBA::OperationDef_ptr obj, NetBufferedStream& s) {
  CORBA::OperationDef::_marshalObjRef(obj, s);
}

CORBA::OperationDef_ptr CORBA::OperationDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::OperationDef::_unmarshalObjRef(s);
}

void CORBA::OperationDef_Helper::marshalObjRef(CORBA::OperationDef_ptr obj, MemBufferedStream& s) {
  CORBA::OperationDef::_marshalObjRef(obj, s);
}

CORBA::OperationDef_ptr CORBA::OperationDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::OperationDef::_unmarshalObjRef(s);
}

CORBA::OperationDef_ptr
CORBA::OperationDef::_duplicate(CORBA::OperationDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::OperationDef_ptr
CORBA::OperationDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::OperationDef_ptr
CORBA::OperationDef::_nil()
{
  static _objref_OperationDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_OperationDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::OperationDef::_PD_repoId = "IDL:omg.org/CORBA/OperationDef:1.0";

CORBA::_objref_OperationDef::~_objref_OperationDef() {}

CORBA::_objref_OperationDef::_objref_OperationDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   
   omniObjRef(CORBA::OperationDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_OperationDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::OperationDef::_PD_repoId) )
    return (CORBA::OperationDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_88000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  tcd->pd_result = impl->result();
}

CORBA::TypeCode_ptr CORBA::_objref_OperationDef::result()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_88000000, "_get_result", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_98000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  tcd->pd_result = impl->result_def();
}

CORBA::IDLType_ptr CORBA::_objref_OperationDef::result_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_98000000, "_get_result_def", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  impl->result_def(tcd->arg_0);
}

void CORBA::_objref_OperationDef::result_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_a8000000, "_set_result_def", 16, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mParDescriptionSeq
class _0RL_cd_7963219a43724a61_b8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_b8000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ParDescriptionSeq* result() { return pd_result; }
  
  CORBA::ParDescriptionSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_b8000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::ParDescriptionSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mParDescriptionSeq
class _0RL_cd_7963219a43724a61_c8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_c8000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::ParDescriptionSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::ParDescriptionSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_c8000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_c8000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_d8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b8000000* tcd = (_0RL_cd_7963219a43724a61_b8000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  tcd->pd_result = impl->params();
}

CORBA::ParDescriptionSeq* CORBA::_objref_OperationDef::params()
{
  _0RL_cd_7963219a43724a61_b8000000 _call_desc(_0RL_lcfn_7963219a43724a61_d8000000, "_get_params", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_c8000000* tcd = (_0RL_cd_7963219a43724a61_c8000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  impl->params(tcd->arg_0);
}

void CORBA::_objref_OperationDef::params(const ParDescriptionSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_c8000000 _call_desc(_0RL_lcfn_7963219a43724a61_e8000000, "_set_params", 12, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mOperationMode
class _0RL_cd_7963219a43724a61_f8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_f8000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::OperationMode result() { return pd_result; }
  
  CORBA::OperationMode pd_result;
  
};

void _0RL_cd_7963219a43724a61_f8000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mOperationMode
class _0RL_cd_7963219a43724a61_09000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_09000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::OperationMode a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::OperationMode arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_09000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_09000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_19000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_f8000000* tcd = (_0RL_cd_7963219a43724a61_f8000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  tcd->pd_result = impl->mode();
}

CORBA::OperationMode CORBA::_objref_OperationDef::mode()
{
  _0RL_cd_7963219a43724a61_f8000000 _call_desc(_0RL_lcfn_7963219a43724a61_19000000, "_get_mode", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_29000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_09000000* tcd = (_0RL_cd_7963219a43724a61_09000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  impl->mode(tcd->arg_0);
}

void CORBA::_objref_OperationDef::mode(OperationMode arg_0)
{
  _0RL_cd_7963219a43724a61_09000000 _call_desc(_0RL_lcfn_7963219a43724a61_29000000, "_set_mode", 10, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mContextIdSeq
class _0RL_cd_7963219a43724a61_39000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_39000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ContextIdSeq* result() { return pd_result; }
  
  CORBA::ContextIdSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_39000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::ContextIdSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mContextIdSeq
class _0RL_cd_7963219a43724a61_49000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_49000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::ContextIdSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::ContextIdSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_49000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_49000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_59000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_39000000* tcd = (_0RL_cd_7963219a43724a61_39000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  tcd->pd_result = impl->contexts();
}

CORBA::ContextIdSeq* CORBA::_objref_OperationDef::contexts()
{
  _0RL_cd_7963219a43724a61_39000000 _call_desc(_0RL_lcfn_7963219a43724a61_59000000, "_get_contexts", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_69000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_49000000* tcd = (_0RL_cd_7963219a43724a61_49000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  impl->contexts(tcd->arg_0);
}

void CORBA::_objref_OperationDef::contexts(const ContextIdSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_49000000 _call_desc(_0RL_lcfn_7963219a43724a61_69000000, "_set_contexts", 14, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mExceptionDefSeq
class _0RL_cd_7963219a43724a61_79000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_79000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ExceptionDefSeq* result() { return pd_result; }
  
  CORBA::ExceptionDefSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_79000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::ExceptionDefSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mExceptionDefSeq
class _0RL_cd_7963219a43724a61_89000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_89000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::ExceptionDefSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::ExceptionDefSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_89000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_89000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_99000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_79000000* tcd = (_0RL_cd_7963219a43724a61_79000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  tcd->pd_result = impl->exceptions();
}

CORBA::ExceptionDefSeq* CORBA::_objref_OperationDef::exceptions()
{
  _0RL_cd_7963219a43724a61_79000000 _call_desc(_0RL_lcfn_7963219a43724a61_99000000, "_get_exceptions", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_a9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_89000000* tcd = (_0RL_cd_7963219a43724a61_89000000*) cd;
  CORBA::_impl_OperationDef* impl = (CORBA::_impl_OperationDef*) svnt->_ptrToInterface(CORBA::OperationDef::_PD_repoId);
  impl->exceptions(tcd->arg_0);
}

void CORBA::_objref_OperationDef::exceptions(const ExceptionDefSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_89000000 _call_desc(_0RL_lcfn_7963219a43724a61_a9000000, "_set_exceptions", 16, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_OperationDef::~_pof_OperationDef() {}

omniObjRef*
CORBA::_pof_OperationDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_OperationDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_OperationDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::OperationDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_OperationDef _the_pof_CORBA_mOperationDef;

CORBA::_impl_OperationDef::~_impl_OperationDef() {}

CORBA::Boolean
CORBA::_impl_OperationDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_result") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->result();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_result_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->result_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_result_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->result_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_params") ) {    
    giop_s.RequestReceived();
    ParDescriptionSeq_var result = this->params();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_params") ) {
    ParDescriptionSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->params(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_mode") ) {    
    giop_s.RequestReceived();
    OperationMode result = this->mode();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_mode") ) {
    OperationMode value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->mode(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_contexts") ) {    
    giop_s.RequestReceived();
    ContextIdSeq_var result = this->contexts();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_contexts") ) {
    ContextIdSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->contexts(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_exceptions") ) {    
    giop_s.RequestReceived();
    ExceptionDefSeq_var result = this->exceptions();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_exceptions") ) {
    ExceptionDefSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->exceptions(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_OperationDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::OperationDef::_PD_repoId) )
    return (_impl_OperationDef*) this;
  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_OperationDef::_mostDerivedRepoId()
{
  return CORBA::OperationDef::_PD_repoId;
}

size_t
CORBA::OperationDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = result._NP_alignedSize(_msgsize);

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;

  _msgsize = contexts._NP_alignedSize(_msgsize);

  _msgsize = parameters._NP_alignedSize(_msgsize);

  _msgsize = exceptions._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::OperationDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  result >>= _n;
  mode >>= _n;
  contexts >>= _n;
  parameters >>= _n;
  exceptions >>= _n;
  
}

void
CORBA::OperationDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  result <<= _n;
  mode <<= _n;
  contexts <<= _n;
  parameters <<= _n;
  exceptions <<= _n;
  
}

void
CORBA::OperationDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  result >>= _n;
  mode >>= _n;
  contexts >>= _n;
  parameters >>= _n;
  exceptions >>= _n;
  
}

void
CORBA::OperationDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  result <<= _n;
  mode <<= _n;
  contexts <<= _n;
  parameters <<= _n;
  exceptions <<= _n;
  
}

size_t
CORBA::InterfaceDef::FullInterfaceDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = operations._NP_alignedSize(_msgsize);

  _msgsize = attributes._NP_alignedSize(_msgsize);

  _msgsize = base_interfaces._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::InterfaceDef::FullInterfaceDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  operations >>= _n;
  attributes >>= _n;
  base_interfaces >>= _n;
  type >>= _n;
  
}

void
CORBA::InterfaceDef::FullInterfaceDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  operations <<= _n;
  attributes <<= _n;
  base_interfaces <<= _n;
  type <<= _n;
  
}

void
CORBA::InterfaceDef::FullInterfaceDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  operations >>= _n;
  attributes >>= _n;
  base_interfaces >>= _n;
  type >>= _n;
  
}

void
CORBA::InterfaceDef::FullInterfaceDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  operations <<= _n;
  attributes <<= _n;
  base_interfaces <<= _n;
  type <<= _n;
  
}

CORBA::InterfaceDef_ptr CORBA::InterfaceDef_Helper::_nil() {
  return CORBA::InterfaceDef::_nil();
}

CORBA::Boolean CORBA::InterfaceDef_Helper::is_nil(CORBA::InterfaceDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::InterfaceDef_Helper::release(CORBA::InterfaceDef_ptr p) {
  CORBA::release(p);
}

void CORBA::InterfaceDef_Helper::duplicate(CORBA::InterfaceDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::InterfaceDef_Helper::NP_alignedSize(CORBA::InterfaceDef_ptr obj, size_t offset) {
  return CORBA::InterfaceDef::_alignedSize(obj, offset);
}

void CORBA::InterfaceDef_Helper::marshalObjRef(CORBA::InterfaceDef_ptr obj, NetBufferedStream& s) {
  CORBA::InterfaceDef::_marshalObjRef(obj, s);
}

CORBA::InterfaceDef_ptr CORBA::InterfaceDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::InterfaceDef::_unmarshalObjRef(s);
}

void CORBA::InterfaceDef_Helper::marshalObjRef(CORBA::InterfaceDef_ptr obj, MemBufferedStream& s) {
  CORBA::InterfaceDef::_marshalObjRef(obj, s);
}

CORBA::InterfaceDef_ptr CORBA::InterfaceDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::InterfaceDef::_unmarshalObjRef(s);
}

CORBA::InterfaceDef_ptr
CORBA::InterfaceDef::_duplicate(CORBA::InterfaceDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::InterfaceDef_ptr
CORBA::InterfaceDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::InterfaceDef_ptr
CORBA::InterfaceDef::_nil()
{
  static _objref_InterfaceDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_InterfaceDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::InterfaceDef::_PD_repoId = "IDL:omg.org/CORBA/InterfaceDef:1.0";

CORBA::_objref_InterfaceDef::~_objref_InterfaceDef() {}

CORBA::_objref_InterfaceDef::_objref_InterfaceDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Container(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::InterfaceDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_InterfaceDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::InterfaceDef::_PD_repoId) )
    return (CORBA::InterfaceDef_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_7963219a43724a61_b9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_b9000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Boolean result() { return pd_result; }
  const char* arg_0;
  CORBA::Boolean pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_b9000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_b9000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_7963219a43724a61_b9000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_c9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b9000000* tcd = (_0RL_cd_7963219a43724a61_b9000000*) cd;
  CORBA::_impl_InterfaceDef* impl = (CORBA::_impl_InterfaceDef*) svnt->_ptrToInterface(CORBA::InterfaceDef::_PD_repoId);
  tcd->pd_result = impl->is_a(tcd->arg_0);
}

CORBA::Boolean CORBA::_objref_InterfaceDef::is_a(const char* interface_id)
{
  _0RL_cd_7963219a43724a61_b9000000 _call_desc(_0RL_lcfn_7963219a43724a61_c9000000, "is_a", 5, 0, interface_id);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mInterfaceDef_mFullInterfaceDescription
class _0RL_cd_7963219a43724a61_d9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_d9000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::InterfaceDef::FullInterfaceDescription* result() { return pd_result; }
  
  CORBA::InterfaceDef::FullInterfaceDescription* pd_result;
};

void _0RL_cd_7963219a43724a61_d9000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::InterfaceDef::FullInterfaceDescription;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_e9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_d9000000* tcd = (_0RL_cd_7963219a43724a61_d9000000*) cd;
  CORBA::_impl_InterfaceDef* impl = (CORBA::_impl_InterfaceDef*) svnt->_ptrToInterface(CORBA::InterfaceDef::_PD_repoId);
  tcd->pd_result = impl->describe_interface();
}

CORBA::InterfaceDef::FullInterfaceDescription* CORBA::_objref_InterfaceDef::describe_interface()
{
  _0RL_cd_7963219a43724a61_d9000000 _call_desc(_0RL_lcfn_7963219a43724a61_e9000000, "describe_interface", 19, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mAttributeDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mIDLType_i_cCORBA_mAttributeMode
class _0RL_cd_7963219a43724a61_f9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_f9000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::IDLType_ptr a_3, CORBA::AttributeMode a_4):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3),
     arg_4(a_4) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::AttributeDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::IDLType_ptr arg_3;
  CORBA::AttributeMode arg_4;
  CORBA::AttributeDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_f9000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_3, msgsize);
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_f9000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::IDLType_Helper::marshalObjRef(arg_3,giop_client);
  arg_4 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_f9000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::AttributeDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_0a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_f9000000* tcd = (_0RL_cd_7963219a43724a61_f9000000*) cd;
  CORBA::_impl_InterfaceDef* impl = (CORBA::_impl_InterfaceDef*) svnt->_ptrToInterface(CORBA::InterfaceDef::_PD_repoId);
  tcd->pd_result = impl->create_attribute(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
}

CORBA::AttributeDef_ptr CORBA::_objref_InterfaceDef::create_attribute(const char* id, const char* name, const char* version, IDLType_ptr type, AttributeMode mode)
{
  _0RL_cd_7963219a43724a61_f9000000 _call_desc(_0RL_lcfn_7963219a43724a61_0a000000, "create_attribute", 17, 0, id, name, version, type, mode);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mOperationDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mIDLType_i_cCORBA_mOperationMode_i_cCORBA_mParDescriptionSeq_i_cCORBA_mExceptionDefSeq_i_cCORBA_mContextIdSeq
class _0RL_cd_7963219a43724a61_1a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_1a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::IDLType_ptr a_3, CORBA::OperationMode a_4, const CORBA::ParDescriptionSeq& a_5, const CORBA::ExceptionDefSeq& a_6, const CORBA::ContextIdSeq& a_7):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3),
     arg_4(a_4),
     arg_5(a_5),
     arg_6(a_6),
     arg_7(a_7) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::OperationDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::IDLType_ptr arg_3;
  CORBA::OperationMode arg_4;
  const CORBA::ParDescriptionSeq& arg_5;
  const CORBA::ExceptionDefSeq& arg_6;
  const CORBA::ContextIdSeq& arg_7;
  CORBA::OperationDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_1a000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_3, msgsize);
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize = arg_5._NP_alignedSize(msgsize);
  
  msgsize = arg_6._NP_alignedSize(msgsize);
  
  msgsize = arg_7._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_1a000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::IDLType_Helper::marshalObjRef(arg_3,giop_client);
  arg_4 >>= giop_client;
  arg_5 >>= giop_client;
  arg_6 >>= giop_client;
  arg_7 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_1a000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::OperationDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_2a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_1a000000* tcd = (_0RL_cd_7963219a43724a61_1a000000*) cd;
  CORBA::_impl_InterfaceDef* impl = (CORBA::_impl_InterfaceDef*) svnt->_ptrToInterface(CORBA::InterfaceDef::_PD_repoId);
  tcd->pd_result = impl->create_operation(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6, tcd->arg_7);
}

CORBA::OperationDef_ptr CORBA::_objref_InterfaceDef::create_operation(const char* id, const char* name, const char* version, IDLType_ptr result, OperationMode mode, const ParDescriptionSeq& params, const ExceptionDefSeq& exceptions, const ContextIdSeq& contexts)
{
  _0RL_cd_7963219a43724a61_1a000000 _call_desc(_0RL_lcfn_7963219a43724a61_2a000000, "create_operation", 17, 0, id, name, version, result, mode, params, exceptions, contexts);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mInterfaceDefSeq
class _0RL_cd_7963219a43724a61_3a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_3a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::InterfaceDefSeq* result() { return pd_result; }
  
  CORBA::InterfaceDefSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_3a000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::InterfaceDefSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mInterfaceDefSeq
class _0RL_cd_7963219a43724a61_4a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_4a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::InterfaceDefSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::InterfaceDefSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_4a000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_4a000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_5a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_3a000000* tcd = (_0RL_cd_7963219a43724a61_3a000000*) cd;
  CORBA::_impl_InterfaceDef* impl = (CORBA::_impl_InterfaceDef*) svnt->_ptrToInterface(CORBA::InterfaceDef::_PD_repoId);
  tcd->pd_result = impl->base_interfaces();
}

CORBA::InterfaceDefSeq* CORBA::_objref_InterfaceDef::base_interfaces()
{
  _0RL_cd_7963219a43724a61_3a000000 _call_desc(_0RL_lcfn_7963219a43724a61_5a000000, "_get_base_interfaces", 21, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_6a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_4a000000* tcd = (_0RL_cd_7963219a43724a61_4a000000*) cd;
  CORBA::_impl_InterfaceDef* impl = (CORBA::_impl_InterfaceDef*) svnt->_ptrToInterface(CORBA::InterfaceDef::_PD_repoId);
  impl->base_interfaces(tcd->arg_0);
}

void CORBA::_objref_InterfaceDef::base_interfaces(const InterfaceDefSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_4a000000 _call_desc(_0RL_lcfn_7963219a43724a61_6a000000, "_set_base_interfaces", 21, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_InterfaceDef::~_pof_InterfaceDef() {}

omniObjRef*
CORBA::_pof_InterfaceDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_InterfaceDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_InterfaceDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::InterfaceDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_InterfaceDef _the_pof_CORBA_mInterfaceDef;

CORBA::_impl_InterfaceDef::~_impl_InterfaceDef() {}

CORBA::Boolean
CORBA::_impl_InterfaceDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_base_interfaces") ) {    
    giop_s.RequestReceived();
    InterfaceDefSeq_var result = this->base_interfaces();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_base_interfaces") ) {
    InterfaceDefSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->base_interfaces(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "is_a") ) {
    
    CORBA::String_var arg_interface_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_interface_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
    result = this->is_a(arg_interface_id.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "describe_interface") ) {
    
    giop_s.RequestReceived();
    InterfaceDef::FullInterfaceDescription_var result;
    
    result = this->describe_interface();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_attribute") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_type;
    
    arg_type = IDLType_Helper::unmarshalObjRef(giop_s);
    AttributeMode arg_mode;
    
    arg_mode <<= giop_s;
    
    giop_s.RequestReceived();
    AttributeDef_var result;
    
    result = this->create_attribute(arg_id.in(), arg_name.in(), arg_version.in(), arg_type.in(), arg_mode);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = AttributeDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      AttributeDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_operation") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_result;
    
    arg_result = IDLType_Helper::unmarshalObjRef(giop_s);
    OperationMode arg_mode;
    
    arg_mode <<= giop_s;
    ParDescriptionSeq arg_params;
    
    arg_params <<= giop_s;
    ExceptionDefSeq arg_exceptions;
    
    arg_exceptions <<= giop_s;
    ContextIdSeq arg_contexts;
    
    arg_contexts <<= giop_s;
    
    giop_s.RequestReceived();
    OperationDef_var result;
    
    result = this->create_operation(arg_id.in(), arg_name.in(), arg_version.in(), arg_result.in(), arg_mode, arg_params, arg_exceptions, arg_contexts);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = OperationDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      OperationDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Container::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_InterfaceDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::InterfaceDef::_PD_repoId) )
    return (_impl_InterfaceDef*) this;
  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_InterfaceDef::_mostDerivedRepoId()
{
  return CORBA::InterfaceDef::_PD_repoId;
}

size_t
CORBA::InterfaceDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = base_interfaces._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::InterfaceDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  base_interfaces >>= _n;
  
}

void
CORBA::InterfaceDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  base_interfaces <<= _n;
  
}

void
CORBA::InterfaceDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  base_interfaces >>= _n;
  
}

void
CORBA::InterfaceDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  base_interfaces <<= _n;
  
}

_init_in_def_( const CORBA::Short CORBA::PRIVATE_MEMBER = 0; )

_init_in_def_( const CORBA::Short CORBA::PUBLIC_MEMBER = 1; )

size_t
CORBA::ValueMember::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  _msgsize = type_def._NP_alignedSize(_msgsize);

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;

  return _msgsize;
}

void
CORBA::ValueMember::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  type_def >>= _n;
  access >>= _n;
  
}

void
CORBA::ValueMember::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  type_def <<= _n;
  access <<= _n;
  
}

void
CORBA::ValueMember::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  defined_in >>= _n;
  version >>= _n;
  type >>= _n;
  type_def >>= _n;
  access >>= _n;
  
}

void
CORBA::ValueMember::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  defined_in <<= _n;
  version <<= _n;
  type <<= _n;
  type_def <<= _n;
  access <<= _n;
  
}

CORBA::ValueMemberDef_ptr CORBA::ValueMemberDef_Helper::_nil() {
  return CORBA::ValueMemberDef::_nil();
}

CORBA::Boolean CORBA::ValueMemberDef_Helper::is_nil(CORBA::ValueMemberDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::ValueMemberDef_Helper::release(CORBA::ValueMemberDef_ptr p) {
  CORBA::release(p);
}

void CORBA::ValueMemberDef_Helper::duplicate(CORBA::ValueMemberDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::ValueMemberDef_Helper::NP_alignedSize(CORBA::ValueMemberDef_ptr obj, size_t offset) {
  return CORBA::ValueMemberDef::_alignedSize(obj, offset);
}

void CORBA::ValueMemberDef_Helper::marshalObjRef(CORBA::ValueMemberDef_ptr obj, NetBufferedStream& s) {
  CORBA::ValueMemberDef::_marshalObjRef(obj, s);
}

CORBA::ValueMemberDef_ptr CORBA::ValueMemberDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::ValueMemberDef::_unmarshalObjRef(s);
}

void CORBA::ValueMemberDef_Helper::marshalObjRef(CORBA::ValueMemberDef_ptr obj, MemBufferedStream& s) {
  CORBA::ValueMemberDef::_marshalObjRef(obj, s);
}

CORBA::ValueMemberDef_ptr CORBA::ValueMemberDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::ValueMemberDef::_unmarshalObjRef(s);
}

CORBA::ValueMemberDef_ptr
CORBA::ValueMemberDef::_duplicate(CORBA::ValueMemberDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::ValueMemberDef_ptr
CORBA::ValueMemberDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::ValueMemberDef_ptr
CORBA::ValueMemberDef::_nil()
{
  static _objref_ValueMemberDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_ValueMemberDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::ValueMemberDef::_PD_repoId = "IDL:omg.org/CORBA/ValueMemberDef:1.0";

CORBA::_objref_ValueMemberDef::~_objref_ValueMemberDef() {}

CORBA::_objref_ValueMemberDef::_objref_ValueMemberDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   
   omniObjRef(CORBA::ValueMemberDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_ValueMemberDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::ValueMemberDef::_PD_repoId) )
    return (CORBA::ValueMemberDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_7a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_73000000* tcd = (_0RL_cd_7963219a43724a61_73000000*) cd;
  CORBA::_impl_ValueMemberDef* impl = (CORBA::_impl_ValueMemberDef*) svnt->_ptrToInterface(CORBA::ValueMemberDef::_PD_repoId);
  tcd->pd_result = impl->type();
}

CORBA::TypeCode_ptr CORBA::_objref_ValueMemberDef::type()
{
  _0RL_cd_7963219a43724a61_73000000 _call_desc(_0RL_lcfn_7963219a43724a61_7a000000, "_get_type", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_8a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_ValueMemberDef* impl = (CORBA::_impl_ValueMemberDef*) svnt->_ptrToInterface(CORBA::ValueMemberDef::_PD_repoId);
  tcd->pd_result = impl->type_def();
}

CORBA::IDLType_ptr CORBA::_objref_ValueMemberDef::type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_8a000000, "_get_type_def", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_9a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_ValueMemberDef* impl = (CORBA::_impl_ValueMemberDef*) svnt->_ptrToInterface(CORBA::ValueMemberDef::_PD_repoId);
  impl->type_def(tcd->arg_0);
}

void CORBA::_objref_ValueMemberDef::type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_9a000000, "_set_type_def", 14, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_aa000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_07000000* tcd = (_0RL_cd_7963219a43724a61_07000000*) cd;
  CORBA::_impl_ValueMemberDef* impl = (CORBA::_impl_ValueMemberDef*) svnt->_ptrToInterface(CORBA::ValueMemberDef::_PD_repoId);
  tcd->pd_result = impl->access();
}

CORBA::Visibility CORBA::_objref_ValueMemberDef::access()
{
  _0RL_cd_7963219a43724a61_07000000 _call_desc(_0RL_lcfn_7963219a43724a61_aa000000, "_get_access", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_ba000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_17000000* tcd = (_0RL_cd_7963219a43724a61_17000000*) cd;
  CORBA::_impl_ValueMemberDef* impl = (CORBA::_impl_ValueMemberDef*) svnt->_ptrToInterface(CORBA::ValueMemberDef::_PD_repoId);
  impl->access(tcd->arg_0);
}

void CORBA::_objref_ValueMemberDef::access(Visibility arg_0)
{
  _0RL_cd_7963219a43724a61_17000000 _call_desc(_0RL_lcfn_7963219a43724a61_ba000000, "_set_access", 12, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_ValueMemberDef::~_pof_ValueMemberDef() {}

omniObjRef*
CORBA::_pof_ValueMemberDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_ValueMemberDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_ValueMemberDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::ValueMemberDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_ValueMemberDef _the_pof_CORBA_mValueMemberDef;

CORBA::_impl_ValueMemberDef::~_impl_ValueMemberDef() {}

CORBA::Boolean
CORBA::_impl_ValueMemberDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_type") ) {    
    giop_s.RequestReceived();
    CORBA::TypeCode_var result = this->type();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      CORBA::TypeCode::marshalTypeCode((result.operator->()), giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_access") ) {    
    giop_s.RequestReceived();
    Visibility result = this->access();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_access") ) {
    Visibility value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->access(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_ValueMemberDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::ValueMemberDef::_PD_repoId) )
    return (_impl_ValueMemberDef*) this;
  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_ValueMemberDef::_mostDerivedRepoId()
{
  return CORBA::ValueMemberDef::_PD_repoId;
}

size_t
CORBA::ValueDef::FullValueDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize += 1;

  _msgsize += 1;

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = operations._NP_alignedSize(_msgsize);

  _msgsize = attributes._NP_alignedSize(_msgsize);

  _msgsize = members._NP_alignedSize(_msgsize);

  _msgsize = initializers._NP_alignedSize(_msgsize);

  _msgsize = supported_interfaces._NP_alignedSize(_msgsize);

  _msgsize = abstract_base_values._NP_alignedSize(_msgsize);

  _msgsize += 1;

  _msgsize = base_value._NP_alignedSize(_msgsize);

  _msgsize = type._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::ValueDef::FullValueDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  is_abstract >>= _n;
  is_custom >>= _n;
  defined_in >>= _n;
  version >>= _n;
  operations >>= _n;
  attributes >>= _n;
  members >>= _n;
  initializers >>= _n;
  supported_interfaces >>= _n;
  abstract_base_values >>= _n;
  is_truncatable >>= _n;
  base_value >>= _n;
  type >>= _n;
  
}

void
CORBA::ValueDef::FullValueDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  is_abstract <<= _n;
  is_custom <<= _n;
  defined_in <<= _n;
  version <<= _n;
  operations <<= _n;
  attributes <<= _n;
  members <<= _n;
  initializers <<= _n;
  supported_interfaces <<= _n;
  abstract_base_values <<= _n;
  is_truncatable <<= _n;
  base_value <<= _n;
  type <<= _n;
  
}

void
CORBA::ValueDef::FullValueDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  is_abstract >>= _n;
  is_custom >>= _n;
  defined_in >>= _n;
  version >>= _n;
  operations >>= _n;
  attributes >>= _n;
  members >>= _n;
  initializers >>= _n;
  supported_interfaces >>= _n;
  abstract_base_values >>= _n;
  is_truncatable >>= _n;
  base_value >>= _n;
  type >>= _n;
  
}

void
CORBA::ValueDef::FullValueDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  is_abstract <<= _n;
  is_custom <<= _n;
  defined_in <<= _n;
  version <<= _n;
  operations <<= _n;
  attributes <<= _n;
  members <<= _n;
  initializers <<= _n;
  supported_interfaces <<= _n;
  abstract_base_values <<= _n;
  is_truncatable <<= _n;
  base_value <<= _n;
  type <<= _n;
  
}

CORBA::ValueDef_ptr CORBA::ValueDef_Helper::_nil() {
  return CORBA::ValueDef::_nil();
}

CORBA::Boolean CORBA::ValueDef_Helper::is_nil(CORBA::ValueDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::ValueDef_Helper::release(CORBA::ValueDef_ptr p) {
  CORBA::release(p);
}

void CORBA::ValueDef_Helper::duplicate(CORBA::ValueDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::ValueDef_Helper::NP_alignedSize(CORBA::ValueDef_ptr obj, size_t offset) {
  return CORBA::ValueDef::_alignedSize(obj, offset);
}

void CORBA::ValueDef_Helper::marshalObjRef(CORBA::ValueDef_ptr obj, NetBufferedStream& s) {
  CORBA::ValueDef::_marshalObjRef(obj, s);
}

CORBA::ValueDef_ptr CORBA::ValueDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::ValueDef::_unmarshalObjRef(s);
}

void CORBA::ValueDef_Helper::marshalObjRef(CORBA::ValueDef_ptr obj, MemBufferedStream& s) {
  CORBA::ValueDef::_marshalObjRef(obj, s);
}

CORBA::ValueDef_ptr CORBA::ValueDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::ValueDef::_unmarshalObjRef(s);
}

CORBA::ValueDef_ptr
CORBA::ValueDef::_duplicate(CORBA::ValueDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::ValueDef_ptr
CORBA::ValueDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::ValueDef_ptr
CORBA::ValueDef::_nil()
{
  static _objref_ValueDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_ValueDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::ValueDef::_PD_repoId = "IDL:omg.org/CORBA/ValueDef:1.0";

CORBA::_objref_ValueDef::~_objref_ValueDef() {}

CORBA::_objref_ValueDef::_objref_ValueDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_Container(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_Contained(mdri, p, id, lid),
   OMNIORB_BASE_CTOR(CORBA::)_objref_IDLType(mdri, p, id, lid),
   
   omniObjRef(CORBA::ValueDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_ValueDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::ValueDef::_PD_repoId) )
    return (CORBA::ValueDef_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_ca000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b9000000* tcd = (_0RL_cd_7963219a43724a61_b9000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->is_a(tcd->arg_0);
}

CORBA::Boolean CORBA::_objref_ValueDef::is_a(const char* id)
{
  _0RL_cd_7963219a43724a61_b9000000 _call_desc(_0RL_lcfn_7963219a43724a61_ca000000, "is_a", 5, 0, id);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mValueDef_mFullValueDescription
class _0RL_cd_7963219a43724a61_da000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_da000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ValueDef::FullValueDescription* result() { return pd_result; }
  
  CORBA::ValueDef::FullValueDescription* pd_result;
};

void _0RL_cd_7963219a43724a61_da000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::ValueDef::FullValueDescription;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_ea000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_da000000* tcd = (_0RL_cd_7963219a43724a61_da000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->describe_value();
}

CORBA::ValueDef::FullValueDescription* CORBA::_objref_ValueDef::describe_value()
{
  _0RL_cd_7963219a43724a61_da000000 _call_desc(_0RL_lcfn_7963219a43724a61_ea000000, "describe_value", 15, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mValueMemberDef_i_cstring_i_cstring_i_cstring_i_cCORBA_mIDLType_i_cshort
class _0RL_cd_7963219a43724a61_fa000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_fa000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2, CORBA::IDLType_ptr a_3, CORBA::Visibility a_4):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2),
     arg_3(a_3),
     arg_4(a_4) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ValueMemberDef_ptr result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  CORBA::IDLType_ptr arg_3;
  CORBA::Visibility arg_4;
  CORBA::ValueMemberDef_ptr pd_result;
};

CORBA::ULong _0RL_cd_7963219a43724a61_fa000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  msgsize = CORBA::IDLType_Helper::NP_alignedSize(arg_3, msgsize);
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_fa000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::IDLType_Helper::marshalObjRef(arg_3,giop_client);
  arg_4 >>= giop_client;
  
}

void _0RL_cd_7963219a43724a61_fa000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ValueMemberDef_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_0b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_fa000000* tcd = (_0RL_cd_7963219a43724a61_fa000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->create_value_member(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
}

CORBA::ValueMemberDef_ptr CORBA::_objref_ValueDef::create_value_member(const char* id, const char* name, const char* version, IDLType_ptr type, Visibility access)
{
  _0RL_cd_7963219a43724a61_fa000000 _call_desc(_0RL_lcfn_7963219a43724a61_0b000000, "create_value_member", 20, 0, id, name, version, type, access);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_1b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_f9000000* tcd = (_0RL_cd_7963219a43724a61_f9000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->create_attribute(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
}

CORBA::AttributeDef_ptr CORBA::_objref_ValueDef::create_attribute(const char* id, const char* name, const char* version, IDLType_ptr type, AttributeMode mode)
{
  _0RL_cd_7963219a43724a61_f9000000 _call_desc(_0RL_lcfn_7963219a43724a61_1b000000, "create_attribute", 17, 0, id, name, version, type, mode);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_2b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_1a000000* tcd = (_0RL_cd_7963219a43724a61_1a000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->create_operation(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6, tcd->arg_7);
}

CORBA::OperationDef_ptr CORBA::_objref_ValueDef::create_operation(const char* id, const char* name, const char* version, IDLType_ptr result, OperationMode mode, const ParDescriptionSeq& params, const ExceptionDefSeq& exceptions, const ContextIdSeq& contexts)
{
  _0RL_cd_7963219a43724a61_1a000000 _call_desc(_0RL_lcfn_7963219a43724a61_2b000000, "create_operation", 17, 0, id, name, version, result, mode, params, exceptions, contexts);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_3b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_3a000000* tcd = (_0RL_cd_7963219a43724a61_3a000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->supported_interfaces();
}

CORBA::InterfaceDefSeq* CORBA::_objref_ValueDef::supported_interfaces()
{
  _0RL_cd_7963219a43724a61_3a000000 _call_desc(_0RL_lcfn_7963219a43724a61_3b000000, "_get_supported_interfaces", 26, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_4b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_4a000000* tcd = (_0RL_cd_7963219a43724a61_4a000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  impl->supported_interfaces(tcd->arg_0);
}

void CORBA::_objref_ValueDef::supported_interfaces(const InterfaceDefSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_4a000000 _call_desc(_0RL_lcfn_7963219a43724a61_4b000000, "_set_supported_interfaces", 26, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mInitializerSeq
class _0RL_cd_7963219a43724a61_5b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_5b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::InitializerSeq* result() { return pd_result; }
  
  CORBA::InitializerSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_5b000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::InitializerSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mInitializerSeq
class _0RL_cd_7963219a43724a61_6b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_6b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::InitializerSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::InitializerSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_6b000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_6b000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_7b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_5b000000* tcd = (_0RL_cd_7963219a43724a61_5b000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->initializers();
}

CORBA::InitializerSeq* CORBA::_objref_ValueDef::initializers()
{
  _0RL_cd_7963219a43724a61_5b000000 _call_desc(_0RL_lcfn_7963219a43724a61_7b000000, "_get_initializers", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_8b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_6b000000* tcd = (_0RL_cd_7963219a43724a61_6b000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  impl->initializers(tcd->arg_0);
}

void CORBA::_objref_ValueDef::initializers(const InitializerSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_6b000000 _call_desc(_0RL_lcfn_7963219a43724a61_8b000000, "_set_initializers", 18, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mValueDef
class _0RL_cd_7963219a43724a61_9b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_9b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ValueDef_ptr result() { return pd_result; }
  
  CORBA::ValueDef_ptr pd_result;
  
};

void _0RL_cd_7963219a43724a61_9b000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = CORBA::ValueDef_Helper::unmarshalObjRef(giop_client);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mValueDef
class _0RL_cd_7963219a43724a61_ab000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_ab000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::ValueDef_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::ValueDef_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_ab000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = CORBA::ValueDef_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_ab000000::marshalArguments(GIOP_C& giop_client)
{
  CORBA::ValueDef_Helper::marshalObjRef(arg_0,giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_bb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_9b000000* tcd = (_0RL_cd_7963219a43724a61_9b000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->base_value();
}

CORBA::ValueDef_ptr CORBA::_objref_ValueDef::base_value()
{
  _0RL_cd_7963219a43724a61_9b000000 _call_desc(_0RL_lcfn_7963219a43724a61_bb000000, "_get_base_value", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_cb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_ab000000* tcd = (_0RL_cd_7963219a43724a61_ab000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  impl->base_value(tcd->arg_0);
}

void CORBA::_objref_ValueDef::base_value(ValueDef_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_ab000000 _call_desc(_0RL_lcfn_7963219a43724a61_cb000000, "_set_base_value", 16, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mValueDefSeq
class _0RL_cd_7963219a43724a61_db000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_db000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::ValueDefSeq* result() { return pd_result; }
  
  CORBA::ValueDefSeq* pd_result;
  
};

void _0RL_cd_7963219a43724a61_db000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new CORBA::ValueDefSeq;
  *pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mValueDefSeq
class _0RL_cd_7963219a43724a61_eb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_eb000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const CORBA::ValueDefSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const CORBA::ValueDefSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_eb000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_eb000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_fb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_db000000* tcd = (_0RL_cd_7963219a43724a61_db000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->abstract_base_values();
}

CORBA::ValueDefSeq* CORBA::_objref_ValueDef::abstract_base_values()
{
  _0RL_cd_7963219a43724a61_db000000 _call_desc(_0RL_lcfn_7963219a43724a61_fb000000, "_get_abstract_base_values", 26, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_0c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_eb000000* tcd = (_0RL_cd_7963219a43724a61_eb000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  impl->abstract_base_values(tcd->arg_0);
}

void CORBA::_objref_ValueDef::abstract_base_values(const ValueDefSeq& arg_0)
{
  _0RL_cd_7963219a43724a61_eb000000 _call_desc(_0RL_lcfn_7963219a43724a61_0c000000, "_set_abstract_base_values", 26, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_7963219a43724a61_1c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_1c000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Boolean result() { return pd_result; }
  
  CORBA::Boolean pd_result;
  
};

void _0RL_cd_7963219a43724a61_1c000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean
class _0RL_cd_7963219a43724a61_2c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7963219a43724a61_2c000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Boolean a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Boolean arg_0;
  
};

CORBA::ULong _0RL_cd_7963219a43724a61_2c000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize += 1;
  
  return msgsize;
}

void _0RL_cd_7963219a43724a61_2c000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_3c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_1c000000* tcd = (_0RL_cd_7963219a43724a61_1c000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->is_abstract();
}

CORBA::Boolean CORBA::_objref_ValueDef::is_abstract()
{
  _0RL_cd_7963219a43724a61_1c000000 _call_desc(_0RL_lcfn_7963219a43724a61_3c000000, "_get_is_abstract", 17, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_4c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_2c000000* tcd = (_0RL_cd_7963219a43724a61_2c000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  impl->is_abstract(tcd->arg_0);
}

void CORBA::_objref_ValueDef::is_abstract(CORBA::Boolean arg_0)
{
  _0RL_cd_7963219a43724a61_2c000000 _call_desc(_0RL_lcfn_7963219a43724a61_4c000000, "_set_is_abstract", 17, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_5c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_1c000000* tcd = (_0RL_cd_7963219a43724a61_1c000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->is_custom();
}

CORBA::Boolean CORBA::_objref_ValueDef::is_custom()
{
  _0RL_cd_7963219a43724a61_1c000000 _call_desc(_0RL_lcfn_7963219a43724a61_5c000000, "_get_is_custom", 15, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_6c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_2c000000* tcd = (_0RL_cd_7963219a43724a61_2c000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  impl->is_custom(tcd->arg_0);
}

void CORBA::_objref_ValueDef::is_custom(CORBA::Boolean arg_0)
{
  _0RL_cd_7963219a43724a61_2c000000 _call_desc(_0RL_lcfn_7963219a43724a61_6c000000, "_set_is_custom", 15, 0, arg_0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_7c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_1c000000* tcd = (_0RL_cd_7963219a43724a61_1c000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  tcd->pd_result = impl->is_truncatable();
}

CORBA::Boolean CORBA::_objref_ValueDef::is_truncatable()
{
  _0RL_cd_7963219a43724a61_1c000000 _call_desc(_0RL_lcfn_7963219a43724a61_7c000000, "_get_is_truncatable", 20, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_8c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_2c000000* tcd = (_0RL_cd_7963219a43724a61_2c000000*) cd;
  CORBA::_impl_ValueDef* impl = (CORBA::_impl_ValueDef*) svnt->_ptrToInterface(CORBA::ValueDef::_PD_repoId);
  impl->is_truncatable(tcd->arg_0);
}

void CORBA::_objref_ValueDef::is_truncatable(CORBA::Boolean arg_0)
{
  _0RL_cd_7963219a43724a61_2c000000 _call_desc(_0RL_lcfn_7963219a43724a61_8c000000, "_set_is_truncatable", 20, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_ValueDef::~_pof_ValueDef() {}

omniObjRef*
CORBA::_pof_ValueDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_ValueDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_ValueDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::ValueDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_ValueDef _the_pof_CORBA_mValueDef;

CORBA::_impl_ValueDef::~_impl_ValueDef() {}

CORBA::Boolean
CORBA::_impl_ValueDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_supported_interfaces") ) {    
    giop_s.RequestReceived();
    InterfaceDefSeq_var result = this->supported_interfaces();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_supported_interfaces") ) {
    InterfaceDefSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->supported_interfaces(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_initializers") ) {    
    giop_s.RequestReceived();
    InitializerSeq_var result = this->initializers();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_initializers") ) {
    InitializerSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->initializers(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_base_value") ) {    
    giop_s.RequestReceived();
    ValueDef_var result = this->base_value();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ValueDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ValueDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_base_value") ) {
    ValueDef_var value;
    value = ValueDef_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->base_value(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_abstract_base_values") ) {    
    giop_s.RequestReceived();
    ValueDefSeq_var result = this->abstract_base_values();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_abstract_base_values") ) {
    ValueDefSeq value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->abstract_base_values(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_is_abstract") ) {    
    giop_s.RequestReceived();
    CORBA::Boolean result = this->is_abstract();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_is_abstract") ) {
    CORBA::Boolean value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->is_abstract(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_is_custom") ) {    
    giop_s.RequestReceived();
    CORBA::Boolean result = this->is_custom();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_is_custom") ) {
    CORBA::Boolean value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->is_custom(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_is_truncatable") ) {    
    giop_s.RequestReceived();
    CORBA::Boolean result = this->is_truncatable();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_is_truncatable") ) {
    CORBA::Boolean value;
    value <<= giop_s;
    
    giop_s.RequestReceived();
    this->is_truncatable(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "is_a") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
    result = this->is_a(arg_id.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "describe_value") ) {
    
    giop_s.RequestReceived();
    ValueDef::FullValueDescription_var result;
    
    result = this->describe_value();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_value_member") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_type;
    
    arg_type = IDLType_Helper::unmarshalObjRef(giop_s);
    Visibility arg_access;
    
    arg_access <<= giop_s;
    
    giop_s.RequestReceived();
    ValueMemberDef_var result;
    
    result = this->create_value_member(arg_id.in(), arg_name.in(), arg_version.in(), arg_type.in(), arg_access);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = ValueMemberDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      ValueMemberDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_attribute") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_type;
    
    arg_type = IDLType_Helper::unmarshalObjRef(giop_s);
    AttributeMode arg_mode;
    
    arg_mode <<= giop_s;
    
    giop_s.RequestReceived();
    AttributeDef_var result;
    
    result = this->create_attribute(arg_id.in(), arg_name.in(), arg_version.in(), arg_type.in(), arg_mode);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = AttributeDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      AttributeDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create_operation") ) {
    
    CORBA::String_var arg_id;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_version;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_version = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    IDLType_var arg_result;
    
    arg_result = IDLType_Helper::unmarshalObjRef(giop_s);
    OperationMode arg_mode;
    
    arg_mode <<= giop_s;
    ParDescriptionSeq arg_params;
    
    arg_params <<= giop_s;
    ExceptionDefSeq arg_exceptions;
    
    arg_exceptions <<= giop_s;
    ContextIdSeq arg_contexts;
    
    arg_contexts <<= giop_s;
    
    giop_s.RequestReceived();
    OperationDef_var result;
    
    result = this->create_operation(arg_id.in(), arg_name.in(), arg_version.in(), arg_result.in(), arg_mode, arg_params, arg_exceptions, arg_contexts);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = OperationDef_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      OperationDef_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_Container::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_Contained::_dispatch(giop_s) ) {
    return 1;
  }

  if( _impl_IDLType::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_ValueDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::ValueDef::_PD_repoId) )
    return (_impl_ValueDef*) this;
  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_ValueDef::_mostDerivedRepoId()
{
  return CORBA::ValueDef::_PD_repoId;
}

size_t
CORBA::ValueDescription::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = id._NP_alignedSize(_msgsize);

  _msgsize += 1;

  _msgsize += 1;

  _msgsize = defined_in._NP_alignedSize(_msgsize);

  _msgsize = version._NP_alignedSize(_msgsize);

  _msgsize = supported_interfaces._NP_alignedSize(_msgsize);

  _msgsize = abstract_base_values._NP_alignedSize(_msgsize);

  _msgsize += 1;

  _msgsize = base_value._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
CORBA::ValueDescription::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  is_abstract >>= _n;
  is_custom >>= _n;
  defined_in >>= _n;
  version >>= _n;
  supported_interfaces >>= _n;
  abstract_base_values >>= _n;
  is_truncatable >>= _n;
  base_value >>= _n;
  
}

void
CORBA::ValueDescription::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  is_abstract <<= _n;
  is_custom <<= _n;
  defined_in <<= _n;
  version <<= _n;
  supported_interfaces <<= _n;
  abstract_base_values <<= _n;
  is_truncatable <<= _n;
  base_value <<= _n;
  
}

void
CORBA::ValueDescription::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  id >>= _n;
  is_abstract >>= _n;
  is_custom >>= _n;
  defined_in >>= _n;
  version >>= _n;
  supported_interfaces >>= _n;
  abstract_base_values >>= _n;
  is_truncatable >>= _n;
  base_value >>= _n;
  
}

void
CORBA::ValueDescription::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  id <<= _n;
  is_abstract <<= _n;
  is_custom <<= _n;
  defined_in <<= _n;
  version <<= _n;
  supported_interfaces <<= _n;
  abstract_base_values <<= _n;
  is_truncatable <<= _n;
  base_value <<= _n;
  
}

CORBA::ValueBoxDef_ptr CORBA::ValueBoxDef_Helper::_nil() {
  return CORBA::ValueBoxDef::_nil();
}

CORBA::Boolean CORBA::ValueBoxDef_Helper::is_nil(CORBA::ValueBoxDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::ValueBoxDef_Helper::release(CORBA::ValueBoxDef_ptr p) {
  CORBA::release(p);
}

void CORBA::ValueBoxDef_Helper::duplicate(CORBA::ValueBoxDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::ValueBoxDef_Helper::NP_alignedSize(CORBA::ValueBoxDef_ptr obj, size_t offset) {
  return CORBA::ValueBoxDef::_alignedSize(obj, offset);
}

void CORBA::ValueBoxDef_Helper::marshalObjRef(CORBA::ValueBoxDef_ptr obj, NetBufferedStream& s) {
  CORBA::ValueBoxDef::_marshalObjRef(obj, s);
}

CORBA::ValueBoxDef_ptr CORBA::ValueBoxDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::ValueBoxDef::_unmarshalObjRef(s);
}

void CORBA::ValueBoxDef_Helper::marshalObjRef(CORBA::ValueBoxDef_ptr obj, MemBufferedStream& s) {
  CORBA::ValueBoxDef::_marshalObjRef(obj, s);
}

CORBA::ValueBoxDef_ptr CORBA::ValueBoxDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::ValueBoxDef::_unmarshalObjRef(s);
}

CORBA::ValueBoxDef_ptr
CORBA::ValueBoxDef::_duplicate(CORBA::ValueBoxDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::ValueBoxDef_ptr
CORBA::ValueBoxDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::ValueBoxDef_ptr
CORBA::ValueBoxDef::_nil()
{
  static _objref_ValueBoxDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_ValueBoxDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::ValueBoxDef::_PD_repoId = "IDL:omg.org/CORBA/ValueBoxDef:1.0";

CORBA::_objref_ValueBoxDef::~_objref_ValueBoxDef() {}

CORBA::_objref_ValueBoxDef::_objref_ValueBoxDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_TypedefDef(mdri, p, id, lid),
   
   omniObjRef(CORBA::ValueBoxDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_ValueBoxDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::ValueBoxDef::_PD_repoId) )
    return (CORBA::ValueBoxDef_ptr) this;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return (CORBA::TypedefDef_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_9c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_a4000000* tcd = (_0RL_cd_7963219a43724a61_a4000000*) cd;
  CORBA::_impl_ValueBoxDef* impl = (CORBA::_impl_ValueBoxDef*) svnt->_ptrToInterface(CORBA::ValueBoxDef::_PD_repoId);
  tcd->pd_result = impl->original_type_def();
}

CORBA::IDLType_ptr CORBA::_objref_ValueBoxDef::original_type_def()
{
  _0RL_cd_7963219a43724a61_a4000000 _call_desc(_0RL_lcfn_7963219a43724a61_9c000000, "_get_original_type_def", 23, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_7963219a43724a61_ac000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7963219a43724a61_b4000000* tcd = (_0RL_cd_7963219a43724a61_b4000000*) cd;
  CORBA::_impl_ValueBoxDef* impl = (CORBA::_impl_ValueBoxDef*) svnt->_ptrToInterface(CORBA::ValueBoxDef::_PD_repoId);
  impl->original_type_def(tcd->arg_0);
}

void CORBA::_objref_ValueBoxDef::original_type_def(IDLType_ptr arg_0)
{
  _0RL_cd_7963219a43724a61_b4000000 _call_desc(_0RL_lcfn_7963219a43724a61_ac000000, "_set_original_type_def", 23, 0, arg_0);
  
  _invoke(_call_desc);
  
}

CORBA::_pof_ValueBoxDef::~_pof_ValueBoxDef() {}

omniObjRef*
CORBA::_pof_ValueBoxDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_ValueBoxDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_ValueBoxDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::ValueBoxDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::TypedefDef::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_ValueBoxDef _the_pof_CORBA_mValueBoxDef;

CORBA::_impl_ValueBoxDef::~_impl_ValueBoxDef() {}

CORBA::Boolean
CORBA::_impl_ValueBoxDef::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_original_type_def") ) {    
    giop_s.RequestReceived();
    IDLType_var result = this->original_type_def();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = IDLType_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      IDLType_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_set_original_type_def") ) {
    IDLType_var value;
    value = IDLType_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    this->original_type_def(value);
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TypedefDef::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_ValueBoxDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::ValueBoxDef::_PD_repoId) )
    return (_impl_ValueBoxDef*) this;
  if( !strcmp(id, TypedefDef::_PD_repoId) )
    return (_impl_TypedefDef*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_ValueBoxDef::_mostDerivedRepoId()
{
  return CORBA::ValueBoxDef::_PD_repoId;
}

CORBA::AbstractInterfaceDef_ptr CORBA::AbstractInterfaceDef_Helper::_nil() {
  return CORBA::AbstractInterfaceDef::_nil();
}

CORBA::Boolean CORBA::AbstractInterfaceDef_Helper::is_nil(CORBA::AbstractInterfaceDef_ptr p) {
  return CORBA::is_nil(p);

}

void CORBA::AbstractInterfaceDef_Helper::release(CORBA::AbstractInterfaceDef_ptr p) {
  CORBA::release(p);
}

void CORBA::AbstractInterfaceDef_Helper::duplicate(CORBA::AbstractInterfaceDef_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t CORBA::AbstractInterfaceDef_Helper::NP_alignedSize(CORBA::AbstractInterfaceDef_ptr obj, size_t offset) {
  return CORBA::AbstractInterfaceDef::_alignedSize(obj, offset);
}

void CORBA::AbstractInterfaceDef_Helper::marshalObjRef(CORBA::AbstractInterfaceDef_ptr obj, NetBufferedStream& s) {
  CORBA::AbstractInterfaceDef::_marshalObjRef(obj, s);
}

CORBA::AbstractInterfaceDef_ptr CORBA::AbstractInterfaceDef_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return CORBA::AbstractInterfaceDef::_unmarshalObjRef(s);
}

void CORBA::AbstractInterfaceDef_Helper::marshalObjRef(CORBA::AbstractInterfaceDef_ptr obj, MemBufferedStream& s) {
  CORBA::AbstractInterfaceDef::_marshalObjRef(obj, s);
}

CORBA::AbstractInterfaceDef_ptr CORBA::AbstractInterfaceDef_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return CORBA::AbstractInterfaceDef::_unmarshalObjRef(s);
}

CORBA::AbstractInterfaceDef_ptr
CORBA::AbstractInterfaceDef::_duplicate(CORBA::AbstractInterfaceDef_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

CORBA::AbstractInterfaceDef_ptr
CORBA::AbstractInterfaceDef::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

CORBA::AbstractInterfaceDef_ptr
CORBA::AbstractInterfaceDef::_nil()
{
  static _objref_AbstractInterfaceDef* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_AbstractInterfaceDef;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* CORBA::AbstractInterfaceDef::_PD_repoId = "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0";

CORBA::_objref_AbstractInterfaceDef::~_objref_AbstractInterfaceDef() {}

CORBA::_objref_AbstractInterfaceDef::_objref_AbstractInterfaceDef(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   OMNIORB_BASE_CTOR(CORBA::)_objref_InterfaceDef(mdri, p, id, lid),
   
   omniObjRef(CORBA::AbstractInterfaceDef::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
CORBA::_objref_AbstractInterfaceDef::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, CORBA::AbstractInterfaceDef::_PD_repoId) )
    return (CORBA::AbstractInterfaceDef_ptr) this;
  if( !strcmp(id, CORBA::InterfaceDef::_PD_repoId) )
    return (CORBA::InterfaceDef_ptr) this;
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return (CORBA::Container_ptr) this;
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return (CORBA::Contained_ptr) this;
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return (CORBA::IDLType_ptr) this;
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return (CORBA::IRObject_ptr) this;
  
  return 0;
}

CORBA::_pof_AbstractInterfaceDef::~_pof_AbstractInterfaceDef() {}

omniObjRef*
CORBA::_pof_AbstractInterfaceDef::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new CORBA::_objref_AbstractInterfaceDef(mdri, p, id, lid);
}

CORBA::Boolean
CORBA::_pof_AbstractInterfaceDef::is_a(const char* id) const
{
  if( !strcmp(id, CORBA::AbstractInterfaceDef::_PD_repoId) )
    return 1;
  if( !strcmp(id, CORBA::InterfaceDef::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Container::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::Contained::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IDLType::_PD_repoId) )
    return 1;
  
  if( !strcmp(id, CORBA::IRObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CORBA::_pof_AbstractInterfaceDef _the_pof_CORBA_mAbstractInterfaceDef;

CORBA::_impl_AbstractInterfaceDef::~_impl_AbstractInterfaceDef() {}

CORBA::Boolean
CORBA::_impl_AbstractInterfaceDef::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_InterfaceDef::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
CORBA::_impl_AbstractInterfaceDef::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, CORBA::AbstractInterfaceDef::_PD_repoId) )
    return (_impl_AbstractInterfaceDef*) this;
  if( !strcmp(id, InterfaceDef::_PD_repoId) )
    return (_impl_InterfaceDef*) this;

  if( !strcmp(id, Container::_PD_repoId) )
    return (_impl_Container*) this;

  if( !strcmp(id, Contained::_PD_repoId) )
    return (_impl_Contained*) this;

  if( !strcmp(id, IDLType::_PD_repoId) )
    return (_impl_IDLType*) this;

  if( !strcmp(id, IRObject::_PD_repoId) )
    return (_impl_IRObject*) this;

  return 0;
}

const char*
CORBA::_impl_AbstractInterfaceDef::_mostDerivedRepoId()
{
  return CORBA::AbstractInterfaceDef::_PD_repoId;
}

POA_CORBA::IRObject::~IRObject() {}

POA_CORBA::Contained::~Contained() {}

POA_CORBA::Container::~Container() {}

POA_CORBA::IDLType::~IDLType() {}

POA_CORBA::Repository::~Repository() {}

POA_CORBA::ModuleDef::~ModuleDef() {}

POA_CORBA::ConstantDef::~ConstantDef() {}

POA_CORBA::TypedefDef::~TypedefDef() {}

POA_CORBA::StructDef::~StructDef() {}

POA_CORBA::UnionDef::~UnionDef() {}

POA_CORBA::EnumDef::~EnumDef() {}

POA_CORBA::AliasDef::~AliasDef() {}

POA_CORBA::NativeDef::~NativeDef() {}

POA_CORBA::PrimitiveDef::~PrimitiveDef() {}

POA_CORBA::StringDef::~StringDef() {}

POA_CORBA::WstringDef::~WstringDef() {}

POA_CORBA::FixedDef::~FixedDef() {}

POA_CORBA::SequenceDef::~SequenceDef() {}

POA_CORBA::ArrayDef::~ArrayDef() {}

POA_CORBA::ExceptionDef::~ExceptionDef() {}

POA_CORBA::AttributeDef::~AttributeDef() {}

POA_CORBA::OperationDef::~OperationDef() {}

POA_CORBA::InterfaceDef::~InterfaceDef() {}

POA_CORBA::ValueMemberDef::~ValueMemberDef() {}

POA_CORBA::ValueDef::~ValueDef() {}

POA_CORBA::ValueBoxDef::~ValueBoxDef() {}

POA_CORBA::AbstractInterfaceDef::~AbstractInterfaceDef() {}

