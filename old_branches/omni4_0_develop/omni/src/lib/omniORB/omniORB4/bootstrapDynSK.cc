// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

#include "bootstrap.hh"
#include <omniORB4/tcDescriptor.h>

static const char* _0RL_library_version = omniORB_3_0;

static CORBA::TypeCode_ptr _0RL_tc_CORBA__InitialReferences_mObjId = CORBA::TypeCode::PR_alias_tc("IDL:CORBA_InitialReferences/ObjId:1.0", "ObjId", CORBA::TypeCode::PR_string_tc(0));

const CORBA::TypeCode_ptr CORBA_InitialReferences::_tc_ObjId = _0RL_tc_CORBA__InitialReferences_mObjId;

static CORBA::TypeCode_ptr _0RL_tc_CORBA__InitialReferences_mObjIdList = CORBA::TypeCode::PR_alias_tc("IDL:CORBA_InitialReferences/ObjIdList:1.0", "ObjIdList", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0)));

const CORBA::TypeCode_ptr CORBA_InitialReferences::_tc_ObjIdList = _0RL_tc_CORBA__InitialReferences_mObjIdList;

const CORBA::TypeCode_ptr _tc_CORBA_InitialReferences = CORBA::TypeCode::PR_interface_tc("omg.org/CORBA/InitialReferences:1.0", "CORBA_InitialReferences");

#ifndef __0RL_tcParser_buildDesc_s0_cstring__
#define __0RL_tcParser_buildDesc_s0_cstring__
static void
_0RL_tcParser_setElementCount_s0_cstring(tcSequenceDesc* _desc, CORBA::ULong _len)
{
  ((_CORBA_Unbounded_Sequence__String*)_desc->opq_seq)->length(_len);
}

static CORBA::ULong
_0RL_tcParser_getElementCount_s0_cstring(tcSequenceDesc* _desc)
{
  return ((_CORBA_Unbounded_Sequence__String*)_desc->opq_seq)->length();
}

static CORBA::Boolean
_0RL_tcParser_getElementDesc_s0_cstring(tcSequenceDesc* _desc, CORBA::ULong _index, tcDescriptor& _newdesc, _CORBA_ULong& _contiguous)
{
  _0RL_buildDesc_cstring(_newdesc, (*((_CORBA_Unbounded_Sequence__String*)_desc->opq_seq))[_index]);
  
  return 1;
}

static void
_0RL_buildDesc_s0_cstring(tcDescriptor &_desc, const _CORBA_Unbounded_Sequence__String& _data)
{
  _desc.p_sequence.opq_seq = (void*) &_data;
  _desc.p_sequence.setElementCount =
    _0RL_tcParser_setElementCount_s0_cstring;
  _desc.p_sequence.getElementCount =
    _0RL_tcParser_getElementCount_s0_cstring;
  _desc.p_sequence.getElementDesc =
    _0RL_tcParser_getElementDesc_s0_cstring;
  }
#endif

void operator <<= (CORBA::Any& _a, const CORBA_InitialReferences::ObjIdList& _s)
{
  tcDescriptor tcdesc;
  _0RL_buildDesc_s0_cstring(tcdesc, _s);
  _a.PR_packFrom(CORBA_InitialReferences::_tc_ObjIdList, &tcdesc);
}

void _0RL_seq_delete_CORBA__InitialReferences_mObjIdList(void* _data)
{
  delete (CORBA_InitialReferences::ObjIdList*)_data;
}

CORBA::Boolean operator >>= (const CORBA::Any& _a, CORBA_InitialReferences::ObjIdList*& _s_out)
{
  return _a >>= (const CORBA_InitialReferences::ObjIdList*&) _s_out;
}

CORBA::Boolean operator >>= (const CORBA::Any& _a, const CORBA_InitialReferences::ObjIdList*& _s_out)
{
  _s_out = 0;
  CORBA_InitialReferences::ObjIdList* stmp = (CORBA_InitialReferences::ObjIdList*) _a.PR_getCachedData();
  if( stmp == 0 ) {
    tcDescriptor tcdesc;
    stmp = new CORBA_InitialReferences::ObjIdList;
    _0RL_buildDesc_s0_cstring(tcdesc, *stmp);
    if( _a.PR_unpackTo(CORBA_InitialReferences::_tc_ObjIdList, &tcdesc)) {
      ((CORBA::Any*)&_a)->PR_setCachedData((void*)stmp, _0RL_seq_delete_CORBA__InitialReferences_mObjIdList);
      _s_out = stmp;
      return 1;
    } else {
      delete (CORBA_InitialReferences::ObjIdList *)stmp;
      return 0;
    }
  } else {
    CORBA::TypeCode_var tctmp = _a.type();
    if( tctmp->equivalent(CORBA_InitialReferences::_tc_ObjIdList) ) {
      _s_out = stmp;
      return 1;
    } else {
      return 0;
    }
  }
}

static void
_0RL_tcParser_setObjectPtr_CORBA__InitialReferences(tcObjrefDesc *_desc, CORBA::Object_ptr _ptr)
{
  CORBA_InitialReferences_ptr _p = CORBA_InitialReferences::_narrow(_ptr);
  CORBA_InitialReferences_ptr* pp = (CORBA_InitialReferences_ptr*)_desc->opq_objref;
  if (_desc->opq_release && !CORBA::is_nil(*pp)) CORBA::release(*pp);
  *pp = _p;
  CORBA::release(_ptr);
}

static CORBA::Object_ptr
_0RL_tcParser_getObjectPtr_CORBA__InitialReferences(tcObjrefDesc *_desc)
{
  return (CORBA::Object_ptr) *((CORBA_InitialReferences_ptr*)_desc->opq_objref);
}

void _0RL_buildDesc_cCORBA__InitialReferences(tcDescriptor& _desc, const _CORBA_ObjRef_tcDesc_arg< _objref_CORBA_InitialReferences, CORBA_InitialReferences_Helper> & _d)
{
  _desc.p_objref.opq_objref = (void*) &_d._data;
  _desc.p_objref.opq_release = _d._rel;
  _desc.p_objref.setObjectPtr = _0RL_tcParser_setObjectPtr_CORBA__InitialReferences;
  _desc.p_objref.getObjectPtr = _0RL_tcParser_getObjectPtr_CORBA__InitialReferences;
}

void _0RL_delete_CORBA__InitialReferences(void* _data) {
  CORBA::release((CORBA_InitialReferences_ptr) _data);
}

void operator<<=(CORBA::Any& _a, CORBA_InitialReferences_ptr _s) {
  tcDescriptor tcd;
  _CORBA_ObjRef_tcDesc_arg< _objref_CORBA_InitialReferences, CORBA_InitialReferences_Helper>  tmp(_s,0);
  _0RL_buildDesc_cCORBA__InitialReferences(tcd, tmp);
  _a.PR_packFrom(_tc_CORBA_InitialReferences, &tcd);
}

void operator<<=(CORBA::Any& _a, CORBA_InitialReferences_ptr* _sp) {
  _a <<= *_sp;
  CORBA::release(*_sp);
  *_sp = CORBA_InitialReferences::_nil();
}

CORBA::Boolean operator>>=(const CORBA::Any& _a, CORBA_InitialReferences_ptr& _s) {
  CORBA_InitialReferences_ptr sp = (CORBA_InitialReferences_ptr) _a.PR_getCachedData();
  if (sp == 0) {
    tcDescriptor tcd;
    CORBA_InitialReferences_var tmp;
    _0RL_buildDesc_cCORBA__InitialReferences(tcd, tmp);
    if( _a.PR_unpackTo(_tc_CORBA_InitialReferences, &tcd) ) {
      if (!omniORB::omniORB_27_CompatibleAnyExtraction) {
        ((CORBA::Any*)&_a)->PR_setCachedData((void*)(CORBA_InitialReferences_ptr)tmp,_0RL_delete_CORBA__InitialReferences);
      }
      _s = tmp._retn();
      return 1;
    } else {
      _s = CORBA_InitialReferences::_nil(); return 0;
    }
  }
  else {
    CORBA::TypeCode_var tc = _a.type();
    if (tc->equivalent(_tc_CORBA_InitialReferences)) {
    _s = sp; return 1;
    }
    else {
    _s = CORBA_InitialReferences::_nil(); return 0;
    }
  }
}

