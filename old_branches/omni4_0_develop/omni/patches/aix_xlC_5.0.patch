Index: include/omniORB4/cdrStream.h
===================================================================
RCS file: /cvsroot/omniorb/omni/include/omniORB4/Attic/cdrStream.h,v
retrieving revision 1.1.2.19
diff -u -r1.1.2.19 cdrStream.h
--- include/omniORB4/cdrStream.h	14 Mar 2002 14:39:44 -0000	1.1.2.19
+++ include/omniORB4/cdrStream.h	8 Nov 2002 18:07:52 -0000
@@ -218,193 +218,30 @@
 #endif
   }
 
-  friend inline void operator>>= (_CORBA_Short a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      _CORBA_Short t = Swap16(a);
-      a = t;
-    }
-    CdrMarshal(s,_CORBA_Short,omni::ALIGN_2,a);
-  }
-
-  friend inline void operator<<= (_CORBA_Short& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_Short,omni::ALIGN_2,a);
-    if (s.pd_unmarshal_byte_swap) {
-      _CORBA_Short t = Swap16(a);
-      a = t;
-    }
-  }
-
-  friend inline void operator>>= (_CORBA_UShort a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      _CORBA_UShort t = Swap16(a);
-      a = t;
-    }
-    CdrMarshal(s,_CORBA_UShort,omni::ALIGN_2,a);
-  }
-
-  friend inline void operator<<= (_CORBA_UShort& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_UShort,omni::ALIGN_2,a);
-    if (s.pd_unmarshal_byte_swap) {
-      _CORBA_UShort t = Swap16(a);
-      a = t;
-    }
-  }
-
-  friend inline void operator>>= (_CORBA_Long a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      _CORBA_Long t = Swap32(a);
-      a = t;
-    }
-    CdrMarshal(s,_CORBA_Long,omni::ALIGN_4,a);
-  }
-
-  friend inline void operator<<= (_CORBA_Long& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_Long,omni::ALIGN_4,a);
-    if (s.pd_unmarshal_byte_swap) {
-      _CORBA_Long t = Swap32(a);
-      a = t;
-    }
-  }
-
-  friend inline void operator>>= (_CORBA_ULong a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      _CORBA_ULong t = Swap32(a);
-      a = t;
-    }
-    CdrMarshal(s,_CORBA_ULong,omni::ALIGN_4,a);
-  }
-
-  friend inline void operator<<= (_CORBA_ULong& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_ULong,omni::ALIGN_4,a);
-    if (s.pd_unmarshal_byte_swap) {
-      _CORBA_ULong t = Swap32(a);
-      a = t;
-    }
-  }
-
-  friend inline void operator>>= (_CORBA_LongLong a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      _CORBA_LongLong t = Swap64(a);
-      a = t;
-    }
-    CdrMarshal(s,_CORBA_LongLong,omni::ALIGN_8,a);
-  }
-
-  friend inline void operator<<= (_CORBA_LongLong& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_LongLong,omni::ALIGN_8,a);
-    if (s.pd_unmarshal_byte_swap) {
-      _CORBA_LongLong t = Swap64(a);
-      a = t;
-    }
-  }
-
-  friend inline void operator>>= (_CORBA_ULongLong a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      _CORBA_ULongLong t = Swap64(a);
-      a = t;
-    }
-    CdrMarshal(s,_CORBA_ULongLong,omni::ALIGN_8,a);
-  }
-
-  friend inline void operator<<= (_CORBA_ULongLong& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_ULongLong,omni::ALIGN_8,a);
-    if (s.pd_unmarshal_byte_swap) {
-      _CORBA_ULongLong t = Swap64(a);
-      a = t;
-    }
-  }
+  friend inline void operator>>= (_CORBA_Short      a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_Short&     a, cdrStream& s);
+  friend inline void operator>>= (_CORBA_UShort     a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_UShort&    a, cdrStream& s);
+  friend inline void operator>>= (_CORBA_Long       a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_Long&      a, cdrStream& s);
+  friend inline void operator>>= (_CORBA_ULong      a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_ULong&     a, cdrStream& s);
+  friend inline void operator>>= (_CORBA_LongLong   a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_LongLong&  a, cdrStream& s);
+  friend inline void operator>>= (_CORBA_ULongLong  a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_ULongLong& a, cdrStream& s);
 
 #if !defined(NO_FLOAT)
-
-  friend inline void operator>>= (_CORBA_Float a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      union {
- 	_CORBA_Float f;
- 	_CORBA_ULong l;
-      } u;
-      u.f = a;
-      u.l = Swap32(u.l);
-      a = u.f;
-    }
-    CdrMarshal(s,_CORBA_Float,omni::ALIGN_4,a);
-  }
-
-  friend inline void operator<<= (_CORBA_Float& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_Float,omni::ALIGN_4,a);
-    if (s.pd_unmarshal_byte_swap) {
-      union {
-	_CORBA_Float f;
-	_CORBA_ULong l;
-      } u;
-      u.f = a;
-      u.l = Swap32(u.l);
-      a = u.f;
-    }
-  }
-
-  friend inline void operator>>= (_CORBA_Double a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      union {
-	_CORBA_Double d;
-	_CORBA_ULong l[2];
-      } u, v;
-      u.d = a;
-      v.l[0] = Swap32(u.l[1]);
-      v.l[1] = Swap32(u.l[0]);
-      a = v.d;
-    }
-    CdrMarshal(s,_CORBA_Double,omni::ALIGN_8,a);
-  }
-
-  friend inline void operator<<= (_CORBA_Double& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_Double,omni::ALIGN_8,a);
-    if (s.pd_unmarshal_byte_swap) {
-      union {
-	_CORBA_Double d;
-	_CORBA_ULong l[2];
-      } u, v;
-      u.d = a;
-      v.l[0] = Swap32(u.l[1]);
-      v.l[1] = Swap32(u.l[0]);
-      a = v.d;
-    }
-  }
-
+  friend inline void operator>>= (_CORBA_Float      a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_Float&     a, cdrStream& s);
+  friend inline void operator>>= (_CORBA_Double     a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_Double&    a, cdrStream& s);
 #endif
 
 #ifdef HAS_LongDouble
 #if SIZEOF_LONG_DOUBLE == 16
-  friend inline void operator>>= (_CORBA_LongDouble a, cdrStream& s) {
-    if (s.pd_marshal_byte_swap) {
-      union {
-	_CORBA_LongDouble d;
-	_CORBA_ULong l[4];
-      } u, v;
-      u.d = a;
-      v.l[0] = Swap32(u.l[3]);
-      v.l[1] = Swap32(u.l[2]);
-      v.l[2] = Swap32(u.l[1]);
-      v.l[3] = Swap32(u.l[0]);
-      a = v.d;
-    }
-    CdrMarshal(s,_CORBA_LongDouble,omni::ALIGN_8,a);
-  }
-
-  friend inline void operator<<= (_CORBA_LongDouble& a, cdrStream& s) {
-    CdrUnMarshal(s,_CORBA_LongDouble,omni::ALIGN_8,a);
-    if (s.pd_unmarshal_byte_swap) {
-      union {
-	_CORBA_LongDouble d;
-	_CORBA_ULong l[4];
-      } u, v;
-      u.d = a;
-      v.l[0] = Swap32(u.l[3]);
-      v.l[1] = Swap32(u.l[2]);
-      v.l[2] = Swap32(u.l[1]);
-      v.l[3] = Swap32(u.l[0]);
-      a = v.d;
-    }
-  }
+  friend inline void operator>>= (_CORBA_LongDouble  a, cdrStream& s);
+  friend inline void operator<<= (_CORBA_LongDouble& a, cdrStream& s);
 #else
   // Code for long double < 16 bytes is too painful to put inline
   friend void operator>>= (_CORBA_LongDouble  a, cdrStream& s);
@@ -750,6 +587,196 @@
   // cdrStreamAdapter needs to access protected pointers and virtual
   // functions.
 };
+
+inline void operator>>= (_CORBA_Short a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    _CORBA_Short t = Swap16(a);
+    a = t;
+  }
+  CdrMarshal(s,_CORBA_Short,omni::ALIGN_2,a);
+}
+
+inline void operator<<= (_CORBA_Short& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_Short,omni::ALIGN_2,a);
+  if (s.pd_unmarshal_byte_swap) {
+    _CORBA_Short t = Swap16(a);
+    a = t;
+  }
+}
+
+inline void operator>>= (_CORBA_UShort a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    _CORBA_UShort t = Swap16(a);
+    a = t;
+  }
+  CdrMarshal(s,_CORBA_UShort,omni::ALIGN_2,a);
+}
+
+inline void operator<<= (_CORBA_UShort& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_UShort,omni::ALIGN_2,a);
+  if (s.pd_unmarshal_byte_swap) {
+    _CORBA_UShort t = Swap16(a);
+    a = t;
+  }
+}
+
+inline void operator>>= (_CORBA_Long a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    _CORBA_Long t = Swap32(a);
+    a = t;
+  }
+  CdrMarshal(s,_CORBA_Long,omni::ALIGN_4,a);
+}
+
+inline void operator<<= (_CORBA_Long& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_Long,omni::ALIGN_4,a);
+  if (s.pd_unmarshal_byte_swap) {
+    _CORBA_Long t = Swap32(a);
+    a = t;
+  }
+}
+
+inline void operator>>= (_CORBA_ULong a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    _CORBA_ULong t = Swap32(a);
+    a = t;
+  }
+  CdrMarshal(s,_CORBA_ULong,omni::ALIGN_4,a);
+}
+
+inline void operator<<= (_CORBA_ULong& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_ULong,omni::ALIGN_4,a);
+  if (s.pd_unmarshal_byte_swap) {
+    _CORBA_ULong t = Swap32(a);
+    a = t;
+  }
+}
+
+inline void operator>>= (_CORBA_LongLong a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    _CORBA_LongLong t = Swap64(a);
+    a = t;
+  }
+  CdrMarshal(s,_CORBA_LongLong,omni::ALIGN_8,a);
+}
+
+inline void operator<<= (_CORBA_LongLong& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_LongLong,omni::ALIGN_8,a);
+  if (s.pd_unmarshal_byte_swap) {
+    _CORBA_LongLong t = Swap64(a);
+    a = t;
+  }
+}
+
+inline void operator>>= (_CORBA_ULongLong a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    _CORBA_ULongLong t = Swap64(a);
+    a = t;
+  }
+  CdrMarshal(s,_CORBA_ULongLong,omni::ALIGN_8,a);
+}
+
+inline void operator<<= (_CORBA_ULongLong& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_ULongLong,omni::ALIGN_8,a);
+  if (s.pd_unmarshal_byte_swap) {
+    _CORBA_ULongLong t = Swap64(a);
+    a = t;
+  }
+}
+
+#if !defined(NO_FLOAT)
+
+inline void operator>>= (_CORBA_Float a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    union {
+      _CORBA_Float f;
+      _CORBA_ULong l;
+    } u;
+    u.f = a;
+    u.l = Swap32(u.l);
+    a = u.f;
+  }
+  CdrMarshal(s,_CORBA_Float,omni::ALIGN_4,a);
+}
+
+inline void operator<<= (_CORBA_Float& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_Float,omni::ALIGN_4,a);
+  if (s.pd_unmarshal_byte_swap) {
+    union {
+      _CORBA_Float f;
+      _CORBA_ULong l;
+    } u;
+    u.f = a;
+    u.l = Swap32(u.l);
+    a = u.f;
+  }
+}
+
+inline void operator>>= (_CORBA_Double a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    union {
+      _CORBA_Double d;
+      _CORBA_ULong l[2];
+    } u, v;
+    u.d = a;
+    v.l[0] = Swap32(u.l[1]);
+    v.l[1] = Swap32(u.l[0]);
+    a = v.d;
+  }
+  CdrMarshal(s,_CORBA_Double,omni::ALIGN_8,a);
+}
+
+inline void operator<<= (_CORBA_Double& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_Double,omni::ALIGN_8,a);
+  if (s.pd_unmarshal_byte_swap) {
+    union {
+      _CORBA_Double d;
+      _CORBA_ULong l[2];
+    } u, v;
+    u.d = a;
+    v.l[0] = Swap32(u.l[1]);
+    v.l[1] = Swap32(u.l[0]);
+    a = v.d;
+  }
+}
+
+#endif
+
+#ifdef HAS_LongDouble
+#if SIZEOF_LONG_DOUBLE == 16
+inline void operator>>= (_CORBA_LongDouble a, cdrStream& s) {
+  if (s.pd_marshal_byte_swap) {
+    union {
+      _CORBA_LongDouble d;
+      _CORBA_ULong l[4];
+    } u, v;
+    u.d = a;
+    v.l[0] = Swap32(u.l[3]);
+    v.l[1] = Swap32(u.l[2]);
+    v.l[2] = Swap32(u.l[1]);
+    v.l[3] = Swap32(u.l[0]);
+    a = v.d;
+  }
+  CdrMarshal(s,_CORBA_LongDouble,omni::ALIGN_8,a);
+}
+
+inline void operator<<= (_CORBA_LongDouble& a, cdrStream& s) {
+  CdrUnMarshal(s,_CORBA_LongDouble,omni::ALIGN_8,a);
+  if (s.pd_unmarshal_byte_swap) {
+    union {
+      _CORBA_LongDouble d;
+      _CORBA_ULong l[4];
+    } u, v;
+    u.d = a;
+    v.l[0] = Swap32(u.l[3]);
+    v.l[1] = Swap32(u.l[2]);
+    v.l[2] = Swap32(u.l[1]);
+    v.l[3] = Swap32(u.l[0]);
+    a = v.d;
+  }
+}
+#endif
+#endif
 
 #undef CdrMarshal
 #undef CdrUnMarshal
Index: mk/beforeauto.mk.in
===================================================================
RCS file: /cvsroot/omniorb/omni/mk/Attic/beforeauto.mk.in,v
retrieving revision 1.1.2.9
diff -u -r1.1.2.9 beforeauto.mk.in
--- mk/beforeauto.mk.in	6 Nov 2002 11:58:28 -0000	1.1.2.9
+++ mk/beforeauto.mk.in	8 Nov 2002 18:07:54 -0000
@@ -694,10 +694,10 @@
 #
 # Default compiler rules
 #
-CDEBUGFLAGS     = -O
+CDEBUGFLAGS     = 
 CLINK           = $(CC)
 CLINKOPTIONS    = $(CDEBUGFLAGS) $(COPTIONS)
-CXXDEBUGFLAGS   = -O2
+CXXDEBUGFLAGS   = 
 CXXLINK         = $(CXX)
 CXXLINKOPTIONS  = $(CXXDEBUGFLAGS) $(CXXOPTIONS)
 
@@ -922,7 +922,7 @@
 OMNITHREAD_LIB += -lpthread
 
 SHAREDLIB_SUFFIX = a
-PythonSHAREDLIB_SUFFIX = a
+PythonSHAREDLIB_SUFFIX = so
 
 SharedLibraryFullNameTemplate = lib$$1$$2.$$3.$$4.$(SHAREDLIB_SUFFIX)
 SharedLibrarySoNameTemplate = lib$$1$$2.$$3.$(SHAREDLIB_SUFFIX)
Index: src/services/mklib/dir.mk
===================================================================
RCS file: /cvsroot/omniorb/omni/src/services/mklib/Attic/dir.mk,v
retrieving revision 1.3.2.4
diff -u -r1.3.2.4 dir.mk
--- src/services/mklib/dir.mk	26 Feb 2002 14:18:47 -0000	1.3.2.4
+++ src/services/mklib/dir.mk	8 Nov 2002 18:08:00 -0000
@@ -115,8 +115,9 @@
 dynimps := $(patsubst $(DLLDebugSearchPattern),$(DLLNoDebugSearchPattern), \
          $(OMNIORB_LIB))
 else
-imps := $(OMNIORB_LIB_NODYN)
-dynimps := $(OMNIORB_LIB)
+imps := $(OMNIORB_LIB_NODYN) -lomniDynamic4
+#dynimps := $(OMNIORB_LIB) -lomniDynamic4
+dynimps := $(OMNIORB_LIB_NODYN) -lomniDynamic4
 endif
 
 
Index: src/tool/omniidl/cxx/dir.mk
===================================================================
RCS file: /cvsroot/omniorb/omni/src/tool/omniidl/cxx/Attic/dir.mk,v
retrieving revision 1.19.2.13
diff -u -r1.19.2.13 dir.mk
--- src/tool/omniidl/cxx/dir.mk	6 Nov 2002 11:58:28 -0000	1.19.2.13
+++ src/tool/omniidl/cxx/dir.mk	8 Nov 2002 18:08:00 -0000
@@ -91,8 +91,34 @@
 
 DIR_CPPFLAGS += $(SHAREDLIB_CPPFLAGS)
 
+ifdef AIX
+
+DIR_CPPFLAGS += -I. -I/usr/local/include -DNO_STRCASECMP
+
+# shlib = _omniidlmodule.a
+shlib := $(shell $(SharedLibraryFullName) $(namespec))
+
+libinit = init_omniidl
+py_exp = $(PYPREFIX)/lib/python$(PYVERSION)/config/python.exp
+
+$(shlib): $(OBJS) $(PYOBJS)
+	@(set -x; \
+	$(RM) $@; \
+	$(MAKECPPSHAREDLIB) \
+	     -o $(shlib) \
+	     -bI:$(py_exp) \
+	     -n $(libinit) \
+	     $(IMPORT_LIBRARY_FLAGS) \
+	     -bhalt:4 -T512 -H512 \
+	     $(filter-out $(LibSuffixPattern),$^) \
+	     -p 40 \
+	 ; \
+       )
+
+else
 $(shlib): $(OBJS) $(PYOBJS)
 	@(namespec="$(namespec)"; $(MakeCXXSharedLibrary))
+endif
 
 all:: $(shlib)
 
