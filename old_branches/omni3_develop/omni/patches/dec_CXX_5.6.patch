diff -r -c omniORB_2.8.0/include/omniORB2/CORBA.h omniORB_2.8.0_cxx5.6/include/omniORB2/CORBA.h
*** omniORB_2.8.0/include/omniORB2/CORBA.h	Sat Aug 14 15:26:21 1999
--- omniORB_2.8.0_cxx5.6/include/omniORB2/CORBA.h	Sat Aug 14 15:36:02 1999
***************
*** 666,673 ****
--- 666,679 ----
      }
      inline Any_OUT_arg& operator=(Any* p) { _data = p; return *this; }
  
+ #ifndef HAS_POINTER_REF_BUG
      operator Any*& () { return _data; }
      Any*& ptr() { return _data; }
+ #else
+     typedef Any*& PointerRef;
+     operator PointerRef () { return _data; }
+     PointerRef ptr() { return _data; }
+ #endif
  
      Any*& _data;
    private:
Only in omniORB_2.8.0/include/omniORB2: CORBA_basetypes.h
diff -r -c omniORB_2.8.0/include/omniORB2/CORBA_sysdep.h omniORB_2.8.0_cxx5.6/include/omniORB2/CORBA_sysdep.h
*** omniORB_2.8.0/include/omniORB2/CORBA_sysdep.h	Sat Aug 14 13:31:36 1999
--- omniORB_2.8.0_cxx5.6/include/omniORB2/CORBA_sysdep.h	Sat Aug 14 15:36:02 1999
***************
*** 159,164 ****
--- 159,172 ----
  #elif defined(__DECCXX)
  // DEC C++ compiler
  
+ #  if __DECCXX_VER < 60000000
+ #    define HAS_POINTER_REF_BUG
+ #    define HAS_RECURSIVE_TEMPLATE_BUG
+ #  else
+ #    undef HAS_POINTER_REF_BUG
+ #    undef HAS_RECURSIVE_TEMPLATE_BUG
+ #  endif
+ 
  #  if defined(__alpha) && !defined(__VMS)
  #     define SIZEOF_LONG 8
  #     define SIZEOF_INT  4
diff -r -c omniORB_2.8.0/include/omniORB2/stringtypes.h omniORB_2.8.0_cxx5.6/include/omniORB2/stringtypes.h
*** omniORB_2.8.0/include/omniORB2/stringtypes.h	Fri Jun 18 21:28:30 1999
--- omniORB_2.8.0_cxx5.6/include/omniORB2/stringtypes.h	Sat Aug 14 15:36:02 1999
***************
*** 328,335 ****
--- 328,341 ----
    inline _CORBA_String_out& operator=(const char* p) {
      _data = _CORBA_String_var::string_dup(p); return *this;
    }
+ #ifndef HAS_POINTER_REF_BUG
    operator char*& () { return _data; }
    char*& ptr() { return _data; }
+ #else
+   typedef char*& PointerRef;
+   operator PointerRef () { return _data; }
+   PointerRef ptr() { return _data; }
+ #endif
  
    char*& _data;
  
***************
*** 442,448 ****
--- 448,458 ----
  #endif
        s->copybuffer(pd_max);
      }
+ #if !defined(__DECCXX) || __DECCXX_VER >= 60000000
      return pd_data; 
+ #else
+     return (const char* const*)pd_data; 
+ #endif
    }
  
  
diff -r -c omniORB_2.8.0/include/omniORB2/templatedecls.h omniORB_2.8.0_cxx5.6/include/omniORB2/templatedecls.h
*** omniORB_2.8.0/include/omniORB2/templatedecls.h	Sat Aug 14 14:13:58 1999
--- omniORB_2.8.0_cxx5.6/include/omniORB2/templatedecls.h	Sat Aug 14 16:15:53 1999
***************
*** 592,599 ****
      _data = ((T*)p);
      return * this;
    }
!   inline operator T*&()  { return _data; }
!   inline T*& ptr()       { return _data; }
    inline T* operator->() const { return _data; }
  
    T*& _data;
--- 592,605 ----
      _data = ((T*)p);
      return * this;
    }
! #ifndef HAS_POINTER_REF_BUG
!   inline operator T*&() { return _data; }
!   inline T*& ptr() { return _data; }
! #else
!   typedef T*& PointerRef;
!   inline operator PointerRef() { return _data; }
!   inline PointerRef ptr() { return _data; }
! #endif
    inline T* operator->() const { return _data; }
  
    T*& _data;
***************
*** 676,684 ****
--- 682,697 ----
    inline _CORBA_ConstrType_Fix_OUT_arg(const T_out& p) : _data(p._data) {}
    inline T_out& operator=(const T_out& p) { _data = p._data; return *this; }
    inline T_out& operator=(T* p) { _data = p; return *this; }
+ #ifndef HAS_POINTER_REF_BUG
    inline operator T*&() { return _data; }
    inline T*& ptr() { return _data; }
    inline T*& operator->() { return _data; }
+ #else
+   typedef T*& PointerRef;
+   inline operator PointerRef() { return _data; }
+   inline PointerRef ptr() { return _data; }
+   inline PointerRef operator->() { return _data; }
+ #endif
  
    T*& _data;
  
***************
*** 778,786 ****
--- 791,806 ----
    inline _CORBA_ConstrType_Variable_OUT_arg(const T_out& p) : _data(p._data) {}
    inline T_out& operator=(const T_out& p) { _data = p._data; return *this; }
    inline T_out& operator=(T* p) { _data = p; return *this; }
+ #ifndef HAS_POINTER_REF_BUG
    inline operator T*&() { return _data; }
    inline T*& ptr() { return _data; }
    inline T*& operator->() { return _data; }
+ #else
+   typedef T*& PointerRef;
+   inline operator PointerRef() { return _data; }
+   inline PointerRef ptr() { return _data; }
+   inline PointerRef operator->() { return _data; }
+ #endif
  
    T*& _data;
  
***************
*** 878,888 ****
    inline _CORBA_Array_OUT_arg(const T_out& p) : _data(p._data) {}
    inline T_out& operator=(const T_out& p) { _data = p._data; return *this; }
    inline T_out& operator=(T* p) { _data = p; return *this; }
    inline operator T*&() { return _data; }
    inline T*& ptr() { return _data; }
    inline T& operator[] (_CORBA_ULong index) {
!     return _data[index];
    }
  
    T*& _data;
  private:
--- 898,917 ----
    inline _CORBA_Array_OUT_arg(const T_out& p) : _data(p._data) {}
    inline T_out& operator=(const T_out& p) { _data = p._data; return *this; }
    inline T_out& operator=(T* p) { _data = p; return *this; }
+ #ifndef HAS_POINTER_REF_BUG
    inline operator T*&() { return _data; }
    inline T*& ptr() { return _data; }
    inline T& operator[] (_CORBA_ULong index) {
!     return *(pd_data + index);
    }
+ #else
+   typedef T*& PointerRef;
+   inline operator PointerRef() { return _data; }
+   inline PointerRef ptr() { return _data; }
+   inline T& operator[] (_CORBA_ULong index) {
+     return *(pd_data + index);
+   }
+ #endif
  
    T*& _data;
  private:
diff -r -c omniORB_2.8.0/src/lib/omniORB2/dynamic/pseudo.h omniORB_2.8.0_cxx5.6/src/lib/omniORB2/dynamic/pseudo.h
*** omniORB_2.8.0/src/lib/omniORB2/dynamic/pseudo.h	Tue May 25 18:34:45 1999
--- omniORB_2.8.0_cxx5.6/src/lib/omniORB2/dynamic/pseudo.h	Sat Aug 14 15:36:02 1999
***************
*** 149,155 ****
--- 149,159 ----
    virtual CORBA::Boolean NP_is_nil() const;
    virtual CORBA::ContextList_ptr NP_duplicate();
  
+ #if !defined(__DECCXX) || __DECCXX_VER >= 60000000
    inline const char*const* NP_list() { return pd_list.NP_data(); }
+ #else
+   inline const char*const* NP_list() { return (const char*const*)pd_list.NP_data(); }
+ #endif
  
  private:
    void free_entries();
diff -r -c omniORB_2.8.0/src/tool/omniidl2/omniORB2_be/o2be_sequence.cc omniORB_2.8.0_cxx5.6/src/tool/omniidl2/omniORB2_be/o2be_sequence.cc
*** omniORB_2.8.0/src/tool/omniidl2/omniORB2_be/o2be_sequence.cc	Mon Aug  9 13:27:53 1999
--- omniORB_2.8.0_cxx5.6/src/tool/omniidl2/omniORB2_be/o2be_sequence.cc	Sat Aug 14 15:36:02 1999
***************
*** 970,979 ****
  
    IND(s); s << "inline const _Tseq& in() const { return *pd_seq; }\n";
    IND(s); s << "inline _Tseq& inout() { return *pd_seq; }\n";
    IND(s); s << "inline _Tseq*& out() { if (pd_seq) { delete pd_seq; pd_seq = 0; } return pd_seq; }\n";
    IND(s); s << "inline _Tseq* _retn() { _Tseq* tmp = pd_seq; pd_seq = 0; "
  	    "return tmp; }\n\n";
- 
    IND(s); s << "friend class " << (const char*) out_type << ";\n\n";
  
    DEC_INDENT_LEVEL();
--- 970,983 ----
  
    IND(s); s << "inline const _Tseq& in() const { return *pd_seq; }\n";
    IND(s); s << "inline _Tseq& inout() { return *pd_seq; }\n";
+   s << "#ifndef HAS_POINTER_REF_BUG\n";
    IND(s); s << "inline _Tseq*& out() { if (pd_seq) { delete pd_seq; pd_seq = 0; } return pd_seq; }\n";
+   s << "#else\n";
+   IND(s); s << "typedef _Tseq*& PointerRef;\n";
+   IND(s); s << "inline PointerRef out() { if (pd_seq) { delete pd_seq; pd_seq = 0; } return pd_seq; }\n";
+   s << "#endif\n";
    IND(s); s << "inline _Tseq* _retn() { _Tseq* tmp = pd_seq; pd_seq = 0; "
  	    "return tmp; }\n\n";
    IND(s); s << "friend class " << (const char*) out_type << ";\n\n";
  
    DEC_INDENT_LEVEL();
***************
*** 1001,1008 ****
    IND(s); s << "inline " << (const char*) out_type << "& operator=(const "
  	    << (const char*) out_type << "& s) { _data = s._data; return *this; }\n";
    IND(s); s << "inline " << (const char*) out_type << "& operator=(_Tseq* s) { _data = s; return *this; }\n";
    IND(s); s << "inline operator _Tseq*&() { return _data; }\n";
    IND(s); s << "inline _Tseq*& ptr() { return _data; }\n";
    IND(s); s << "inline _Tseq* operator->() { return _data; }\n";
    IND(s); s << "inline " << (const char*) index_ret_type
  	    << " operator [] (_CORBA_ULong i) { ";
--- 1005,1018 ----
    IND(s); s << "inline " << (const char*) out_type << "& operator=(const "
  	    << (const char*) out_type << "& s) { _data = s._data; return *this; }\n";
    IND(s); s << "inline " << (const char*) out_type << "& operator=(_Tseq* s) { _data = s; return *this; }\n";
+   s << "#ifndef HAS_POINTER_REF_BUG\n";
    IND(s); s << "inline operator _Tseq*&() { return _data; }\n";
    IND(s); s << "inline _Tseq*& ptr() { return _data; }\n";
+   s << "#else\n";
+   IND(s); s << "typedef _Tseq*& PointerRef;\n";
+   IND(s); s << "inline operator PointerRef() { return _data; }\n";
+   IND(s); s << "inline PointerRef ptr() { return _data; }\n";
+   s << "#endif\n";
    IND(s); s << "inline _Tseq* operator->() { return _data; }\n";
    IND(s); s << "inline " << (const char*) index_ret_type
  	    << " operator [] (_CORBA_ULong i) { ";
diff -r -c omniORB_2.8.0/src/tool/omniidl2/omniORB2_be/o2be_struct.cc omniORB_2.8.0_cxx5.6/src/tool/omniidl2/omniORB2_be/o2be_struct.cc
*** omniORB_2.8.0/src/tool/omniidl2/omniORB2_be/o2be_struct.cc	Mon Aug  9 13:28:13 1999
--- omniORB_2.8.0_cxx5.6/src/tool/omniidl2/omniORB2_be/o2be_struct.cc	Sat Aug 14 16:24:28 1999
***************
*** 152,160 ****
--- 152,162 ----
    IND(s); s << "struct " << uqname() << " {\n";
    INC_INDENT_LEVEL();
  
+   s << "#ifndef HAS_RECURSIVE_TEMPLATE_BUG\n";
    IND(s); s << "typedef _CORBA_ConstrType_"
  	    << ((isVariable())?"Variable":"Fix")
  	    << "_Var<" << uqname() << "> _var_type;\n";
+   s << "#endif//HAS_RECURSIVE_TEMPLATE_BUG\n";
  
    o2be_nested_typedef::produce_hdr(s,this);
  
***************
*** 248,255 ****
    DEC_INDENT_LEVEL();
    IND(s); s << "};\n\n";
  
    IND(s); s << "typedef " << uqname() << "::_var_type " 
! 	    << uqname() << "_var;\n\n";
  
    IND(s); s << "typedef ";
    if (isVariable()) {
--- 250,263 ----
    DEC_INDENT_LEVEL();
    IND(s); s << "};\n\n";
  
+   s << "#ifndef HAS_RECURSIVE_TEMPLATE_BUG\n";
    IND(s); s << "typedef " << uqname() << "::_var_type " 
! 	    << uqname() << "_var;\n";
!   s << "#else //HAS_RECURSIVE_TEMPLATE_BUG\n";
!   IND(s); s << "typedef _CORBA_ConstrType_"
! 	    << ((isVariable())?"Variable":"Fix")
! 	    << "_Var<" << uqname() << ">" << uqname() << "_var;\n";
!   s << "#endif//HAS_RECURSIVE_TEMPLATE_BUG\n\n";
  
    IND(s); s << "typedef ";
    if (isVariable()) {
